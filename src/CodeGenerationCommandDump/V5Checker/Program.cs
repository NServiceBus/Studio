using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.Composition.Hosting;
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.VisualStudio.Modeling;
using NuPattern.Library;
using NuPattern.Library.Automation;
using NuPattern.Runtime;
using NuPattern.Runtime.Composition;
using NuPattern.Runtime.Schema;
using JsonConvert = NuPattern.Runtime.Serialization.JsonConvert;

namespace CodeGenerationCommandDump
{
    class Program
    {
        static void Main(string[] args)
        {
            // The path of a DSL model file:
            var dslModel =
                args.Length > 0
                ? args[0]
                : @"D:\dev\particular\servicematrix\src\ServiceMatrix\PatternModel.patterndefinition";

            // The Model type generated by the DSL:
            IPatternModelSchema patternModel;

            // Set up the Store to read your type of model:

            Type[] domainTypes = { PatternModelReader.DomainModelType, Type.GetType("NuPattern.Library.Automation.LibraryDomainModel, NuPattern.Library") };

            var container = new CompositionContainer(new DirectoryCatalog(AppDomain.CurrentDomain.BaseDirectory));
            var compositionService =
                (INuPatternCompositionService)Activator.CreateInstance(
                    Type.GetType("NuPattern.Runtime.Bindings.ContainerCompositionServiceAdapter, NuPattern.Runtime.Extensibility"),
                    container);

            var store = new Store(
                new TrivialServiceProvider(
                    new Dictionary<Type, object>
                    {
                        { typeof(INuPatternCompositionService), compositionService},
                        { typeof(INuPatternProjectTypeProvider), new TrivialNuPatternProjectTypeProvider()}
                    }),
                domainTypes);
            var serializationResult = new SerializationResult();

            // All Store changes must be in a Transaction:
            using (Transaction t =
              store.TransactionManager.BeginTransaction("Load model"))
            {
                patternModel = PatternModelReader.Read(serializationResult, store, dslModel);
                t.Commit(); // Don't forget this!
            }

            CheckPatternModel(patternModel);
        }

        private static void CheckPatternModel(IPatternModelSchema patternModel)
        {
            Console.WriteLine("Pattern: " + patternModel.Pattern.Name);

            CheckAutomation(patternModel.Pattern.AutomationSettings, "");

            var designView = patternModel.Pattern.Views.First();
            foreach (var element in ((IElementSchemaContainer)designView).Elements)
            {
                CheckElement(element, 1);
            }
        }

        private static void CheckElement(IAbstractElementSchema element, int indentationLevel)
        {
            var indentation = new string(' ', indentationLevel * 2);
            Console.WriteLine(indentation + "Element: " + element.Name);

            CheckAutomation(element.AutomationSettings, indentation);

            foreach (var childElement in element.Elements)
            {
                CheckElement(childElement, indentationLevel + 1);
            }
        }

        static readonly Regex v4NameRegex = new Regex("^(?<before_version>.*)(?<version>[vV])4(?<after_version>.*)$");

        private static void CheckAutomation(IEnumerable<IAutomationSettingsSchema> automationSettings,
            string indentation)
        {
            // commands
            var allSettingsByName = automationSettings.ToDictionary(s => s.Name, s => s);
            foreach (
                var commandAutomationName in
                    allSettingsByName.Where(kvp => kvp.Value.AutomationType == "Command")
                        .Select(kvp => kvp.Key)
                        .OrderBy(k => k))
            {
                var match = v4NameRegex.Match(commandAutomationName);
                if (match.Success)
                {
                    var v4Settings = allSettingsByName[commandAutomationName].As<ICommandSettings>();

                    // find matching v5 command
                    var v5Name = match.Groups["before_version"].Value + match.Groups["version"].Value + "5" +
                                 match.Groups["after_version"].Value;

                    IAutomationSettingsSchema v5SettingsSchema;
                    if (!allSettingsByName.TryGetValue(v5Name, out v5SettingsSchema))
                    {
                        Console.WriteLine("{0}  Command {1}: does not have matching v5 version", indentation,
                            commandAutomationName);
                        continue;
                    }

                    var v5Settings = v5SettingsSchema.As<ICommandSettings>();
                    // check type id
                    if (v4Settings.TypeId != v5Settings.TypeId)
                    {
                        Console.WriteLine(
                            "{0}  Command {1}: v5 version does not match command type {2} vs {3}",
                            indentation,
                            commandAutomationName,
                            v4Settings.TypeId,
                            v5Settings.TypeId);
                        continue;
                    }

                    // check properties
                    Console.WriteLine("{0}  Command {1}", indentation, commandAutomationName);
                    if (!v4Settings.TypeId.Contains("AggregatorCommand"))
                    {
                        foreach (var v4Property in v4Settings.Properties.Where(p => p.Name != "TemplateAuthoringUri"))
                        {
                            var v4Value = v4Property.Value;
                            var v5Value = v5Settings.Properties.First(p => p.Name == v4Property.Name).Value;

                            if (v4Value != v5Value)
                            {
                                Console.WriteLine("{0}    {1} (v4) = {2}", indentation, v4Property.Name,
                                    v4Property.Value);
                                Console.WriteLine("{0}    {1} (v5) = {2}", indentation, v4Property.Name, v5Value);
                            }
                        }
                    }
                    else
                    {
                        var referencesV4 =
                            JsonConvert.DeserializeObject<Collection<CommandReference>>(
                                v4Settings.Properties.First(p => p.Name == "CommandReferenceList").Value);
                        var referencesV5 =
                            JsonConvert.DeserializeObject<Collection<CommandReference>>(
                                v5Settings.Properties.First(p => p.Name == "CommandReferenceList").Value);

                        if (referencesV4.Count != referencesV5.Count)
                        {
                            Console.WriteLine("{0}    Aggregate count doesn't match", indentation);
                        }
                        else
                        {
                            for (int i = 0; i < referencesV4.Count; i++)
                            {
                                Console.WriteLine(
                                    "{0}    {2} (v4): {1}",
                                    indentation,
                                    allSettingsByName.Where(kvp => kvp.Value.AutomationType == "Command").First(kvp => kvp.Value.As<ICommandSettings>().Id == referencesV4[i].CommandId).Key,
                                    i);
                                Console.WriteLine(
                                    "{0}    {2} (v5): {1}",
                                    indentation,
                                    allSettingsByName.Where(kvp => kvp.Value.AutomationType == "Command").First(kvp => kvp.Value.As<ICommandSettings>().Id == referencesV5[i].CommandId).Key,
                                    i);
                            }
                        }
                    }
                }
            }

            // launch points
            foreach (var settingKvp in
                allSettingsByName
                    .Where(kvp => kvp.Value.AutomationType != "Command")
                    .OrderBy(kvp => kvp.Key + "|" + kvp.Value.AutomationType))
            {
                var match = v4NameRegex.Match(settingKvp.Key);
                if (match.Success)
                {
                    // find matching v5 launch point
                    var v5Name = match.Groups["before_version"].Value + match.Groups["version"].Value + "5" +
                                 match.Groups["after_version"].Value;

                    IAutomationSettingsSchema v5SettingsSchema;
                    if (!allSettingsByName.TryGetValue(v5Name, out v5SettingsSchema))
                    {
                        Console.WriteLine("{0}  Launchpoint {1}: does not have matching v5 version", indentation,
                            settingKvp.Key);
                        continue;
                    }

                    // check type id
                    if (settingKvp.Value.AutomationType != v5SettingsSchema.AutomationType)
                    {
                        Console.WriteLine(
                            "{0}  Launchpoint {1}: v5 version does not match launchpoint type {2} vs {3}",
                            indentation,
                            settingKvp.Key,
                            settingKvp.Value.AutomationType,
                            v5SettingsSchema.AutomationType);
                        continue;
                    }

                    var v4Settings = settingKvp.Value.As<IAutomationSettings>();
                    var v5Settings = v5SettingsSchema.As<IAutomationSettings>();

                    var v4me = (ModelElement)v4Settings;
                    var v4CommandIdProp = v4me.GetDomainClass().FindDomainProperty("CommandId", true);
                    var v4CommandId = v4CommandIdProp != null ? (Guid)v4CommandIdProp.GetValue(v4me) : Guid.Empty;
                    var v4EventIdProp = v4me.GetDomainClass().FindDomainProperty("EventId", true);
                    var v4EventId = v4EventIdProp != null ? (string)v4EventIdProp.GetValue(v4me) : null;
                    var v4ConditionsProp = v4me.GetDomainClass().FindDomainProperty("Conditions", true);
                    var v4Conditions = v4ConditionsProp != null ? (string)v4ConditionsProp.GetValue(v4me) : null;

                    var v5me = (ModelElement)v5Settings;
                    var v5CommandIdProp = v5me.GetDomainClass().FindDomainProperty("CommandId", true);
                    var v5CommandId = v5CommandIdProp != null ? (Guid)v5CommandIdProp.GetValue(v5me) : Guid.Empty;
                    var v5EventIdProp = v5me.GetDomainClass().FindDomainProperty("EventId", true);
                    var v5EventId = v5EventIdProp != null ? (string)v5EventIdProp.GetValue(v5me) : null;
                    var v5ConditionsProp = v5me.GetDomainClass().FindDomainProperty("Conditions", true);
                    var v5Conditions = v5ConditionsProp != null ? (string)v5ConditionsProp.GetValue(v5me) : null;

                    if (v4EventId != v5EventId)
                    {
                        Console.WriteLine(
                            "{0}  Launchpoint: {1} does not match event id: {2} vs {3}",
                            indentation,
                            settingKvp.Key,
                            v4EventId,
                            v5EventId);

                        continue;
                    }

                    Console.WriteLine(
                        "{0}  Launchpoint: {1}({4}) {2}-{3}",
                        indentation,
                        settingKvp.Key,
                        allSettingsByName.Where(kvp => kvp.Value.AutomationType == "Command").First(kvp => kvp.Value.As<ICommandSettings>().Id == v4CommandId).Key,
                        allSettingsByName.Where(kvp => kvp.Value.AutomationType == "Command").First(kvp => kvp.Value.As<ICommandSettings>().Id == v5CommandId).Key,
                        v4EventId);
                    if (!string.IsNullOrEmpty(v4Conditions) && !string.IsNullOrEmpty(v5Conditions))
                    {
                        Console.WriteLine("{0}    Conditions v4: ", indentation);
                        foreach (var conditionLine in (v4Conditions ?? "").Split('\n', '\r').Where(s => !string.IsNullOrEmpty(s)))
                        {
                            Console.WriteLine("{0}      {1}", indentation, conditionLine);
                        }
                        Console.WriteLine("{0}    Conditions v5: ", indentation);
                        foreach (var conditionLine in (v5Conditions ?? "").Split('\n', '\r').Where(s => !string.IsNullOrEmpty(s)))
                        {
                            Console.WriteLine("{0}      {1}", indentation, conditionLine);
                        }
                    }
                }
            }
        }
    }

    public class TrivialServiceProvider : IServiceProvider
    {
        private readonly IDictionary<Type, object> services;

        public TrivialServiceProvider(IDictionary<Type, object> services)
        {
            this.services = services;
        }

        public object GetService(Type serviceType)
        {
            object service;

            return services.TryGetValue(serviceType, out service) ? service : null;
        }
    }

    public class TrivialNuPatternProjectTypeProvider : INuPatternProjectTypeProvider
    {
        private IList<Type> allTypes;

        public IEnumerable<Type> GetTypes<T>()
        {
            if (allTypes == null)
            {
                allTypes = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes()).ToList();
            }

            return allTypes;
        }
    }
}