// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerationCommandDump
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Microsoft.VisualStudio.Modeling;
    using NuPattern;
    using NuPattern.Library;
    using NuPattern.Library.Automation;
    using NuPattern.Runtime;
    using NuPattern.Runtime.Bindings;
    using NuPattern.Runtime.Serialization;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class AutomationSetup : AutomationSetupBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 14 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

    // collect all interesting elements
    var automationSettings = ((IElementSchemaContainer)Pattern.Views.First()).Elements
        .Traverse(e => e.Elements)
        .Union(Enumerable.Repeat<IPatternElementSchema>(Pattern, 1))
        .Where(e => e.AutomationSettings.Any())
        .GroupBy(e => e.Name)
        .OrderBy(e => e.Key)
        .SelectMany(g => g.Select(e => Tuple.Create(e.Name, e.Id.ToString("N"), "Setup_" + (g.Count() == 1 ? e.Name : e.Name + "_" + e.Id.ToString("N")) + "_Automation", e.AutomationSettings)))
        .ToList();

            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Linq;
using NuPattern;
using NuPattern.Library.Automation;
using NuPattern.Runtime;
using NuPattern.VisualStudio.Solution;

namespace NServiceBusStudio
{
    public static class AutomationConfiguration
    {
        public static void SetupCustomAutomation(IPatternManager patternManager)
        {
            var toolkit = patternManager.InstalledToolkits.FirstOrDefault(it => it.Name == ToolkitConstants.ToolkitName);
            if (toolkit == null)
            {
                return;
            }

            var schema = toolkit.Schema.As<IPatternModelSchema>();

            // update automation as needed
            SetupCustomAutomation(schema.Pattern);
            foreach (var element in ((IElementSchemaContainer)schema.Pattern.Views.First()).Elements.Traverse(e => e.Elements))
            {
                SetupCustomAutomation(element);
            }
        }

");
            
            #line 54 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
  
    WriteApplicationAutomationMethod(automationSettings);

    foreach(var tuple in automationSettings)
    {
        WriteElementAutomation(tuple.Item3, tuple.Item4); 
    }

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 64 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

    void WriteApplicationAutomationMethod(IEnumerable<Tuple<string, string, string, IEnumerable<IAutomationSettingsSchema>>> elements)
    {

        
        #line default
        #line hidden
        
        #line 67 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("        private static void SetupCustomAutomation(IPatternElementSchema element)\r" +
        "\n        {\r\n            switch (element.Name)\r\n            {\r\n");

        
        #line default
        #line hidden
        
        #line 72 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

        foreach (var tuple in elements.Where(t => !t.Item3.Contains(t.Item2)))
        {

        
        #line default
        #line hidden
        
        #line 75 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                case \"");

        
        #line default
        #line hidden
        
        #line 76 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(tuple.Item1));

        
        #line default
        #line hidden
        
        #line 76 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\":\r\n                    ");

        
        #line default
        #line hidden
        
        #line 77 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(tuple.Item3));

        
        #line default
        #line hidden
        
        #line 77 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("(element);\r\n                    break;\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 80 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
         
        }

        
        #line default
        #line hidden
        
        #line 82 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                default:\r\n                    switch (element.Id.ToString(\"N\"))\r\n" +
        "                    {\r\n");

        
        #line default
        #line hidden
        
        #line 86 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

        foreach (var tuple in elements.Where(t => t.Item3.Contains(t.Item2)))
        {

        
        #line default
        #line hidden
        
        #line 89 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                        case \"");

        
        #line default
        #line hidden
        
        #line 90 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(tuple.Item2));

        
        #line default
        #line hidden
        
        #line 90 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\":\r\n                            // ");

        
        #line default
        #line hidden
        
        #line 91 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(tuple.Item1));

        
        #line default
        #line hidden
        
        #line 91 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\r\n                            ");

        
        #line default
        #line hidden
        
        #line 92 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(tuple.Item3));

        
        #line default
        #line hidden
        
        #line 92 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("(element);\r\n                            break;\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 95 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
         
        }

        
        #line default
        #line hidden
        
        #line 97 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 103 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

    }

        
        #line default
        #line hidden
        
        #line 106 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

    void WriteElementAutomation(string methodName, IEnumerable<IAutomationSettingsSchema> automationSettings)
    {
        var automationSettingsSchemata = automationSettings as IList<IAutomationSettingsSchema> ?? automationSettings.ToList();

        var allCommands =
            automationSettingsSchemata
            .Where(s => s.AutomationType == "Command")
            .Select(s => s.As<ICommandSettings>())
            .ToList();
        var allCommandsById = allCommands.ToDictionary(c => c.Id, c => c);
        var referencedCommands = 
            new HashSet<Guid>(
            allCommands
            .Where(cs => cs.TypeId.Contains("AggregatorCommand"))
            .SelectMany(ac =>
            JsonConvert.DeserializeObject<Collection<CommandReference>>(ac.Properties.First(p => p.Name == "CommandReferenceList").Value)
            .Select(cr => cr.CommandId)));


        
        #line default
        #line hidden
        
        #line 125 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("        private static void ");

        
        #line default
        #line hidden
        
        #line 126 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));

        
        #line default
        #line hidden
        
        #line 126 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("(IPatternElementSchema element)\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 128 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

        // non-aggregator commands
        foreach (var commandSetting in allCommands.Where(cs => !cs.TypeId.Contains("AggregatorCommand")).OrderBy(cs => cs.Name))
        {
            if(referencedCommands.Contains(commandSetting.Id))
            {

        
        #line default
        #line hidden
        
        #line 134 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("            var ");

        
        #line default
        #line hidden
        
        #line 135 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(commandSetting.Name));

        
        #line default
        #line hidden
        
        #line 135 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(" =\r\n");

        
        #line default
        #line hidden
        
        #line 136 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

                PushIndent("    ");
            }

        
        #line default
        #line hidden
        
        #line 139 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("            element.CreateOrUpdateCommandSettings(\r\n                new Guid(\"");

        
        #line default
        #line hidden
        
        #line 141 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(commandSetting.Id));

        
        #line default
        #line hidden
        
        #line 141 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\"),\r\n                \"");

        
        #line default
        #line hidden
        
        #line 142 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(commandSetting.Name));

        
        #line default
        #line hidden
        
        #line 142 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\",\r\n                () => \r\n");

        
        #line default
        #line hidden
        
        #line 144 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
 
            PushIndent("    ");
            WriteBindingInitialization(commandSetting); 
            PopIndent();

        
        #line default
        #line hidden
        
        #line 148 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(");\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 150 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

            if(referencedCommands.Contains(commandSetting.Id))
            {
                PopIndent();
            }
        }

        // aggregator commands
        foreach (var commandSetting in allCommands.Where(cs => cs.TypeId.Contains("AggregatorCommand")).OrderBy(ac => ac.Name))
        {
            var references = JsonConvert.DeserializeObject<Collection<CommandReference>>(commandSetting.Properties.First(p => p.Name == "CommandReferenceList").Value)
                .Select(r => allCommandsById[r.CommandId]);
            if(referencedCommands.Contains(commandSetting.Id))
            {

        
        #line default
        #line hidden
        
        #line 164 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("            var ");

        
        #line default
        #line hidden
        
        #line 165 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(commandSetting.Name));

        
        #line default
        #line hidden
        
        #line 165 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(" =\r\n");

        
        #line default
        #line hidden
        
        #line 166 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

                PushIndent("    ");
            }

        
        #line default
        #line hidden
        
        #line 169 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("            element.CreateOrUpdateAggregatorCommandSettings(\r\n                \"");

        
        #line default
        #line hidden
        
        #line 171 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(commandSetting.Name));

        
        #line default
        #line hidden
        
        #line 171 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\"");

        
        #line default
        #line hidden
        
        #line 171 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

            foreach (var reference in references)
            {

        
        #line default
        #line hidden
        
        #line 174 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(",\r\n                ");

        
        #line default
        #line hidden
        
        #line 175 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(reference.Name));

        
        #line default
        #line hidden
        
        #line 175 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

            }

        
        #line default
        #line hidden
        
        #line 177 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(");\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 179 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

            if(referencedCommands.Contains(commandSetting.Id))
            {
                PopIndent();
            }
        }

        
        #line default
        #line hidden
        
        #line 185 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("            // commands referenced by automation  \r\n");

        
        #line default
        #line hidden
        
        #line 187 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"


        // referenced commands

        foreach (var commandName in
            automationSettingsSchemata
            .Where(s => s.AutomationType != "Command")
            .Select(
            s =>
            {
            var automation = s.As<IAutomationSettings>();
            var me = (ModelElement)automation;
            var prop = me.GetDomainClass().FindDomainProperty("CommandId", true);
            return prop != null ? (Guid)prop.GetValue(me) : Guid.Empty;
            })
            .Where(g => g != Guid.Empty)
            .Distinct()
            .Select(g => allCommandsById[g].Name)
            .OrderBy(n => n))
        {

        
        #line default
        #line hidden
        
        #line 207 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("            // - ");

        
        #line default
        #line hidden
        
        #line 208 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(commandName));

        
        #line default
        #line hidden
        
        #line 208 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 209 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

        }


        
        #line default
        #line hidden
        
        #line 212 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("        }\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 215 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

    }

        
        #line default
        #line hidden
        
        #line 218 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

    void WriteBindingInitialization(IBindingSettings bindingSettings)
    {
        if(bindingSettings.Properties.Count > 0)
        {

        
        #line default
        #line hidden
        
        #line 223 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                    new ");

        
        #line default
        #line hidden
        
        #line 224 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(bindingSettings.TypeId));

        
        #line default
        #line hidden
        
        #line 224 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\r\n                    {\r\n");

        
        #line default
        #line hidden
        
        #line 226 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

            foreach (var propertyBindingSettings in bindingSettings.Properties.OrderBy(bs => bs.Name))
            {
                if (propertyBindingSettings.Name == "TemplateAuthoringUri")
                {
                    continue;
                }

                string type;
                switch (propertyBindingSettings.Name)
                {
                    case "TemplateUri":
                        type = "Uri";
                        break;

                    case "TargetCopyToOutput":
                        type = "CopyToOutput";
                        break;

                    default:
                        type = "string";
                        break;
                }

                if (propertyBindingSettings.ValueProvider == null)
                {
                    if (propertyBindingSettings.Value == "True" || propertyBindingSettings.Value == "False")
                    {
                        type = "bool";
                    }

                    var propertyValue = (propertyBindingSettings.Value ?? "").Replace("\\", "\\\\");
                    if(type == "string")
                    {

        
        #line default
        #line hidden
        
        #line 260 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                        ");

        
        #line default
        #line hidden
        
        #line 261 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyBindingSettings.Name));

        
        #line default
        #line hidden
        
        #line 261 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(" = \"");

        
        #line default
        #line hidden
        
        #line 261 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyValue));

        
        #line default
        #line hidden
        
        #line 261 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\",\r\n");

        
        #line default
        #line hidden
        
        #line 262 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

                    }
                    else
                    {

        
        #line default
        #line hidden
        
        #line 266 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                        ");

        
        #line default
        #line hidden
        
        #line 267 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyBindingSettings.Name));

        
        #line default
        #line hidden
        
        #line 267 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(" = BindingFor.Value<");

        
        #line default
        #line hidden
        
        #line 267 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type));

        
        #line default
        #line hidden
        
        #line 267 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(">(\"");

        
        #line default
        #line hidden
        
        #line 267 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyValue));

        
        #line default
        #line hidden
        
        #line 267 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("\"),\r\n");

        
        #line default
        #line hidden
        
        #line 268 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

                    }
                }
                else
                {

        
        #line default
        #line hidden
        
        #line 273 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                        ");

        
        #line default
        #line hidden
        
        #line 274 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyBindingSettings.Name));

        
        #line default
        #line hidden
        
        #line 274 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(" = BindingFor.ValueProvider<");

        
        #line default
        #line hidden
        
        #line 274 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type));

        
        #line default
        #line hidden
        
        #line 274 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(">(\r\n");

        
        #line default
        #line hidden
        
        #line 275 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

                    PushIndent("        ");
                    WriteBindingInitialization(propertyBindingSettings.ValueProvider); 
                    PopIndent();
        
        #line default
        #line hidden
        
        #line 278 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("),\r\n");

        
        #line default
        #line hidden
        
        #line 279 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

                }
            }

        
        #line default
        #line hidden
        
        #line 282 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                    }");

        
        #line default
        #line hidden
        
        #line 283 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

        }
        else
        {

        
        #line default
        #line hidden
        
        #line 287 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("                    new ");

        
        #line default
        #line hidden
        
        #line 288 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(bindingSettings.TypeId));

        
        #line default
        #line hidden
        
        #line 288 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"
this.Write("()");

        
        #line default
        #line hidden
        
        #line 288 "D:\dev\particular\servicematrix\src\CodeGenerationCommandDump\GenerateAutomationCode\AutomationSetup.tt"

        }
    }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class AutomationSetupBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
