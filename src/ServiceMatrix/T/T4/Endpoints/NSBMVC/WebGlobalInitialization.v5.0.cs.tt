<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="True" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Assembly Name="Particular.ServiceMatrix.Automation.dll" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Import Namespace="global::NuPattern.Runtime" #>
<#@ Import Namespace="global::NServiceBusStudio" #>
<#@ Import Namespace="global::NServiceBusStudio.Automation.Extensions" #>
<#@ Import Namespace="System.Linq" #>
<#  var nserviceBusHost = ((IProductElement)this.Element).As<INServiceBusMVC>(); #>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Autofac;
using Autofac.Integration.Mvc;
using NServiceBus;
using NServiceBus.Persistence;
using System.Reflection;
using System.Web.Mvc;

namespace <#= nserviceBusHost.Namespace #>.Infrastructure
{
    public static class WebGlobalInitialization
    {
        public static IBus InitializeNServiceBus()
        {
		    var builder = new ContainerBuilder();
			builder.RegisterControllers(Assembly.GetExecutingAssembly())
                .PropertiesAutowired(); //this is needed to get property injection working
			
			// Register the sender components 
			builder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly())
                  .Where(t => t.Name.EndsWith("Sender"))
                  .AsImplementedInterfaces()
				  .PropertiesAutowired();
			var container = builder.Build();

			// Configure the bus
			var config = new BusConfiguration();
			config.UseContainer<NServiceBus.Autofac>(c => c.ExistingLifetimeScope(container));
			//TODO: Make this based on user selection.		
			config.UsePersistence<InMemoryPersistence>();
			config.EnableInstallers();
			var bus = Bus.Create(config);
            bus.Start();            

            //tell MVC to resolve via autofac
            DependencyResolver.SetResolver(new AutofacDependencyResolver(container));

            return bus;
        }
    }
}
