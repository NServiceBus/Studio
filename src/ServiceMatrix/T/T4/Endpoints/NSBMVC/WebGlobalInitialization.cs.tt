<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="True" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Assembly Name="Particular.ServiceMatrix.Automation.dll" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Import Namespace="global::NuPattern.Runtime" #>
<#@ Import Namespace="global::NServiceBusStudio" #>
<#@ Import Namespace="global::NServiceBusStudio.Automation.Extensions" #>
<#@ Import Namespace="System.Linq" #>
<#  var nserviceBusHost = ((IProductElement)this.Element).As<INServiceBusMVC>(); #>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NServiceBus;
using Autofac;
using Autofac.Integration.Mvc;
using System.Reflection;

namespace <#= nserviceBusHost.Namespace #>.Infrastructure
{
    public static class WebGlobalInitialization
    {
        public static IBus InitializeNServiceBus()
        {
		    var builder = new ContainerBuilder();
			 builder.RegisterControllers(Assembly.GetExecutingAssembly())
                .PropertiesAutowired(); //this is needed to get property injection working
			var container = builder.Build();

			Configure.Serialization.Xml();
<#
if (!nserviceBusHost.SendOnly)
{
#>
			Configure.Transactions.Disable();

            return NServiceBus.Configure.With()
                .AutofacBuilder(container) //pass the container in so NSB will use it
                .PurgeOnStartup(false)
                .UnicastBus()
                .RunHandlersUnderIncomingPrincipal(false)
                .CreateBus()
                .Start(() => Configure.Instance.ForInstallationOn<NServiceBus.Installation.Environments.Windows>().Install());
<#
} 
else 
{
#> 
            return NServiceBus.Configure.With()
                .AutofacBuilder(container) //pass the container in so NSB will use it
                .UnicastBus()
                .SendOnly();
<#
}
#>
        }
    }
}
