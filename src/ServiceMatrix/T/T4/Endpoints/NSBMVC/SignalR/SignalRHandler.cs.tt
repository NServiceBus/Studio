<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="True" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Assembly Name="Particular.ServiceMatrix.Automation.dll" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Import Namespace="global::NuPattern.Runtime" #>
<#@ Import Namespace="global::NServiceBusStudio" #>
<#@ Import Namespace="global::NServiceBusStudio.Automation.Extensions" #>
<#@ Import Namespace="System.Linq" #>
<#  
 var component = ((IProductElement)this.Element).As<IComponent>(); 
 var root = ((IProductElement)this.Element).Root.As<IApplication>();
 var message = component.CodeIdentifier.Replace("Handler","");
 var proxyMethodNameForUseInJavaScript = Char.ToLowerInvariant(message[0]) + message.Substring(1);
 
 var eventsNamespaces = component.Subscribes.SubscribedEventLinks
                .Where(l => l.EventReference.Value != null) // Ignore generic message handlers
                .Select(el => el.EventReference.Value.Parent.Namespace);
 var messagesNamespaces = component.Subscribes.HandledMessageLinks.Select(ml => ml.MessageReference.Value.Parent.Namespace);


#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NServiceBus;
using Microsoft.AspNet.SignalR;
<#
    foreach (var serviceEventNamespace in eventsNamespaces)
	{
#>using <#= serviceEventNamespace #>;
<#
    }
#>
<#
    foreach (var serviceMessagesNamespace in messagesNamespaces)
	{
#>using <#= serviceMessagesNamespace #>;
<#
    }
#>

namespace <#= component.Namespace #>
{
    public class Broadcast<#= component.CodeIdentifier #> : IHandleMessages<<#= message #>>
	{
		public void Handle(<#= message #> message)
        {
            var context = GlobalHost.ConnectionManager.GetHubContext<<#= component.CodeIdentifier #>Hub>();
            context.Clients.All.<#= proxyMethodNameForUseInJavaScript #>(message); 
        }
	}
}
