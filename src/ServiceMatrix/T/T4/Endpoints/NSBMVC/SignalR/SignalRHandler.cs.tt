<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="True" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Assembly Name="Particular.ServiceMatrix.Automation.dll" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Import Namespace="global::NuPattern.Runtime" #>
<#@ Import Namespace="global::NServiceBusStudio" #>
<#@ Import Namespace="global::NServiceBusStudio.Automation.Extensions" #>
<#@ Import Namespace="System.Linq" #>
<#  
 var component = ((IProductElement)this.Element).As<IComponent>(); 
 var root = ((IProductElement)this.Element).Root.As<IApplication>();
 
 var eventsNamespaces = component.Subscribes.SubscribedEventLinks
                .Where(l => l.EventReference.Value != null) // Ignore generic message handlers
                .Select(el => el.EventReference.Value.Parent.Namespace);
 var messagesNamespaces = component.Subscribes.HandledMessageLinks.Select(ml => ml.MessageReference.Value.Parent.Namespace);

 var eventHandlers = component.Subscribes.SubscribedEventLinks;
 var replyHandlers = component.Subscribes.HandledMessageLinks;

#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NServiceBus;
using Microsoft.AspNet.SignalR;
<#
    foreach (var serviceEventNamespace in eventsNamespaces)
	{
#>using <#= serviceEventNamespace #>;
<#
    }
#>
<#
    foreach (var serviceMessagesNamespace in messagesNamespaces)
	{
#>using <#= serviceMessagesNamespace #>;
<#
    }
#>

namespace <#= component.Namespace #>
{
<#
foreach (var eventHandler in eventHandlers)
{
var eventMessage = eventHandler.CodeIdentifier;
var proxyMethodNameForUseInJavaScript = Char.ToLowerInvariant(eventMessage[0]) + eventMessage.Substring(1);
#>
	public class Broadcast<#= eventMessage #> : IHandleMessages<<#= eventMessage #>>
	{
		public void Handle(<#= eventMessage #> message)
        {
            var context = GlobalHost.ConnectionManager.GetHubContext<<#= eventMessage #>Hub>();
            context.Clients.All.<#= proxyMethodNameForUseInJavaScript #>(message); 
        }
	}        
<#
}
#>

<#
foreach (var replyHandler in replyHandlers)
{
var replyMessage = replyHandler.CodeIdentifier;
var proxyMethodNameForUseInJavaScript = Char.ToLowerInvariant(replyMessage[0]) + replyMessage.Substring(1);
#>
	public class Broadcast<#= replyMessage #> : IHandleMessages<<#= replyMessage #>>
	{
		public void Handle(<#= replyMessage #> message)
        {
            var context = GlobalHost.ConnectionManager.GetHubContext<<#= replyMessage #>Hub>();
            context.Clients.All.<#= proxyMethodNameForUseInJavaScript #>(message); 
        }
	}        
<#
}
#>
}