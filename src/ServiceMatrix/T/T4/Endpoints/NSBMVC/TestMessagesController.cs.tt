<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="True" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Assembly Name="Particular.ServiceMatrix.Automation.dll" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Import Namespace="global::NuPattern.Runtime" #>
<#@ Import Namespace="global::NServiceBusStudio" #>
<#@ Import Namespace="global::NServiceBusStudio.Automation.Extensions" #>
<#@ Import Namespace="System.Linq" #>
<#    
    var nserviceBusMVC = ((IProductElement)this.Element).As<INServiceBusMVC>();
    var root = ((IProductElement)this.Element).Root.As<IApplication>();
    var components = nserviceBusMVC.NServiceBusMVCComponents.NServiceBusMVCComponentLinks.Select(cl => cl.ComponentReference.Value);
    var sendercomponents = components.Where(c => c.IsSender);

    var commandsAndSenders = 
        sendercomponents
            .SelectMany(c => c.Publishes.CommandLinks.Select(cl => cl.CommandReference.Value))
            .Distinct()
            .OrderBy(cm => cm.CodeIdentifier)
            .Select(cm => 
                new 
                { 
                    Command = cm, 
                    CanonicalSender = sendercomponents.First(c => c.Publishes.CommandLinks.Any(cl => cl.CommandReference.Value == cm))
                });
    var events = 
        sendercomponents
            .SelectMany(c => c.Publishes.EventLinks.Select(cl => cl.EventReference.Value))
            .Distinct()
            .OrderBy(e => e.CodeIdentifier);
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web.Mvc;
using NServiceBus;
<#
    foreach (var serviceName in commandsAndSenders.Select(s => s.Command.Parent.Parent.Parent.CodeIdentifier).Distinct().OrderBy(sn => sn))
    {
#>using <#=            root.CodeIdentifier#>.<#=            root.ProjectNameInternalMessages #>.Commands.<#=            serviceName #>;
<#
    }

    foreach (var serviceName in events.Select(s => s.Parent.Parent.Parent.CodeIdentifier).Distinct().OrderBy(sn => sn))
    {
#>using <#=            root.CodeIdentifier#>.<#=            root.ProjectNameContracts #>.<#=            serviceName #>;
<#
    }

    foreach (var serviceName in sendercomponents.Select(s => s.Parent.Parent.CodeIdentifier).Distinct().OrderBy(sn => sn))
    {
#>using <#=            root.CodeIdentifier#>.<#=            serviceName #>;
<#
    }
#>

namespace <#=        nserviceBusMVC.Namespace #>.Controllers
{
    public partial class TestMessagesController : Controller
    {
        //
        // GET: /TestMessages/

        public ActionResult Index()
        {
            return View();
        }
<#

    foreach (var component in commandsAndSenders.Select(t => t.CanonicalSender).Distinct().OrderBy(c => c.CodeIdentifier))
    {
#>

        public I<#=            component.CodeIdentifier #> <#=            component.CodeIdentifier #> { get; set; }
<#
    }

    // Send Commands
    foreach (var commandAndSender in commandsAndSenders)
    {
#>

        //
        // POST: /TestMessages/SendMessage<#=            commandAndSender.Command.CodeIdentifier #>
          
        [HttpPost]
        public ActionResult SendMessage<#=            commandAndSender.Command.CodeIdentifier #>(<#=            commandAndSender.Command.CodeIdentifier #> <#=            commandAndSender.Command.CodeIdentifier #>)
        {
            Configure<#=            commandAndSender.Command.CodeIdentifier #>(<#=            commandAndSender.Command.CodeIdentifier #>);
            <#=            commandAndSender.CanonicalSender.CodeIdentifier #>.Send(<#=            commandAndSender.Command.CodeIdentifier #>);

            ViewBag.MessageSent = "<#=            commandAndSender.Command.CodeIdentifier #>";

            return View("Index");
        }
<#
    }

    // Send Events
    foreach (var @event in events)
    {
#>

        //
        // POST: /TestMessages/SendMessage<#=                @event.CodeIdentifier #>
		
        [HttpPost]
        public ActionResult SendMessage<#=                @event.CodeIdentifier #>(<#=                @event.CodeIdentifier #> <#=                @event.CodeIdentifier #>)
        {
            Configure<#=                @event.CodeIdentifier #>(<#=                @event.CodeIdentifier #>);
            MvcApplication.Bus.Publish(<#=                @event.CodeIdentifier #>);

            ViewBag.MessageSent = "<#=                @event.CodeIdentifier #>";

            return View("Index");
        }
<#
    }
    
        //  Send Commands
    foreach (var command in commandsAndSenders)
    {
#>

        partial void Configure<#=                command.Command.CodeIdentifier #>(<#=                command.Command.CodeIdentifier #> message);
<#
    }

    // Send Events
    foreach (var @event in events)
    {
#>

        partial void Configure<#=                @event.CodeIdentifier #>(<#=                @event.CodeIdentifier #> message);
<#
    }
#>
    }
}
