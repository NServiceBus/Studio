<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mindscape.WpfDiagramming.Foundation</name>
    </assembly>
    <members>
        <member name="T:Mindscape.WpfDiagramming.Foundation.Arrowhead">
            <summary>
            Can be placed at each end of a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> to render an arrow head.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.Arrowhead.PathStyleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.Arrowhead.PathStyle"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Arrowhead.Length">
            <summary>
            Gets or sets the distance from the tip of the arrow head to the back edge.
            Note that the length does not put a negative <see cref="P:Mindscape.WpfDiagramming.Foundation.Arrowhead.Notch"/> value into conideration.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Arrowhead.BackWidth">
            <summary>
            Gets or sets the distance between the 2 points adjacent to the arrow tip point.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Arrowhead.Notch">
            <summary>
            Gets or sets the indentation of the back edge of the arrow head. A possitive value will push this indentation inwards
            towards the arrow tip. A value of 0 will allow the arrowhead to look like a simple triangle.
            A negative value will make the arrow look like a kite or a diamond.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Arrowhead.PathStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style"/> applied to the arrow path.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.Arrowhead.PathStyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.AttachedThumb">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.Primitives.Thumb"/> which is associated with a specific
            <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.AttachedThumb.ElementProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.AttachedThumb.Element"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.AttachedThumb.SnapToGuidelinesProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.AttachedThumb.SnapToGuidelines"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.AttachedThumb.Element">
            <summary>
            Gets or sets the element to which the <see cref="T:Mindscape.WpfDiagramming.Foundation.AttachedThumb"/> is attached.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.AttachedThumb.ElementProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.AttachedThumb.SnapToGuidelines">
            <summary>
            Gets or sets whether the <see cref="T:Mindscape.WpfDiagramming.Foundation.AttachedThumb"/> should snap to guidelines
            when dragged.  The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.AttachedThumb.SnapToGuidelinesProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.AutoSizeCanvas">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.Canvas"/> that automatically sizes itself
            to its child items and their layout.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget">
            <summary>
            Provides information about a potential destination of a connection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget.Connectable">
            <summary>
            Gets a potential destination connectable for a connection. This could either be a node or another connection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget.ConnectionEnd">
            <summary>
            Gets a <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget.ConnectionEnd"/> to determine which end of the connection is being moved.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget.ConnectionPoint">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> that is a potential destination for the connection.
            This will be null whenever it is not needed for the connection validation.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionEnd">
            <summary>
            Identifies the two ends of a connection.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionEnd.Start">
            <summary>
            The start or "from" end of the connection.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionEnd.Finish">
            <summary>
            The finish or "to" end of the connection.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirection">
            <summary>
            The direction that an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> flows relative to the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable"/>
            that it is attached to. That is, whether an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> receives connections
            or originates them.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirection.Inbound">
            <summary>
            Signifies that some <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> is designed to receive connections.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirection.Outbound">
            <summary>
            Signifies that some <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> is designed to originate connections.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirection.Any">
            <summary>
            Signifies that some <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> is designed to both
            receive and originate connections.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointShowFlags">
            <summary>
            Describes which type of connection points should have their visibility changed.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointShowFlags.Inbound">
            <summary>
            Signifies that inbound connection points should have their visibility changed.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointShowFlags.Outbound">
            <summary>
            Signifies that outbound connection points should have their visibility changed.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb">
            <summary>
            Enables horizontal or vertical movement of a single <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/>.
            Note that a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/> only allows horizontal or vertical segments to be moved.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.SegmentMovedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.SegmentMoved"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.QuerySegmentDragEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.QuerySegmentPosition"/> routed event.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.ConnectionSegmentProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.ConnectionSegment"/> property.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.SegmentMoved">
            <summary>
            Occurs when the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/> is moved.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.QuerySegmentPosition">
            <summary>
            Occurs when QueryDropPosition happens.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.ConnectionSegment">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> that this 
            <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/> can move.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.ConnectionSegmentProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.QuerySegmentDragEventArgs">
            <summary>
            Provides information to the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> about where the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/>
            wants to place the <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> that it is moving. instances of this class can
            then hold information about where the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> allows the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>
            to be placed.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.QuerySegmentDragEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.QuerySegmentDragEventArgs"/> class.
            </summary>
            <param name="requestedPosition">The position where the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/> wants to place the segment it is moving.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.QuerySegmentDragEventArgs.RequestedPosition">
            <summary>
            Gets the position where the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/> wants to place the <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> it is moving.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.QuerySegmentDragEventArgs.DesiredPosition">
            <summary>
            Gets or sets the position that the <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> is allowed to be placed.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.SegmentMoved"/> event of a
            <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs.#ctor(Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs"/> class.
            The <see cref="P:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs.DeltaMovement"/> property is set to be 0.0.
            </summary>
            <param name="segment">The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> that was modified.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs.#ctor(Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs"/> class and sets the <see cref="P:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs.DeltaMovement"/>
            property to be the given deltaMovement value.
            </summary>
            <param name="segment">The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> that was modified.</param>
            <param name="deltaMovement">The distance moved by the segment.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs.DeltaMovement">
            <summary>
            Gets the distance moved by the segment that raised the <see cref="F:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb.SegmentMovedEvent"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SegmentMovedEventArgs.Segment">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> that was moved by the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionSegmentThumb"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionState">
            <summary>
            A standard implementation of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/> that can store property values
            of the properties found in the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> interface.
            This <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionState"/> will store the following property values of the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>:
            Data, FromConnectionPoint, ToConnectionPoint, Segments, IsUserModified, and ConnectionPoints.
            Note that a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionState"/> clones the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects in
            the Segments property, but all other property values are stored by refference.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState">
            <summary>
            Represents a state of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>. Implementations of this interface will
            hold the values of the properties of an instance of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> implementation.
            </summary>
            <remarks>This interface is used primarily for Undo support.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState.Apply(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Applies all the property values held by this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/> to the given
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
            <param name="connection">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that will have its properties set to match those held by this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/>.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState.Data">
            <summary>
            Gets the stored Data property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/>
            was made for.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionState.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionState"/> class.
            </summary>
            <param name="connection">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionState"/> copies the properties from.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionState.Apply(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Modifies the Data, FromConnectionPoint, ToConnectionPoint, Segments, IsUserModified, and ConnectionPoints properties of the
            given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to match the property values stored by this <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionState"/>.
            Note that because Data is a readonly property on <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>, this method can not set it, and
            so if neccessary, the IDiagramConnection.SetAs method should be responsible for this.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that will have its properties modified by this <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionState"/>.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionState.Data">
            <summary>
            Gets the data associated with this state of the connection.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ArithmeticConverter">
            <summary>
            Converts a number by multiplying it by a factor and adding an offset.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ArithmeticConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ArithmeticConverter"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ArithmeticConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the result of multiplying and adding the given number by the Factor and Offset properties respectivly.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The result of multiplying and adding the given number with the Factor and Offset properties.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ArithmeticConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ArithmeticConverter.Factor">
            <summary>
            Gets or sets the factor to multiply with the number. The default is 1.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ArithmeticConverter.Offset">
            <summary>
            Gets or sets the offset to add to the number. The default is 0.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ArithmeticConverter.Minimum">
            <summary>
            Gets or sets the minimum return value. The default is Double.MinValue.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ArrowheadToPathGeometryConverter">
            <summary>
            Creates a <see cref="T:System.Windows.Media.PathGeometry"/> for an <see cref="T:Mindscape.WpfDiagramming.Foundation.Arrowhead"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ArrowheadToPathGeometryConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a <see cref="T:System.Windows.Media.PathGeometry"/> for the given <see cref="T:Mindscape.WpfDiagramming.Foundation.Arrowhead"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A <see cref="T:System.Windows.Media.PathGeometry"/> for the given <see cref="T:Mindscape.WpfDiagramming.Foundation.Arrowhead"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ArrowheadToPathGeometryConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionContentTransformConverter">
            <summary>
            Creates a TranslateTransform for positioning connection content.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionContentTransformConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a <see cref="T:System.Windows.Media.TranslateTransform"/> that can be used to position the content of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
            <param name="values">The values produced by the binding source.  The converter expects four values: the position
            of the 'from' connection point, the edge on which the 'from' connection point appears, the width of the content
            and the height of the content.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The <see cref="T:System.Windows.Media.TranslateTransform"/> for the connection content.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionContentTransformConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramToolBoxFilterListConverter">
            <summary>
            Adds a separator to the diagram tool box filter list.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramToolBoxFilterListConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Adds a separator to the diagram tool box filter list.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The diagram tool box filter list with a separator added after the first item.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramToolBoxFilterListConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DoubleToBooleanConverter">
            <summary>
            Converts a double into a boolean based on minimum and maximum constraints.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DoubleToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns true if the value is inclusively between the minimum and maximum values.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>True if the value is inclusively between the minimum and maximum values. False otherwise.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DoubleToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DoubleToBooleanConverter.Minimum">
            <summary>
            Gets or sets the minimum value required to return true. The default is Double.MinValue.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DoubleToBooleanConverter.Maximum">
            <summary>
            Gets or sets the maximum value required to return true. The default is Double.MaxValue.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DoubleToScaleTransformConverter">
            <summary>
            Converts a double value into a <see cref="T:System.Windows.Media.ScaleTransform"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DoubleToScaleTransformConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the given number into a <see cref="T:System.Windows.Media.ScaleTransform"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A <see cref="T:System.Windows.Media.ScaleTransform"/> that uses the given number for the ScaleX and ScaleY values.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DoubleToScaleTransformConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SegmentsToConnectionContentTransformConverter">
            <summary>
            Creates a TranslateTransform for positioning connection content.
            This is similar to the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionContentTransformConverter"/>, but uses the list of connection segments rather than the connection point position.
            This is more reliable in nested node scenarios.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SegmentsToConnectionContentTransformConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a <see cref="T:System.Windows.Media.TranslateTransform"/> that can be used to position the content of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
            <param name="values">The values produced by the binding source.  The converter expects four values: the list of connection segments,
            the edge on which the 'from' connection point appears, the width of the content
            and the height of the content.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The <see cref="T:System.Windows.Media.TranslateTransform"/> for the connection content.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SegmentsToConnectionContentTransformConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SegmentsToTransformConverter">
            <summary>
            Uses diagram connection segments to calculate a render transform for arrow heads and connection relocator thumbs.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SegmentsToTransformConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a transform for positioning and rotating arrowheads and connection relocator thumbs.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The transform for positioning and rotating arrowheads and connection relocator thumbs.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SegmentsToTransformConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SegmentsToTransformConverter.ConnectionEnd">
            <summary>
            Gets or sets the end of the connection that the trnaform will be calculated for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SegmentsToTransformConverter.IncludeRotation">
            <summary>
            Gets or sets if the render transform should include rotation information.
            This is useful for setting the rendertransform of arrow heads.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ThicknessToDoubleConverter">
            <summary>
            Converts a <see cref="T:System.Windows.Thickness"/> to a double by returning the Thickness.Top property value.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ThicknessToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.Windows.Thickness"/> to a double by returning the Thickness.Top property value.
            </summary>
            <param name="value">The <see cref="T:System.Windows.Thickness"/> value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The Thickness.Top property value of the given <see cref="T:System.Windows.Thickness"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ThicknessToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.PointToTranslateTransformConverter">
            <summary>
            Converts a <see cref="T:System.Windows.Point"/> into a <see cref="T:System.Windows.Media.TranslateTransform"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.PointToTranslateTransformConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the given <see cref="T:System.Windows.Point"/> into a <see cref="T:System.Windows.Media.TranslateTransform"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A <see cref="T:System.Windows.Media.TranslateTransform"/> derived from the given <see cref="T:System.Windows.Point"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.PointToTranslateTransformConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverter">
            <summary>
            Converts a <see cref="T:System.Windows.Rect"/> to a number based on the width or height of the <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverter"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a number based on the width or height of the <see cref="T:System.Windows.Rect"/> object and the Factor property.
            </summary>
            <param name="value">The Rect value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The calculated number.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverter.Factor">
            <summary>
            Gets or sets the value that is multiplied to the calculated width value before it is returned
            in the Convert method.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverter.ConverterType">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverterType"/> which specifies which conversion calculation
            to use.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverterType">
            <summary>
            Specifies the calculation that a <see cref="T:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverter"/> should use to convert
            a <see cref="T:System.Windows.Rect"/> to a number.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverterType.Width">
            <summary>
            The width of the <see cref="T:System.Windows.Rect"/> is used.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverterType.Height">
            <summary>
            The height of the <see cref="T:System.Windows.Rect"/> is used.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.RectToDoubleConverterType.Maximum">
            <summary>
            Either the width or height of the <see cref="T:System.Windows.Rect"/> is used depending on which is largest.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.RectToPointConverter">
            <summary>
            Calculates the position of a <see cref="T:System.Windows.Point"/> on a rectangle, relative to the top left of the rectangle.
            </summary>
            <remarks>This converter is typically used for scaling non-rectangular paths to fit a node.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calculates the position of a <see cref="T:System.Windows.Point"/> on the input <see cref="T:System.Windows.Rect"/>.
            The point's X coordinate is the <see cref="P:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.XFactor"/> fraction of the width, plus
            any <see cref="P:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.XOffset"/>; the point's Y coordinate is the <see cref="P:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.YFactor"/> fraction
            of the height, plus any <see cref="P:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.YOffset"/>.
            </summary>
            <param name="value">The Rect value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A Point representing a position relative to the top left of the Rect.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.XFactor">
            <summary>
            Gets or sets how far across the <see cref="T:System.Windows.Rect"/> the point is in the X direction, as a fraction
            of the width.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.YFactor">
            <summary>
            Gets or sets how far across the <see cref="T:System.Windows.Rect"/> the point is in the Y direction, as a fraction
            of the height.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.XOffset">
            <summary>
            Gets or sets an amount which is added to the X coordinate of the point.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToPointConverter.YOffset">
            <summary>
            Gets or sets an amount which is added to the Y coordinate of the point.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointXCoordinateConverter">
            <summary>
            Determines an X coordinate from a connection point and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionPointXCoordinateConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines an X coordinate from a connection point and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.
            </summary>
            <param name="values">The values produced by the binding sources.  The converter expects two
            values: an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The X coordinate of the connection point position.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionPointXCoordinateConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to multiple binding sources.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointYCoordinateConverter">
            <summary>
            Determines a Y coordinate from a connection point and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionPointYCoordinateConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines a Y coordinate from a connection point and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.
            </summary>
            <param name="values">The values produced by the binding sources.  The converter expects two
            values: an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The Y coordinate of the connection point position.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionPointYCoordinateConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to multiple binding sources.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointPositionConverter">
            <summary>
            Determines a position from a connection point and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionPointPositionConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines a position from a connection point and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.
            </summary>
            <param name="values">The values produced by the binding sources.  The converter expects two
            values: an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> and an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A <see cref="T:System.Windows.Point"/> position.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionPointPositionConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb">
            <summary>
            <para>
            Enables and manages relocation of either end of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>
            and the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> that graphically represents it.
            That is, this thumb modifies either the <see cref="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.ToConnectionPoint"/>
            or the <see cref="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.FromConnectionPoint"/> properties of the connection that this
            thumb is assigned to.
            </para>
            <para>
            The position of the end of the connection being relocated is dynamically changed as the mouse is dragged
            allowing for a rubberbanding effect.
            This thumb can relocate either the 'to' or 'from' connection point to another connection point
            mounted on either an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> or an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that the mouse
            is over when released. If the mouse is released over nothing, then the connection being relocated is put
            back to its original connection points.
            </para>
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.ConnectionRelocatedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.ConnectionRelocated"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.ConnectionElementProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.ConnectionElement"/> property.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.ConnectionRelocated">
            <summary>
            Occurs whenever the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb"/> is dragging the end of a connection around.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.ConnectionElement">
            <summary>
            Gets or sets the ConnectionElement.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.ConnectionElementProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.MovingEnd">
            <summary>
            Gets or sets which end of the connection is being moved by this <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb"/>.
            </summary>
            <remarks>Changing this property while the thumb is being dragged results in an <see cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatedEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb.ConnectionRelocated"/>
            event of a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatedEventArgs.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatedEventArgs"/> class.
            </summary>
            <param name="position">The current position of the end of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> that is being moved.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatedEventArgs.Position">
            <summary>
            Gets the current position of the end of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> that is being relocated.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.MarginConverter">
            <summary>
            An <see cref="T:System.Windows.Data.IValueConverter"/> that uses the LeftFactor, RightFactor, TopFactor, and BottomFactor properties
            to create a <see cref="T:System.Windows.Thickness"/> object. The factor properties are multiplied by the width and height values
            of a given <see cref="T:System.Windows.Rect"/> to calculate the values of the created <see cref="T:System.Windows.Thickness"/> values.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MarginConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding source for use by a binding target.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A value suitable for use by the binding target.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MarginConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MarginConverter.TopFactor">
            <summary>
            A value typically between 0-1 which is multiplied by the height of a <see cref="T:System.Windows.Rect"/> given
            to the Convert method in order to calculate the top value of the created <see cref="T:System.Windows.Thickness"/> object.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MarginConverter.RightFactor">
            <summary>
            A value typically between 0-1 which is multiplied by the width of a <see cref="T:System.Windows.Rect"/> given
            to the convert method in order to calculate the right value of the created <see cref="T:System.Windows.Thickness"/> object.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MarginConverter.BottomFactor">
            <summary>
            A value typically between 0-1 which is multiplied by the height of a <see cref="T:System.Windows.Rect"/> given
            to the Convert method in order to calculate the bottom value of the created <see cref="T:System.Windows.Thickness"/> object.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MarginConverter.LeftFactor">
            <summary>
            A value typically between 0-1 which is multiplied by the width of a <see cref="T:System.Windows.Rect"/> given
            to the Convert method in order to calculate the left value of the created <see cref="T:System.Windows.Thickness"/> object.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter">
            <summary>
            Obtains the size of a <see cref="T:System.Windows.Rect"/>, optionally applying scaling and/or fixed offsets.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Obtains the size of the given <see cref="T:System.Windows.Rect"/> object, after applying the
            <see cref="P:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.WidthFactor"/> and <see cref="P:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.HeightFactor"/> as scale factors and adding
            the <see cref="P:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.WidthOffset"/> and <see cref="P:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.HeightOffset"/>.
            property values.
            </summary>
            <param name="value">The <see cref="T:System.Windows.Rect"/> value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The scaled and adjusted size of the input Rect.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.WidthFactor">
            <summary>
            Gets or sets a scale factor that is applied to the width of the <see cref="T:System.Windows.Rect"/>.
            The default factor is 1.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.HeightFactor">
            <summary>
            Gets or sets a scale factor that is applied to the height of the <see cref="T:System.Windows.Rect"/>.
            The default factor is 1.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.WidthOffset">
            <summary>
            Gets or sets an amount that is added to the (scaled) width of the <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RectToSizeConverter.HeightOffset">
            <summary>
            Gets or sets an amount that is added to the (scaled) height of the <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.RotationToSizeThumbCursorConverter">
            <summary>
            Converts node rotation into the mouse cursor that should be used by a <see cref="T:Mindscape.WpfDiagramming.Foundation.SizeThumb"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RotationToSizeThumbCursorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Return the mouse cursor that a <see cref="T:Mindscape.WpfDiagramming.Foundation.SizeThumb"/> should use based on the rotation of the node.
            </summary>
            <param name="value">The rotation of the node.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The mouse cursor that the <see cref="T:Mindscape.WpfDiagramming.Foundation.SizeThumb"/> uses if the rotation is 0.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The mouse cursor that the <see cref="T:Mindscape.WpfDiagramming.Foundation.SizeThumb"/> should use.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RotationToSizeThumbCursorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ScrollBarMaximumConverter">
            <summary>
            Derives a scroll bar maximum from a maximum value, viewport dimension and zoom factor.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ScrollBarMaximumConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Derives a scroll bar maximum from a maximum value, viewport dimension and zoom factor.
            </summary>
            <param name="values">The scroll area settings and zoom factor.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The viewport size.</returns>
            <remarks>
            <para>The values are expected to be as follows:</para>
            <para>1. The maximum value.</para>
            <para>2. The viewport element size.</para>
            <para>3. The zoom factor.</para>
            </remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ScrollBarMaximumConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to multiple binding sources.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ScrollBarMaximumConverter.UnusableDimension">
            <summary>
            Gets or sets an unusable dimension to be compensated for.  This should be set
            to the size of the other scroll bar in the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ScrollBarViewportSizeConverter">
            <summary>
            Derives a viewport size from a dimension and zoom factor.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ScrollBarViewportSizeConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Derives a viewport size from a dimension and zoom factor.
            </summary>
            <param name="values">The dimension and zoom factor.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The viewport size.</returns>
            <remarks>
            <para>The values are expected to be as follows:</para>
            <para>1. The dimension.</para>
            <para>2. The zoom factor.</para>
            </remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ScrollBarViewportSizeConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to multiple binding sources.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SegmentsToAngleConverter">
            <summary>
            Uses diagram connection segments to calculate an angle for an <see cref="T:Mindscape.WpfDiagramming.Foundation.Arrowhead"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SegmentsToAngleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the angle for an <see cref="T:Mindscape.WpfDiagramming.Foundation.Arrowhead"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The calculated angle.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SegmentsToAngleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SegmentsToAngleConverter.ConnectionEnd">
            <summary>
            Gets or sets the end of the connection that the angle will be calculated for.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SizeToFitConverter">
            <summary>
            Derives a <see cref="T:System.Windows.Media.ScaleTransform"/> sizing a diagram to fit
            the available size.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SizeToFitConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a diagram size and available size to a zoom factor.
            </summary>
            <param name="values">The diagram size and target size.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A zoom factor which fits the diagram into the available space.</returns>
            <remarks>
            <para>The values are expected to be as follows:</para>
            <para>1. The diagram size.</para>
            <para>2. A <see cref="T:System.Windows.Thickness"/> buffer around the diagram bounds.</para>
            <para>3. The horizontal available size.</para>
            <para>4. The vertical available size.</para>
            </remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SizeToFitConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SnapLineDrawingConverter">
            <summary>
            Derives a snap line background drawing from <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> settings.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SnapLineDrawingConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Derives a snap line background drawing from <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> settings.
            </summary>
            <param name="values">The DiagramSurface settings.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A <see cref="T:System.Windows.Media.DrawingBrush"/> suitable for use as a background.</returns>
            <remarks>
            <para>The values are expected to be as follows:</para>
            <para>1. The <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.HorizontalSnapSpecifier"/>.</para>
            <para>2. The <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.HorizontalSnapSpecifier"/>.</para>
            <para>3. The <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.Zoom"/>.</para>
            <para>4. The <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.ZoomMode"/>.</para>
            <para>5. The <see cref="P:System.Windows.FrameworkElement.ActualWidth"/>.</para>
            <para>6. The <see cref="P:System.Windows.FrameworkElement.ActualHeight"/>.</para>
            <para>7. The current horizontal scroll offset.</para>
            <para>8. The current vertical scroll offset.</para>
            <para>9. The <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.SnapLineDrawing"/>.</para>
            <para>10. The current <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.Extent"/>.</para>
            </remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SnapLineDrawingConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs">
            <summary>
            Holds information about the <see cref="E:Mindscape.WpfDiagramming.Foundation.INotifyCustomPropertyChanged.CustomPropertyChanged"/> event.
            This information tells the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> if it should change the dirty-bit or take a snapshot
            for undoing purposes.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs"/> class.
            Both the <see cref="P:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs.ModifyDirtyBit"/> and the <see cref="P:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs.TakeSnapshot"/> properties will be
            set to true;
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs"/> class.
            The <see cref="P:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs.ModifyDirtyBit"/> and <see cref="P:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs.TakeSnapshot"/> properties will be set to be the
            given values.
            </summary>
            <param name="modifyDirtyBit">Whether or not the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> should set the dirty-bit to true.</param>
            <param name="takeSnapshot">Whether or a snapshot should be taken for undo purposes.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs.ModifyDirtyBit">
            <summary>
            Gets whether or not the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> should set the dirty-bit to true.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CustomPropertyChangedEventArgs.TakeSnapshot">
            <summary>
            Gets whether or not the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> should take a snapshot.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramBitmapRenderer">
            <summary>
            Renders a diagram as a bitmap.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramBitmapRenderer.Png">
            <summary>
            Renders a diagram using the PNG bitmap format.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramBitmapRenderer.Bmp">
            <summary>
            Renders a diagram using the BMP bitmap format.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramBitmapRenderer.Jpeg">
            <summary>
            Renders a diagram using the JPEG bitmap format.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramBitmapRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramBitmapRenderer"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramBitmapRenderer.Render(Mindscape.WpfDiagramming.DiagramSurface,System.String)">
            <summary>
            Renders a diagram as a bitmap to a file.
            </summary>
            <param name="diagram">The diagram to be rendered.</param>
            <param name="path">The file into which to write the bitmap data.</param>
            <remarks>If the file exists, it is overwritten.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramBitmapRenderer.Render(Mindscape.WpfDiagramming.DiagramSurface,System.IO.Stream)">
            <summary>
            Renders a diagram as a bitmap to a stream.
            </summary>
            <param name="surface">The diagram to be rendered.</param>
            <param name="stream">The stream into which to write the bitmap data.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramBitmapRenderer.PixelFormat">
            <summary>
            Gets the <see cref="P:Mindscape.WpfDiagramming.DiagramBitmapRenderer.PixelFormat"/> of the rendered bitmap.
            The default is <see cref="P:System.Windows.Media.PixelFormats.Pbgra32"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramBitmapRenderer.BitmapEncoder">
            <summary>
            When overridden in a derived class, gets the <see cref="P:Mindscape.WpfDiagramming.DiagramBitmapRenderer.BitmapEncoder"/>
            used to encode the rendered bitmap.
            </summary>
            <returns>A BitmapEncoder to encode the rendered bitmap.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramCommands">
            <summary>
            Provides a standard set of diagram-related commands.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.BringToFrontCommand">
            <summary>
            Gets the value that represents the Bring to Front command.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.SendToBackCommand">
            <summary>
            Gets the value that represents the Send to Back command.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.BringForwardCommand">
            <summary>
            Gets the value that represents the Bring Forward command.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.SendBackwardCommand">
            <summary>
            Gets the value that represents the Send Backward command.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.AlignLeft">
            <summary>
            A command for aligning diagram nodes along their left edge.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.AlignCenter">
            <summary>
            A command for aligning diagram nodes along a vertical line.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.AlignRight">
            <summary>
            A command for aligning diagram nodes along their right edge.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.AlignTop">
            <summary>
            A command for aligning diagram nodes along their top edge.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.AlignMiddle">
            <summary>
            A command for aligning diagram nodes along a horizontal line.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.AlignBottom">
            <summary>
            A command for aligning diagram nodes along their bottom edge.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.DistributeHorizontally">
            <summary>
            A command for distibuting an equal horizontal space between selected nodes.
            The left most node and right most node do not move.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.DistributeVertically">
            <summary>
            A command for distributing an equal vertical space between selected nodes.
            The top most and bottom most nodes do not move.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramCommands.SizeToFit">
            <summary>
            A command for automatically zooming and panning the diagram in a way that fits the diagram to the size of the DiagramSurface.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramPrintDocument">
            <summary>
            Contains information used when printing a diagram.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramPrintDocument.Document">
            <summary>
            A <see cref="T:System.Windows.Documents.FixedDocument"/> suitable for printing.
            </summary>
            <remarks>The page order within the document is left to right,
            top to bottom.  For example, if the diagram requires 3 pages horizontally
            and 2 pages vertically, then page 1 is the top left, page 3 the top right,
            page 4 the bottom left, and page 6 the bottom right.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramPrintDocument.PageCountHorizontal">
            <summary>
            The number of pages occupied horizontally by the diagram.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramPrintDocument.PageCountVertical">
            <summary>
            The number of pages occupied vertically by the diagram.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramPrinter">
            <summary>
            Provides support for printing diagrams.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramPrinter.DiagramProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramPrinter.Diagram"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramPrinter.FormatterProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramPrinter.Formatter"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramPrinter.ZoomProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramPrinter.Zoom"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramPrinter.PrintCallbackProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramPrinter.PrintCallback"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramPrinter.GetPrintDocument(System.Printing.PrintDocumentImageableArea)">
            <summary>
            Gets a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramPrintDocument"/> sized to the specified <see cref="T:System.Printing.PrintDocumentImageableArea"/>.
            </summary>
            <param name="imageableArea">The imageable area of the print target.</param>
            <returns>A DiagramPrintDocument sized to the specified imageable area.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramPrinter.GetPrintDocument(System.Windows.Size,System.Windows.Point,System.Windows.Size)">
            <summary>
            Gets a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramPrintDocument"/> sized to the specified printing dimensions.
            </summary>
            <param name="pageSize">The total page size.</param>
            <param name="printableOrigin">The top left of the printable area.</param>
            <param name="printableSize">The size of the printable area.</param>
            <returns>A DiagramPrintDocument sized to the specified dimensions.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramPrinter.Diagram">
            <summary>
            Gets or sets the diagram to be printed.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramPrinter.DiagramProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramPrinter.Formatter">
            <summary>
            Gets or sets formatting and display settings for the diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramPrinter.FormatterProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramPrinter.Zoom">
            <summary>
            Gets or sets the zoom level.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramPrinter.ZoomProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramPrinter.PrintCallback">
            <summary>
            Gets or sets the callback for additional printing.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramPrinter.PrintCallbackProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter">
            <summary>
            Displays the content of a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/> control.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions the single child element and determines the content of a
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter"/>.
            </summary>
            <param name="arrangeSize">The size that this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter"/>
            should use to arrange its child element.</param>
            <returns>The actual size needed by the element.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.GetLayoutClip(System.Windows.Size)">
            <summary>
            Returns a geometry for a clipping mask. The mask applies if the layout system 
            attempts to arrange an element that is larger than the available display space.
            </summary>
            <param name="layoutSlotSize">The size of the part of the element that does visual presentation.</param>
            <returns>The clipping geometry.</returns>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.HorizontalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.HorizontalOffset"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.VerticalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.VerticalOffset"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset (scroll position).
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.HorizontalOffsetProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.VerticalOffset">
            <summary>
            Gets or sets the vertical offset (scroll position).
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollContentPresenter.VerticalOffsetProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer">
            <summary>
            Represents a scrollable area that can contain a diagram.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.OnApplyTemplate">
            <summary>
            Called by the framework when a template is applied to the control.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ExtentProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.Extent"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ZoomProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.Zoom"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ContentProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.Content"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ExtraSpaceProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ExtraSpace"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.MinimumExtraSpaceProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.MinimumExtraSpace"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.AllowInfiniteScrollingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.AllowInfiniteScrolling"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.HorizontalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.HorizontalOffset"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.VerticalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.VerticalOffset"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ZoomModeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ZoomMode"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Called whenever the rendering size of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/> changes.
            </summary>
            <param name="sizeInfo">Information about the change in render size.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.SizeToFit">
            <summary>
            Adjusts the zoom values and the viewport to center the whole diagram into the viewport area.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.EffectiveZoomProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.EffectiveZoom"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.DiagramSurfaceProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.DiagramSurface"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.SetViewport(System.Windows.Rect)">
            <summary>
            Sets the viewport (the part of the scroll region which is visible).
            </summary>
            <param name="viewport">The desired viewport (in content coordinates).</param>
            <remarks>In order to preserve the aspect ratio of the content, the displayed viewport
            may be larger than the requested viewport.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.TranslateViewport(System.Double,System.Double)">
            <summary>
            Moves the viewport by the given x and y movement values. Changes the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ExtraSpace"/> property to allow for
            infinite viewport panning.
            </summary>
            <param name="deltaX">The distance to move the viewport horizontally.</param>
            <param name="deltaY">The distance to move the viewport vertically.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.GetViewport">
            <summary>
            Gets the viewport (the part of the scroll region which is visible).
            </summary>
            <returns>The current viewport (in content coordinates).</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.Extent">
            <summary>
            Gets the content extent.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ExtraSpaceProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>AffectsArrange, AffectsMeasure</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.Zoom">
            <summary>
            Gets or sets the zoom.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ZoomProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.Content">
            <summary>
            Gets or sets the content.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ContentProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ExtraSpace">
            <summary>
            Gets the extra space around the content.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ExtraSpaceProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>AffectsMeasure</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.MinimumExtraSpace">
            <summary>
            Gets or sets the minimum extra space around the content (used for infinite scrolling).
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.MinimumExtraSpaceProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>AffectsMeasure</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.AllowInfiniteScrolling">
            <summary>
            Gets or sets whether or not the scroll bars can be scrolled indefinitely. The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.AllowInfiniteScrollingProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.HorizontalOffset">
            <summary>
            Gets the horizontal offset.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.HorizontalOffsetProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.VerticalOffset">
            <summary>
            Gets the vertical offset.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.VerticalOffsetProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ZoomMode">
            <summary>
            Gets or sets built-in zooming behavior.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ZoomModeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.EffectiveZoom">
            <summary>
            Gets the effective zoom.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.EffectiveZoomProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.DiagramSurface">
            <summary>
            Gets or sets the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.DiagramSurface"/> for which this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/>
            provides scrolling functionality.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.DiagramSurfaceProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.ViewportChanged">
            <summary>
            Raised when the view port of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/> changes.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramState">
            <summary>
            Represents a cloned state of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramState.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Creates a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramState"/> class.
            The created <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramState"/> will represent a clone of the diagram
            within the given <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramState"/> holds a snapshot of.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramState.Apply(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Applies this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramState"/> to the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramState"/> is applied to.</param>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramStructureException">
            <summary>
            The exception that is thrown when a diagram has an invalid structure.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramStructureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramStructureException"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramStructureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramStructureException"/> class with
            the specified message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramStructureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramStructureException"/> class with
            the specified message and inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramStructureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramStructureException"/> class with
            serialized data.
            </summary>
            <param name="info">The serialized data.</param>
            <param name="context">Describes the source or destination of the serialized data.</param>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramSurfaceDragAction">
            <summary>
            Determines the behaviour of clicking and then dragging the mouse over a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramSurfaceDragAction.Select">
            <summary>
            Enables marquee drag select on a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramSurfaceDragAction.Pan">
            <summary>
            Enables dragging the viewport of a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramToolBox">
            <summary>
            Displays diagram tools and provides various filtering options.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramToolBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramToolBox"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramToolBox.FilterLabelProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramToolBox.FilterLabel"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramToolBox.FilterListProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramToolBox.FilterList"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramToolBox.FilterMenuStyleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramToolBox.FilterMenuStyle"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramToolBox.FilterLabel">
            <summary>
            Gets a string describing the currently selected filter option.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramToolBox.FilterLabelProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramToolBox.FilterList">
            <summary>
            Gets the available filters for this <see cref="T:Mindscape.WpfDiagramming.DiagramToolBox"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramToolBox.FilterListProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramToolBox.FilterMenuStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style"/> applied to the filter menu.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramToolBox.FilterMenuStyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramToolBox.Groups">
            <summary>
            Gets the collection of <see cref="T:Mindscape.WpfDiagramming.DiagramToolBoxGroup"/> objects displayed in this <see cref="T:Mindscape.WpfDiagramming.DiagramToolBox"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramToolBoxFilterItem">
            <summary>
            Represents a filter option for a <see cref="T:Mindscape.WpfDiagramming.DiagramToolBox"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ViewModelBase">
            <summary>
            Provides common observability support for view model classes.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ViewModelBase.Set``1(``0@,``0,System.String)">
            <summary>
            Sets the value of a field, raising the <see cref="E:Mindscape.WpfDiagramming.Foundation.ViewModelBase.PropertyChanged"/> event if required.
            </summary>
            <typeparam name="T">The data type of the field.</typeparam>
            <param name="field">The field to be set.</param>
            <param name="value">The value to which to set the field.</param>
            <param name="propertyName">The name of the property for which to raise a change
            notification.</param>
            <remarks>Derived types can use this method to implement property setters.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Mindscape.WpfDiagramming.Foundation.ViewModelBase.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property whose value has changed.</param>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.ViewModelBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramToolBoxFilterItem.Name">
            <summary>
            Gets the name of the filter item.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramToolBoxFilterItem.IsSelected">
            <summary>
            Gets or sets whether or not this filter item is selected.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramToolBoxGroup">
            <summary>
            Groups together a collection of related diagram tools.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramToolBoxGroup.IsExpandedProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramToolBoxGroup.IsExpanded"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramToolBoxGroup.HeaderContainerStyleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramToolBoxGroup.HeaderContainerStyle"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramToolBoxGroup.IsDragResizeEnabledProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramToolBoxGroup.IsDragResizeEnabled"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramToolBoxGroup.IsExpanded">
            <summary>
            Gets or sets whether or not this <see cref="T:Mindscape.WpfDiagramming.DiagramToolBoxGroup"/> is expanded.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramToolBoxGroup.IsExpandedProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramToolBoxGroup.HeaderContainerStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style"/> applied to the group header.
            The group header is a ToggleButton.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramToolBoxGroup.HeaderContainerStyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramToolBoxGroup.IsDragResizeEnabled">
            <summary>
            Gets or sets whether the <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/> objects within this <see cref="T:Mindscape.WpfDiagramming.DiagramToolBoxGroup"/> supports the drag resize feature.
            Drag resizing can be achieved by doing a single mouse click on a node tool, and then pressing and dragging the mouse on the diagram surface.
            The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramToolBoxGroup.IsDragResizeEnabledProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Edge">
            <summary>
            Identifies the edge of an element.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Edge.Top">
            <summary>
            The top edge.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Edge.Right">
            <summary>
            The right edge.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Edge.Bottom">
            <summary>
            The bottom edge.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Edge.Left">
            <summary>
            The left edge.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.EdgeHelper">
            <summary>
            Provides utility methods for working with <see cref="T:Mindscape.WpfDiagramming.Edge"/> values.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.EdgeHelper.IsAdjacent(Mindscape.WpfDiagramming.Edge,Mindscape.WpfDiagramming.Edge)">
            <summary>
            Returns true if the two given Edges are adjacent to each other (in any direction), returns false otherwise.
            </summary>
            <param name="edge1">One of the edges to check for adjacency.</param>
            <param name="edge2">One of the edges to check for adjacency.</param>
            <returns>Whether or not the two given edges are adjacent to each other (in any direction).</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.EdgeHelper.IsOpposite(Mindscape.WpfDiagramming.Edge,Mindscape.WpfDiagramming.Edge)">
            <summary>
            Returns true if the given two edges are opposite to each other. Returns false otherwise.
            </summary>
            <param name="edge1">One of the Edges to check for oppositness.</param>
            <param name="edge2">One of the Edges to check for oppositness.</param>
            <returns>Whether or not the two given edges are opposite to eacj other.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.EdgeHelper.OppositeOf(Mindscape.WpfDiagramming.Edge)">
            <summary>
            Returns the Edge that is opposite to the given Edge.
            </summary>
            <param name="edge">The Edge to find the opposite Edge of.</param>
            <returns>The opposite Edge of the given Edge.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint">
            <summary>
            This class is part of the WPF Diagramming infrastructure to support dragging the ends of
            connections, and is not intended to be used in your own code.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint">
            <summary>
            Represents a point on an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable"/> where a
            connection can be attached.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.AddConnection(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Attaches the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to attach.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.RemoveConnection(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Removes the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> from this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to remove.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.SetPosition(System.Windows.Point,System.Double)">
            <summary>
            Sets the position of this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> to be a point on the connection that it is attached to
            that is closest to the given <see cref="T:System.Windows.Point"/>. The actual position that was set is then returned.
            </summary>
            <param name="point">A Point that the position of this IDiagramConnectionPoint is derived from.</param>
            <param name="buffer">Some distance at each end of the accepting connection where this connection point can not connect to.</param>
            <returns>The actual resulting position of this IDiagramConnectionPoint.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.Connectable">
            <summary>
            Gets the connectable object on which the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> is located.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.Connections">
            <summary>
            Gets a collection of connections attached to this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.Data">
            <summary>
            Gets a data object held by this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.Position">
            <summary>
            Gets the position at which to render <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>
            objects as starting or finishing.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.PositionChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.Position"/> property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.PositionCalculator">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>
            Can use for calculating its position.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.Edge">
            <summary>
            Gets the <see cref="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.Edge"/> of an object that this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> logically
            sits on. This is used to determine how an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> approches this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.Index">
            <summary>
            Gets an index identifier for this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>. This is useful for selecting
            a connection point calculator when there are multiple connection points on the same edge of a node.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.IndexChanged">
            <summary>
            Raised when the Index property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.FlowDirection">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirection"/> of this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> which
            states whether this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> is designed to receive connections,
            or originate them.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.CanOriginateNewConnections">
            <summary>
            Gets whether new connections may be created beginning at this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint.CanReceiveNewConnections">
            <summary>
            Gets whether new connections may be created ending at this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.#ctor(System.Windows.Point)">
            <summary>
            Creates an instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint"/> class.
            </summary>
            <param name="position">The position of this connection point.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#SetPosition(System.Windows.Point,System.Double)">
            <summary>
            Throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="point">A point used to derive the position.</param>
            <param name="buffer">The connection end buffer.</param>
            <returns>Throws <see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Instance">
            <summary>
            Gets the currently used instance of <see cref="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint"/>.
            This instance represents the connection point that is currently being relocated by the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocatorThumb"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#Data">
            <summary>
            Gets the data object held by this <see cref="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint"/>. This will always be null.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Position">
            <summary>
            Gets or sets the position of this connection point.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.PositionChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Position"/> property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#FlowDirection">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirection"/> of this <see cref="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint"/>.
            The direction of a floating connection point is always <see cref="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirection.Any"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#PositionCalculator">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> used by this <see cref="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint"/>
            to determine which direction the attached connection should be facing.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Edge">
            <summary>
            Gets or sets the <see cref="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Edge"/> of this connection point. This is used to determine how a connection approches this connection point.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#Index">
            <summary>
            Returns 0.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.IndexChanged">
            <summary>
            Raised when the Index property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#CanOriginateNewConnections">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#CanReceiveNewConnections">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Node">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that the <see cref="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint"/> is attached
            to. This such node is just a place holder which is required by connection points. This property should not
            be set by something outside the <see cref="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint"/> class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#Connectable">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable"/> that the <see cref="T:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint"/> is attached to.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.Mindscape#WpfDiagramming#Foundation#IDiagramConnectionPoint#Connections">
            <summary>
            Returns an empty collection.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode">
            <summary>
            Represents a diagram model entity that should be made visible
            in the diagram as a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramPositionable">
            <summary>
            Represents an item which can be positioned in the diagram and the z-order
            (as opposed to acquiring its position and z-order from other items).
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramZOrderable">
            <summary>
            Represents an item in a diagram that can participate in Z-ordering.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramZOrderable.ZOrder">
            <summary>
            Gets or sets the relative z-order of the diagram item.  Lower z-orders appear
            behind higher z-orders.
            </summary>
            <remarks>This value represents the z-order of the item relative to its
            siblings.  It does not normally equate to the Panel.ZIndex of the element representing
            the item in the user interface.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramPositionable.Parent">
            <summary>
            Gets the parent of the diagram item, if the item is part of a hierarchy.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramPositionable.Bounds">
            <summary>
            Gets or sets the display location and size of the diagram item.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramPositionable.IsResizable">
            <summary>
            Gets or sets whether the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramPositionable"/> can be resized.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.IDiagramPositionable.BoundsChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.IDiagramPositionable.Bounds"/> property changes.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable">
            <summary>
            An object within an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that can have <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> objects
            attached to it.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable.GetCollisionBounds(Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Returns the rectangle that is taken into consideration when a connection path is being constructed to the given
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>. Generally, an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> should return its bounds, and an
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> should return a Rect with the position of the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>
            and a size of 0.
            </summary>
            <param name="connectionPoint">The connection point to which a connection is being constructed.</param>
            <returns>The collision bounds to be considered by the path routing algorithm.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable.Data">
            <summary>
            Gets the data represented by the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable"/>, such as
            a business object in the domain being diagrammed.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable.CanReceiveNewConnections">
            <summary>
            Gets whether any more connections can end at this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable"/> at all.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable.CanOriginateNewConnections">
            <summary>
            Gets whether any more connections can begin at this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable"/> at all.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable.DataChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable.Data"/> property changes.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramNode.Clone">
            <summary>
            Returns an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that holds current property values of this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>
            at the time this method is called.
            </summary>
            <returns>An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> representing the current state of this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramNode.SetAs(Mindscape.WpfDiagramming.Foundation.IDiagramNodeState)">
            <summary>
            Sets all the properties of this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> to match those of the
            given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>.
            </summary>
            <param name="state">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> to copy the properties from.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramNode.ConnectionPoints">
            <summary>
            Gets the points at which connections can attach to the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramNode.DefaultConnectionPoint">
            <summary>
            Gets the connection point to be used if a connection is attached to the
            node and no other connection point is specified.
            </summary>
            <remarks>Implementations may return null to indicate that a specific connection
            point must always be used when creating a connection.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramNode.Rotation">
            <summary>
            Gets or sets the rotation of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.IDiagramNode.RotationChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.IDiagramNode.Rotation"/> property changes.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.FakeNode.OnBoundsChanged">
            <summary>
            Raises the <see cref="E:Mindscape.WpfDiagramming.Foundation.FloatingConnectionPoint.FakeNode.BoundsChanged"/> event.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing">
            <summary>
            Draws snap lines by placing a dot at the intersections of snap lines.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ISnapLineDrawing">
            <summary>
            Draws snap lines on the diagram background.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ISnapLineDrawing.Draw(Mindscape.WpfDiagramming.Foundation.ISnapSpecifier,Mindscape.WpfDiagramming.Foundation.ISnapSpecifier,System.Windows.Rect,System.Double)">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Drawing"/> of the snap lines.
            </summary>
            <param name="horizontalSnap">Provides snap points along the x-axis.</param>
            <param name="verticalSnap">Provides snap points along the y-axis.</param>
            <param name="bounds">The bounds of the drawing required.</param>
            <param name="zoom">The zoom level.</param>
            <returns>A drawing of the snap lines.</returns>
            <remarks>Either of both of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier"/> parameters may be null, indicating
            that there are no snap points along this axis.</remarks>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.BrushProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.Brush"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.RadiusProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.Radius"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.Draw(Mindscape.WpfDiagramming.Foundation.ISnapSpecifier,Mindscape.WpfDiagramming.Foundation.ISnapSpecifier,System.Windows.Rect,System.Double)">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Drawing"/> of the snap lines.
            </summary>
            <param name="horizontalSnap">Provides snap points along the x-axis.</param>
            <param name="verticalSnap">Provides snap points along the y-axis.</param>
            <param name="bounds">The bounds of the drawing required.</param>
            <param name="zoom">The zoom level.</param>
            <returns>A drawing of the snap lines.</returns>
            <remarks>Either of both of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier"/> parameters may be null, indicating
            that there are no snap points along this axis.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.Brush">
            <summary>
            Gets or sets the brush used to draw the dots.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.BrushProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.Radius">
            <summary>
            Gets or sets the radius of the dots.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.IntersectionSnapLineDrawing.RadiusProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing">
            <summary>
            Draws snap lines as a set of grid lines with some of the lines having a different color.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.MainPenProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.MainPen"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.IntervalPenProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.IntervalPen"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.HorizontalIntervalProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.HorizontalInterval"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.VerticalIntervalProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.VerticalInterval"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.Draw(Mindscape.WpfDiagramming.Foundation.ISnapSpecifier,Mindscape.WpfDiagramming.Foundation.ISnapSpecifier,System.Windows.Rect,System.Double)">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Drawing"/> of the snap lines.
            </summary>
            <param name="horizontalSnap">Provides snap points along the x-axis.</param>
            <param name="verticalSnap">Provides snap points along the y-axis.</param>
            <param name="bounds">The bounds of the drawing required.</param>
            <param name="zoom">The zoom level.</param>
            <returns>A drawing of the snap lines.</returns>
            <remarks>Either of both of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier"/> parameters may be null, indicating
            that there are no snap points along this axis.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.MainPen">
            <summary>
            Gets or sets the pen used to draw the main grid lines.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.MainPenProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.IntervalPen">
            <summary>
            Gets or sets the pen used to draw the lines that are drawn every few snaplines appart
            as defined by the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.HorizontalInterval"/> and <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.VerticalInterval"/> properties.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.MainPenProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.HorizontalInterval">
            <summary>
            Gets or sets the interval between the vertical lines that are drawn with the pen in the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.IntervalPen"/> property.
            Every line drawn that is divisible by the interval value will be drawn with the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.IntervalPen"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.VerticalInterval">
            <summary>
            Gets or sets the interval between the horizontal lines that are drawn with the pen in the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.IntervalPen"/> property.
            Every line drawn that is divisible by the interval value will be drawn with the <see cref="P:Mindscape.WpfDiagramming.Foundation.IntervalLineSnapLineDrawing.IntervalPen"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.LineSnapLineDrawing">
            <summary>
            Draws snap lines as a set of grid lines.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.LineSnapLineDrawing.PenProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.LineSnapLineDrawing.Pen"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.LineSnapLineDrawing.Draw(Mindscape.WpfDiagramming.Foundation.ISnapSpecifier,Mindscape.WpfDiagramming.Foundation.ISnapSpecifier,System.Windows.Rect,System.Double)">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Drawing"/> of the snap lines.
            </summary>
            <param name="horizontalSnap">Provides snap points along the x-axis.</param>
            <param name="verticalSnap">Provides snap points along the y-axis.</param>
            <param name="bounds">The bounds of the drawing required.</param>
            <param name="zoom">The zoom level.</param>
            <returns>A drawing of the snap lines.</returns>
            <remarks>Either of both of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier"/> parameters may be null, indicating
            that there are no snap points along this axis.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.LineSnapLineDrawing.Pen">
            <summary>
            Gets or sets the pen used to draw the grid lines.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.LineSnapLineDrawing.PenProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.CommentNode">
            <summary>
            Displays a comment on the diagram.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramNode">
            <summary>
            Represents a node in a standard shape diagram.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1">
            <summary>
            Provides a base implementation for diagram nodes.
            </summary>
            <typeparam name="TConnectionPoint">The type of connection points that can be attached to this node.</typeparam>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.OnBoundsChanged">
            <summary>
            Raises the <see cref="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.BoundsChanged"/> event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Clone">
            <summary>
            Returns an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that represents the current state of this DiagramNodeBase
            at the time this method is called.
            </summary>
            <returns>An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that represents the current state of this DiagramNodeBase.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.SetAs(Mindscape.WpfDiagramming.Foundation.IDiagramNodeState)">
            <summary>
            Sets all the properties of this DiagramNodeBase to match those of the
            given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>.
            This method can be overriden to include the setting of other properties introduced by sub classes.
            </summary>
            <param name="state">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that will have its property values applied to this DiagramNodeBase.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.GetCollisionBounds(Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Returns the value of the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Bounds"/> property of this DiagramNodeBase.
            </summary>
            <param name="connectionPoint">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> to return the collision bounds of.</param>
            <returns>The value of the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Bounds"/> property.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.OnDataChanged">
            <summary>
            Raises the <see cref="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.DataChanged"/> event.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Data">
            <summary>
            Gets the data represented by the node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Bounds">
            <summary>
            Gets or sets the display location and size of the node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.IsResizable">
            <summary>
            Gets or sets whether the DiagramNodeBase can be resized.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.BoundsChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Bounds"/> property changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.ZOrder">
            <summary>
            Gets or sets the relative z-order.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1"/>.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.RotationChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Rotation"/> property changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.CanOriginateNewConnections">
            <summary>
            Returns true.
            DiagramNodeBase objects can accept any number of out going connections. This can be overriden to provide
            node specific logic.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.CanReceiveNewConnections">
            <summary>
            Returns true.
            DiagramNodeBase objects can accept any number of incomming connections. This can be overriden to provide
            node specific logic.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.DefaultConnectionPoint">
            <summary>
            Gets the connection point to be used if a connection is attached to the
            node and no other connection point is specified.
            </summary>
            <remarks>This implementation always returns null to indicate that a specific connection
            point must always be used when creating a connection.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Parent">
            <summary>
            Gets the parent of the DiagramNodeBase. This implementation returns null, but can be overriden.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.ConnectionPoints">
            <summary>
            Gets a collection of connection points attached to this node.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.DataChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeBase`1.Data"/> property changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNode.ConnectionPoints">
            <summary>
            Gets the collection of connection points on this <see cref="T:Mindscape.WpfDiagramming.DiagramNode"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.CommentNode.Clone">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that represents the current state of this node
            at the time this method is called.
            </summary>
            <returns>An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that represents the current state of this node.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.CommentNode.SetAs(Mindscape.WpfDiagramming.Foundation.IDiagramNodeState)">
            <summary>
            Sets all the properties of this node to match those of the
            given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>.
            </summary>
            <param name="state">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that will have its property values applied to this node.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.CommentNode.DefaultBuilder">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder"/> that a toolbox item can use to construct
            <see cref="T:Mindscape.WpfDiagramming.CommentNode"/> objects.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.CommentNode.CanOriginateNewConnections">
            <summary>
            Returns false. A <see cref="T:Mindscape.WpfDiagramming.CommentNode"/> can not originate any connections.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.CommentNode.CanReceiveNewConnections">
            <summary>
            Returns false. A <see cref="T:Mindscape.WpfDiagramming.CommentNode"/> can not receive any connections.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.NodeState">
            <summary>
            A general implementation of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> interface.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState">
            <summary>
            Represents a state of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>. Implementations of this interface will
            hold the values of the properties of an instance of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> implementation.
            </summary>
            <remarks>This interface is used primarily for Undo support.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState.Apply(Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Applies all the property values held by this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> to the given
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            </summary>
            <param name="node">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that will have its properties set to match those held by this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState.Data">
            <summary>
            Gets the stored Data property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>
            was made for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState.Parent">
            <summary>
            Gets the stored Parent property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>
            was made for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState.ZOrder">
            <summary>
            Gets the stored ZOrder property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>
            was made for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState.Bounds">
            <summary>
            Gets the stored Bounds property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>
            was made for.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.NodeState.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/> class.
            This <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/> will store the ZOrder, Parent, and Data property values of the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            It will also store a clone of the Bounds property value.
            </summary>
            <param name="node">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/> will represent a state for.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.NodeState.Apply(Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Applies the property values stored in this <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/> on to the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            Note that because the Data and Parent properties are readonly, these must be set by the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>
            itself if necessary.
            </summary>
            <param name="node">The node onto which the state is being restored.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.NodeState.ZOrder">
            <summary>
            Gets the stored ZOrder property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/>
            was made for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.NodeState.Parent">
            <summary>
            Gets the stored Parent property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/>
            was made for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.NodeState.Data">
            <summary>
            Gets the stored Data property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/>
            was made for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.NodeState.Bounds">
            <summary>
            Gets the stored Bounds property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/>
            was made for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.NodeState.Rotation">
            <summary>
            Gets the stored Rotation property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/>
            was made for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.NodeState.IsResizable">
            <summary>
            Gets the stored IsResizable property value for the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.NodeState"/>
            was made for.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder">
            <summary>
            Provides node creation services for use by toolbox items.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder.CreateNode(Mindscape.WpfDiagramming.Foundation.IDiagramModel,System.Windows.Rect)">
            <summary>
            Creates a new node in a diagram.
            </summary>
            <param name="diagram">The diagram in which the node is to be placed.</param>
            <param name="bounds">The bounds within which to create the node, relative to the
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.</param>
            <remarks>The builder may implement node creation by adding a node to the diagram model, or
            by creating an object or relationship in a business object model (which is observed by the diagram
            model.)</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder.DefaultSize">
            <summary>
            Gets the default size, used if the application cannot determine an appropriate size
            using its own user interface.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ConnectionTool">
            <summary>
            Provides attached properties which configure a <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>
            to create connections of a specified <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ConnectionTool.GetConnectionPathStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:System.Windows.Style"/> to be applied to the path that represents a line
            type in a <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            </summary>
            <param name="obj">The DiagramConnectionTool or container from which the property value is read.</param>
            <returns>The value of the ConnectionPathStyle attached property on the specified object.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ConnectionTool.SetConnectionPathStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Sets the <see cref="T:System.Windows.Style"/> to be applied to the path that represents a line
            type in a <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            </summary>
            <param name="obj">The DiagramConnectionTool or container to which the property value is written.</param>
            <param name="value">The value of the ConnectionPathStyle attached property on the specified object.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ConnectionTool.ConnectionPathStyleProperty">
            <summary>
            Identifies the ConnectionPathStyle attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ConnectionTool.GetArrowPathStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:System.Windows.Style"/> to be applied to the path that represents an arrow on a line
            type in a <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            </summary>
            <param name="obj">The DiagramConnectionTool or container from which the property value is read.</param>
            <returns>The value of the ArrowPathStyle attached property on the specified object.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ConnectionTool.SetArrowPathStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Sets the <see cref="T:System.Windows.Style"/> to be applied to the path that represents an arrow on a line
            type in a <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            </summary>
            <param name="obj">The DiagramConnectionTool or container to which the property value is written.</param>
            <param name="value">The value of the ArrowPathStyle attached property on the specified object.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ConnectionTool.ArrowPathStyleProperty">
            <summary>
            Identifies the ConnectionPathStyle attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ConnectionTool.GetLineType(Mindscape.WpfDiagramming.DiagramConnectionTool)">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/> for this <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DiagramLineType of the specified DiagramConnectionTool.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ConnectionTool.SetLineType(Mindscape.WpfDiagramming.DiagramConnectionTool,Mindscape.WpfDiagramming.DiagramLineType)">
            <summary>
            Sets the <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/> for this <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            </summary>
            <param name="obj">The element to which the property value is written.</param>
            <param name="value">The DiagramLineType of the specified DiagramConnectionTool.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ConnectionTool.LineTypeProperty">
            <summary>
            Identifies the LineType attached property.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramArrowheadType">
            <summary>
            Identifies a type of arrowhead.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramArrowheadType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramArrowheadType"/> class.
            </summary>
            <param name="name">The name of the line type.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramArrowheadType.Name">
            <summary>
            Gets the name of the arrowhead type.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramArrowheadTypes">
            <summary>
            Identifies standard arrowhead types.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramArrowheadTypes.None">
            <summary>
            Represents no arrowhead.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramArrowheadTypes.Notched">
            <summary>
            Represents a notched arrowhead.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramArrowheadTypes.DefaultArrowheadPathStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> for paths representing arrowheads.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramArrowheadTypes.DefaultArrowheadToolboxPathStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> for paths representing arrowheads
            in a toolbox.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramConnectionBuilder">
            <summary>
            Provides <see cref="T:Mindscape.WpfDiagramming.DiagramConnection"/> creation services for use by toolbox items.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionBuilder">
            <summary>
            Provides connection creation services for use by toolbox items.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionBuilder.CreateConnection(Mindscape.WpfDiagramming.Foundation.IDiagramModel,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Creates a connection between the specified connection points.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to which the connection will be added.</param>
            <param name="fromConnectionPoint">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> representing the start of the connection.</param>
            <param name="toConnectionPoint">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> representing the end of the connection.</param>
            <remarks>The builder may implement connection creation by adding a connection to the diagram model, or
            by creating an object or relationship in a business object model (which is observed by the diagram
            model.)</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionBuilder.CanCreateConnection(Mindscape.WpfDiagramming.Foundation.IDiagramModel,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget)">
            <summary>
            Returns whether or not a connection can be made between the given connection point and destination.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that the connection will belong to.</param>
            <param name="fromConnectionPoint">The source connection point of the connection.</param>
            <param name="dropTarget">Information about the potential destination of the connection.</param>
            <returns>True if a connection can be made, otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionBuilder.CreateConnection(Mindscape.WpfDiagramming.Diagram,Mindscape.WpfDiagramming.DiagramConnectionPoint,Mindscape.WpfDiagramming.DiagramConnectionPoint)">
            <summary>
            Creates a connection between the specified connection points.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Diagram"/> to which the connection will be added.</param>
            <param name="fromConnectionPoint">The <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionPoint"/> representing the start of the connection.</param>
            <param name="toConnectionPoint">The <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionPoint"/> representing the end of the connection.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionBuilder.CanCreateConnection(Mindscape.WpfDiagramming.Foundation.IDiagramModel,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget)">
            <summary>
            Gets whether or not a connection can be made between the given connection point and destination.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that the connection will belong to.</param>
            <param name="fromConnectionPoint">The source connection point of the connection.</param>
            <param name="dropTarget">Information about the potential destination of the connection.</param>
            <returns>true if a connection can be made, otherwise false.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnectionBuilder.LineType">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/> of <see cref="T:Mindscape.WpfDiagramming.DiagramConnection"/> objects created by this builder.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramConnectionStyleSelector">
            <summary>
            Selects a style for a <see cref="T:Mindscape.WpfDiagramming.DiagramConnection"/> using the <see cref="T:Mindscape.WpfDiagramming.LineTypeLayout"/>
            resource whose key is the DiagramConnection.LineType.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.MatchingStyleSelector">
            <summary>
            Selects a <see cref="T:System.Windows.Style"/> based on a list of match criteria.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DelegatingStyleSelector">
            <summary>
            Selects a style, falling back to another <see cref="T:System.Windows.Controls.StyleSelector"/> if
            no style is found by this selector.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DelegatingStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.Style"/> for the item.
            </summary>
            <param name="item">The item for which to select the style.</param>
            <param name="container">The data-bound object.</param>
            <returns>A Style for the item.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DelegatingStyleSelector.SelectStyleCore(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, gets a <see cref="T:System.Windows.Style"/> for the item.
            If this method returns null, the item is handed off to the <see cref="P:Mindscape.WpfDiagramming.Foundation.DelegatingStyleSelector.BasedOn"/> <see cref="T:System.Windows.Controls.DataTemplateSelector"/>.
            </summary>
            <param name="item">The item for which to select the style.</param>
            <param name="container">The data-bound object.</param>
            <returns>A Style for the item, or null to delegate to the BasedOn StyleSelector.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DelegatingStyleSelector.BasedOn">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.StyleSelector"/> on which to fall back if no style
            is found by this selector.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MatchingStyleSelector.SelectStyleCore(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns the <see cref="T:System.Windows.Style"/> associated with the first criterion to match the item.
            </summary>
            <param name="item">The item for which to select the style.</param>
            <param name="container">The data-bound object.</param>
            <returns>The template from the first matching entry in the <see cref="P:Mindscape.WpfDiagramming.Foundation.MatchingStyleSelector.Styles"/> list if any; otherwise
            the <see cref="P:Mindscape.WpfDiagramming.Foundation.MatchingStyleSelector.DefaultStyle"/>.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MatchingStyleSelector.DefaultStyle">
            <summary>
            Gets or sets the default <see cref="T:System.Windows.Style"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MatchingStyleSelector.Styles">
            <summary>
            Gets the list of styles and matching criteria.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionStyleSelector.SelectStyleCore(System.Object,System.Windows.DependencyObject)">
            <summary>
            Selects a style for the specified <see cref="T:Mindscape.WpfDiagramming.DiagramConnection"/>.
            </summary>
            <param name="item">The DiagramConnection for which a style is required.</param>
            <param name="container">The FrameworkElement that contains the DiagramConnection.</param>
            <returns>A <see cref="T:System.Windows.Style"/> for displaying the specified connection.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramFormatter">
            <summary>
            Specifies how a <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> should be displayed on a
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter">
            <summary>
            Specifies the layout, formatting and visual style of a diagram.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter.NodeStyleSelector">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.StyleSelector"/> which is used to select styles
            for diagram nodes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter.ConnectionStyleSelector">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.StyleSelector"/> which is used to select styles
            for diagram connections.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter.NodeContentTemplateSelector">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.DataTemplateSelector"/> which is used to select templates
            for the data content of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> objects.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter.ConnectionContentTemplateSelector">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.DataTemplateSelector"/> which is used to select templates
            for the data content of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> objects.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter.ConnectionPointTemplateSelector">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.DataTemplateSelector"/> used for selecting templates for
            diagram connection points.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter.Layout">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/> which positions nodes and connection points.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramFormatter.NodeStyleSelector">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.StyleSelector"/> used for styling nodes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramFormatter.ConnectionStyleSelector">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.StyleSelector"/> used for styling connections.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramFormatter.NodeContentTemplateSelector">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.DataTemplateSelector"/> used for displaying the data content of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> objects.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramFormatter.ConnectionContentTemplateSelector">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.DataTemplateSelector"/> used for displaying the data content of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> objects. 
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramFormatter.ConnectionPointTemplateSelector">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.DataTemplateSelector"/> used for selecting a template for diagram connection points.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramFormatter.Layout">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/> used for positioning.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramLineType">
            <summary>
            Identifies a type of line.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramLineType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/> class.
            </summary>
            <param name="name">The name of the line type.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramLineType.Freeze">
            <summary>
            Freezes the <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/> so that it cannot be modified.
            </summary>
            <returns>The frozen DiagramLineType.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramLineType.ToString">
            <summary>
            Provides a string representation of the <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/>.
            </summary>
            <returns>A string representation of the DiagramLineType</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramLineType.Name">
            <summary>
            Gets the name of the line type.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramLineType.Pathfinder">
            <summary>
            Gets or sets the routing algorithm for lines of this type.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramLineType.DisplayName">
            <summary>
            Gets or sets a display name which can be used in tooltips or other user interface text
            to identify the line type.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramLineTypes">
            <summary>
            Identifies standard line types.
            </summary>
            <summary>
            DiagramLineTypes
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramLineTypes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramLineTypes"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramLineTypes.Straight">
            <summary>
            Represents a straight line with no arrows.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramLineTypes.StraightArrow">
            <summary>
            Represents a straight line with an arrow at the destination end.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramLineTypes.StraightDoubleArrow">
            <summary>
            Represents a straight line with arrows at both ends.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramLineTypes.Elbow">
            <summary>
            Represents an elbow-routed line with no arrows.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramLineTypes.ElbowArrow">
            <summary>
            Represents an elbow-routed line with an arrow at the destination end.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramLineTypes.ElbowDoubleArrow">
            <summary>
            Represents an elbow-routed line with arrow at both ends.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramLineTypes.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramLineTypes.DefaultDiagramConnectionStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> for diagram connections.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramLineTypes.DefaultConnectionToolboxItemStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> for toolbox items
            representing diagram connections.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramLineTypes.DefaultConnectionToolboxItemArrowheadStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> for toolbox items
            representing diagram connections.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramXmlSerializer">
            <summary>
            Serializes and deserializes <see cref="T:Mindscape.WpfDiagramming.Diagram"/> objects as XML.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.Serialize(Mindscape.WpfDiagramming.Diagram)">
            <summary>
            Serializes a <see cref="T:Mindscape.WpfDiagramming.Diagram"/> to XML.
            </summary>
            <param name="diagram">The diagram to be serialized.</param>
            <returns>An XML document containing the serialized diagram.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.Deserialize(System.Xml.Linq.XDocument)">
            <summary>
            Deserializes a <see cref="T:Mindscape.WpfDiagramming.Diagram"/> from XML.
            </summary>
            <param name="document">An XML document containing the serialized diagram.</param>
            <returns>The diagram deserialized from the XML.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.CreateDiagram">
            <summary>
            Returns an instance of the diagram that is being deserialized.
            </summary>
            <returns>The diagram.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.GetId(System.Object)">
            <summary>
            Returns the id for the given diagram model object. This can be overriden to provide custom id assignment logic.
            </summary>
            <param name="obj">The diagram model object.</param>
            <returns>The unique id of the given object.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.SerializeNodeCore(Mindscape.WpfDiagramming.DiagramNode)">
            <summary>
            Returns an <see cref="T:System.Xml.Linq.XElement"/> for serializing the given node.
            </summary>
            <param name="node">The node to be serialized.</param>
            <returns>The serialized node.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.SerializeConnectionCore(Mindscape.WpfDiagramming.DiagramConnection)">
            <summary>
            Returns an <see cref="T:System.Xml.Linq.XElement"/> for serializing the given connection.
            </summary>
            <param name="connection">The connection to be serialized.</param>
            <returns>The serialized connection.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.CreateNode(System.Xml.Linq.XElement)">
            <summary>
            Returns a deserialized node based on the given <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.Linq.XElement"/> for deserializing the node.</param>
            <returns>The deserialized node.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.CreateConnection(System.Xml.Linq.XElement,Mindscape.WpfDiagramming.DiagramConnectionPoint,Mindscape.WpfDiagramming.DiagramConnectionPoint,System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment})">
            <summary>
            Returns a deserialized connection based on the given <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.Linq.XElement"/> for deserializing the connection.</param>
            <param name="source">The source connection point of the connection.</param>
            <param name="destination">The destination connection point of the connection.</param>
            <param name="segments">The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects that make up the connection.</param>
            <returns>The deserialized connection.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.Shape(System.Xml.Linq.XAttribute)">
            <summary>
            Returns a <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/> based on the given <see cref="T:System.Xml.Linq.XAttribute"/> value.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.Linq.XAttribute"/> to deserialize to a <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.</param>
            <returns>The <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.CreateDouble(System.Xml.Linq.XAttribute)">
            <summary>
            Returns a double based on the given <see cref="T:System.Xml.Linq.XAttribute"/>.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.Linq.XAttribute"/> to deserialize.</param>
            <returns>The double that the <see cref="T:System.Xml.Linq.XAttribute"/> represents.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.CreateBoolean(System.Xml.Linq.XAttribute)">
            <summary>
            Returns a boolean based on the given <see cref="T:System.Xml.Linq.XAttribute"/>.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.Linq.XAttribute"/> to deserialize.</param>
            <returns>The boolean that the <see cref="T:System.Xml.Linq.XAttribute"/> represents.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.CreateString(System.Xml.Linq.XAttribute)">
            <summary>
            Returns a string based on the given <see cref="T:System.Xml.Linq.XAttribute"/>.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.Linq.XAttribute"/> to deserialize.</param>
            <returns>The string that the <see cref="T:System.Xml.Linq.XAttribute"/> represents.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramXmlSerializer.CreateLong(System.Xml.Linq.XAttribute)">
            <summary>
            Returns a long based on the given <see cref="T:System.Xml.Linq.XAttribute"/>.
            </summary>
            <param name="xml">The <see cref="T:System.Xml.Linq.XAttribute"/> to deserialize.</param>
            <returns>The long that the <see cref="T:System.Xml.Linq.XAttribute"/> represents.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramXmlSerializer.ShapeNameResolver">
            <summary>
            Gets or sets a function used to resolve shape names.  This supports custom shapes.
            If the ShapeNameResolver is not set, or returns null, then the default resolver is used.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramXmlSerializer.LineTypeNameResolver">
            <summary>
            Gets or sets a function used to resolve line type names.  This supports custom line types.
            If the LineTypeNameResolver is not set, or returns null, then the default resolver is used.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramXmlSerializer.OnSerializeCustomNodeData">
            <summary>
            Gets or sets a function used to serialize custom node data.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramXmlSerializer.OnDeserializeCustomNodeData">
            <summary>
            Gets or sets a function used to deserialize custom node data.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramXmlSerializer.OnSerializeCustomConnectionData">
            <summary>
            Gets or sets a function used to serialize custom connection data.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramXmlSerializer.OnDeserializeCustomConnectionData">
            <summary>
            Gets or sets a function used to deserialize custom connection data.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramConnectionPoint">
            <summary>
            Represents a point at which a connection connects to a source or destination
            in a standard shape diagram.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1">
            <summary>
            Provides base implementation for diagram connection points.
            </summary>
            <typeparam name="TConnection">The type of diagram connection that can connect to this connection point.</typeparam>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramConnectable,Mindscape.WpfDiagramming.Edge)">
            <summary>
            Initializes a new instance of the DiagramConnectionPointBase class.
            </summary>
            <param name="connectable">The connectable object (node or connection) on which the connection point is situated.</param>
            <param name="edge">The <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Edge"/> of the connectable that this point is situated on.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramConnectable,Mindscape.WpfDiagramming.Edge,System.Int32)">
            <summary>
            Initializes a new instance of the DiagramConnectionPointBase class.
            </summary>
            <param name="connectable">The connectable object (node or connection) on which the connection point is situated.</param>
            <param name="edge">The <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Edge"/> of the connectable that this point is situated on.</param>
            <param name="index">The index identifier for this connection point.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.OnPositionChanged">
            <summary>
            Raises the PositionChanged event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.SetPosition(System.Windows.Point,System.Double)">
            <summary>
            Sets the position of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1"/> to be a point on the connection that it is attached to
            that is closest to the given <see cref="T:System.Windows.Point"/>. The actual position that was set is then returned.
            </summary>
            <param name="point">A Point that the position of this DiagramConnectionPointBase is derived from.</param>
            <param name="buffer">Some distance at each end of the accepting connection where this connection point can not connect to.</param>
            <returns>The actual resulting position of this DiagramConnectionPointBase.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.AddConnection(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Attaches the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to attach.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.RemoveConnection(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Removes the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> from this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to remove.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Connectable">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable"/> on which the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>
            is situated. This will either be a node or a connection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Data">
            <summary>
            Gets or sets the data object held by this connection point/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Position">
            <summary>
            Gets or sets the position of the connection point/>.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.PositionChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Position"/> property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.PositionCalculator">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> that this connection point
            uses to calculate its position relative to the connectable it is attached to.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Edge">
            <summary>
            Returns the edge of the node that this DiagramConnectionPointBase will sit on according
            to its position calculator.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Index">
            <summary>
            Gets an index identifier for this connection point. This is useful for selecting
            a connection point calculator when there are multiple connection points on the same edge of a node.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.IndexChanged">
            <summary>
            Raised when the Index property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.FlowDirection">
            <summary>
            Gets the direction of flow for this connection point.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.CanOriginateNewConnections">
            <summary>
            Gets whether the user should be allowed to drag new connections from this connection point.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.CanReceiveNewConnections">
            <summary>
            Gets whether the user should be allowed to drop new connections onto this connection point.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.Connections">
            <summary>
            Gets the connections attached to this connection point.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionPointBase`1.HasConnections">
            <summary>
            Gets whether or not this connection point currently has any connections mounted on it.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionPoint.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramConnectable,Mindscape.WpfDiagramming.Edge)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionPoint"/> class.
            </summary>
            <param name="connectable">The node or connection on which the connection point sits.</param>
            <param name="edge">The edge of the node or connection on which the connection point sits</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionPoint.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramConnectable,Mindscape.WpfDiagramming.Edge,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionPoint"/> class.
            </summary>
            <param name="connectable">The node or connection on which the connection point sits.</param>
            <param name="edge">The edge of the node or connection on which the connection point sits</param>
            <param name="index">The index identifier for this connection point.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionPoint.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramConnectable,Mindscape.WpfDiagramming.Edge,Mindscape.WpfDiagramming.Foundation.ConnectionPointDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionPoint"/> class.
            </summary>
            <param name="connectable">The node or connection on which the connection point sits.</param>
            <param name="edge">The edge of the node or connection on which the connection point sits</param>
            <param name="flowDirection">Specifies whether the connection point supports inbound connections, outbound connections or both.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionPoint.AddConnection(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Attaches the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to this <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionPoint"/>.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to attach.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionPoint.RemoveConnection(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Removes the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> from this <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionPoint"/>.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to remove.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnectionPoint.FlowDirection">
            <summary>
            Gets whether the connection point supports inbound connections, outbound connections or both.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.LineTypeLayout">
            <summary>
            Specifies how to display a <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.LineTypeLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.LineTypeLayout"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.LineTypeLayout.GetToolboxIconStyle(System.Windows.Shapes.Path)">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.ToolboxIconStyle"/> to be applied to a <see cref="T:System.Windows.Shapes.Path"/>
            in a <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            </summary>
            <param name="obj">The Path from which the property value is read.</param>
            <returns>The value of the ToolboxIconStyle attached property on the specified object.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.LineTypeLayout.SetToolboxIconStyle(System.Windows.Shapes.Path,Mindscape.WpfDiagramming.ToolboxIconStyle)">
            <summary>
            Sets the <see cref="T:Mindscape.WpfDiagramming.ToolboxIconStyle"/> to be applied to a <see cref="T:System.Windows.Shapes.Path"/>
            in a <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            </summary>
            <param name="obj">The Path to which the property value is written.</param>
            <param name="value">The value of the ToolboxIconStyle attached property on the specified object.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.LineTypeLayout.ToolboxIconStyleProperty">
            <summary>
            Identifies the ToolboxIconStyle attached property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.LineTypeLayout.Stroke">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used to draw lines of this type.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.LineTypeLayout.StrokeThickness">
            <summary>
            Gets or sets the thickness of lines of this type.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.LineTypeLayout.StrokeDashArray">
            <summary>
            Gets or sets the dash pattern for lines of this type.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.LineTypeLayout.StartArrowhead">
            <summary>
            Gets or sets the type of arrowhead shown at the start of lines of this type.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.LineTypeLayout.EndArrowhead">
            <summary>
            Gets or sets the type of arrowhead shown at the end of lines of this type.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.LineTypeLayout.ToolboxIconPaths">
            <summary>
            Specifies the paths that represent lines of this type in the toolbox.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ToolboxIconStyle">
            <summary>
            When applied to a <see cref="T:System.Windows.Shapes.Path"/> in <see cref="P:Mindscape.WpfDiagramming.LineTypeLayout.ToolboxIconPaths"/>,
            specifies how the path should be styled if no explicit style is specified.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ToolboxIconStyle.Line">
            <summary>
            The Path represents a line part of the toolbox icon.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ToolboxIconStyle.Arrow">
            <summary>
            The Path represents an arrow part of the toolbox icon.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ShapeConnectionPointPosition">
            <summary>
            Specifies the location of a connection point on a <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeConnectionPointPosition.Edge">
            <summary>
            Gets or sets the edge for whose connection points this specifies a position.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeConnectionPointPosition.Position">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> which specifies the position of a connection point.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ContentMargin">
            <summary>
            Controls the positioning of the content on a <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ContentMargin.Left">
            <summary>
            Gets or sets the margin to the left of the content.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ContentMargin.Top">
            <summary>
            Gets or sets the margin above the content.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ContentMargin.Right">
            <summary>
            Gets or sets the margin to the right of the content.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ContentMargin.Bottom">
            <summary>
            Gets or sets the margin below the content.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Diagram">
            <summary>
            Represents a standard shape diagram.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2">
            <summary>
            Provides a base implementation of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> interface.
            </summary>
            <typeparam name="TNode">The type of nodes that this diagram supports.</typeparam>
            <typeparam name="TConnection">The type of connection that this diagram supports.</typeparam>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel">
            <summary>
            Provides an abstract representation of diagram entities, ready for
            rendering using templates.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramModel.Nodes">
            <summary>
            Gets the nodes of the diagram.
            </summary>
            <remarks>List elements must implement <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramModel.Connections">
            <summary>
            Gets the connections of the diagram.
            </summary>
            <remarks>List elements must implement <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramModel.CustomItems">
            <summary>
            Gets any additional custom items to be displayed on the diagram surface.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramModel.DefaultConnectionBuilder">
            <summary>
            Gets a builder for creating connections when no other connection builder is specified.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramModel.NodeRemover">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeRemover"/> to be used for removing nodes from the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramModel.ConnectionRemover">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRemover"/> to be used to remove connections from the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramModel.ConnectionRelocator">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRelocator"/> to be used to relocate an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramModel.Source">
            <summary>
            Gets the source of the data presented through the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>, if any.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2"/> class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.Nodes">
            <summary>
            Gets the nodes of the diagram.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.Connections">
            <summary>
            Gets the connections of the diagram.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.CustomItems">
            <summary>
            Gets null.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.DefaultConnectionBuilder">
            <summary>
            Gets or sets the default <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionBuilder"/> for building diagram connections.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.NodeRemover">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeRemover"/> for removing nodes from the diagram.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.ConnectionRemover">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRemover"/> for removing connections from the diagram.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.ConnectionRelocator">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRelocator"/> for relocating connections in the diagram.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramModelBase`2.Source">
            <summary>
            Gets the source of the diagram.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Diagram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Diagram"/> class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Diagram.Source">
            <summary>
            Gets the business object represented by the diagram.  For the <see cref="T:Mindscape.WpfDiagramming.Diagram"/> class
            this is always null.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramConnection">
            <summary>
            Represents a connection on a standard shape diagram.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3">
            <summary>
            Provides base diagram connection implementation.
            </summary>
            <typeparam name="TOutboundPoint">The type of outbound connection point.</typeparam>
            <typeparam name="TInboundPoint">The type of inbound connection point.</typeparam>
            <typeparam name="TMountedPoint">The type of mountable connection points.</typeparam>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection">
            <summary>
            Represents a relationship between two diagram model entities that
            should be made visible in the diagram as a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.AddConnectionPoint(System.Windows.Point,System.Double)">
            <summary>
            Adds a connection point to this connection at an appropriate position derived from the given Point.
            The newly created and added connection point is then returned.
            </summary>
            <param name="point">A Point that will derive the position of the new connection point to be added to this connection.</param>
            <param name="buffer">The size of the region at each end of the connection segments which can not have a connection mounted connection point attached at.</param>
            <returns>The connection point that was just created and added to this connection.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.Clone">
            <summary>
            Returns an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/> that holds the property values of this
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> as it is at the time this method is called.
            </summary>
            <returns>An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/> holding current property values of this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.SetAs(Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState)">
            <summary>
            Sets all the properties within this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to be like the properties
            of the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/>.
            </summary>
            <param name="state">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/> to copy the properties from.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.FromConnectionPoint">
            <summary>
            Gets the source of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.ToConnectionPoint">
            <summary>
            Gets the destination of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.Segments">
            <summary>
            Returns the collection of <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects that make up this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.Pathfinder">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPathfinder"/> used to find the segment path for this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.Diagram">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that the connection belongs to.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.IsUserModified">
            <summary>
            Gets or sets whether this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> has been user modified or not.
            A user modified connection is one that has had one or more of its <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>
            objects positioned by a user.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnection.ConnectionPoints">
            <summary>
            Gets the collection of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> objects that are currently attached to this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
            <remarks>Do not modify this collection directly: use the AddConnectionPoint method instead.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3"/> class.
            </summary>
            <param name="fromConnectionPoint">The source of the connection.</param>
            <param name="toConnectionPoint">The destination of the connection.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.#ctor(`0,`1,System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment})">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3"/> class.
            </summary>
            <param name="fromConnectionPoint">The source of the connection.</param>
            <param name="toConnectionPoint">The destination of the connection.</param>
            <param name="segments">The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects within this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.Clone">
            <summary>
            Gets the state of the connection for undo purposes.
            </summary>
            <returns>The state of the connection, used for undo purposes.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.SetAs(Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState)">
            <summary>
            Sets all the properties of this connection to match those of
            the given connection.
            </summary>
            <param name="state">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionState"/> holding information about a diagram connection.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.AddConnectionPoint(System.Windows.Point,System.Double)">
            <summary>
            Adds a new mounted connection point to this connection.
            </summary>
            <param name="point">A point used to derive the position of the mounted connection point.</param>
            <param name="buffer">The minimum distance away from the connection corners that the mounted point can be placed.</param>
            <returns>The connection point that is created and mounted to this connection.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.ApplyPathfinding">
            <summary>
            Re-routes this connection using its pathfinder.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.GetCollisionBounds(Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Returns a <see cref="T:System.Windows.Rect"/> with a position being the same as the position of the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>, and a size
            of 1 by 1. This Rect is the bounds to be taken into consideration when path finding to the given connection point.
            </summary>
            <param name="connectionPoint">The IDiagramConnectionPoint to find the collision bounds of.</param>
            <returns>A Rect with size 1 by 1 and the same position as the position of the given IDiagramConnectionPoint.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.OnDataChanged">
            <summary>
            Raises the <see cref="E:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.DataChanged"/> event.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.IsUserModified">
            <summary>
            Gets or sets whether this connection has had one of its
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects modified by a user.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.ZOrder">
            <summary>
            Gets or sets the relative z-order.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.Segments">
            <summary>
            Returns all the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects that build up this connection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.Pathfinder">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPathfinder"/> used to find the segment path of this connection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.ConnectionPoints">
            <summary>
            Returns all the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> objects currently attached to this connection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.FromConnectionPoint">
            <summary>
            Gets or sets the source of the connection.
            When setting the source, this connection is first removed from any
            original source.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.ToConnectionPoint">
            <summary>
            Gets or sets the destination of the connection.
            When setting the destination, this connection is first removed from any
            original destination.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.Diagram">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that the connection belongs to.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.Data">
            <summary>
            Gets or sets the data attached to this connection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.CanReceiveNewConnections">
            <summary>
            When overridden in a derived class, gets whether the connection can be the destination
            of a new incoming connection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.CanOriginateNewConnections">
            <summary>
            Gets whether the connection can allow a be the source of a new outgoing connection.
            The base class implementation always returns false.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.DataChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionBase`3.Data"/> property changes.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnection.#ctor(Mindscape.WpfDiagramming.DiagramConnectionPoint,Mindscape.WpfDiagramming.DiagramConnectionPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramConnection"/> class.
            </summary>
            <param name="fromConnectionPoint">The source of the connection.</param>
            <param name="toConnectionPoint">The destination of the connection.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnection.#ctor(Mindscape.WpfDiagramming.DiagramConnectionPoint,Mindscape.WpfDiagramming.DiagramConnectionPoint,System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment})">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramConnection"/> class.
            </summary>
            <param name="fromConnectionPoint">The source of the connection.</param>
            <param name="toConnectionPoint">The destination of the connection.</param>
            <param name="segments">The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects within this <see cref="T:Mindscape.WpfDiagramming.DiagramConnection"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnection.AddConnectionPoint(System.Windows.Point,System.Double)">
            <summary>
            Adds a new mounted connection point to this connection.
            </summary>
            <param name="point">A point used to derive the position of the mounted connection point.</param>
            <param name="buffer">The minimum distance away from the connection corners that the mounted point can be placed.</param>
            <returns>The connection point that is created and mounted to this connection.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnection.CanReceiveNewConnections">
            <summary>
            Gets whether the connection can be the destination of a new incoming connection.
            Always returns true.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnection.CanOriginateNewConnections">
            <summary>
            Gets whether the connection can be the source of a new outgoing connection.
            Always returns true.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnection.LineType">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.DiagramLineType"/> used to draw the connection.
            </summary>
            <remarks>Changes to this property after the connection is displayed do not affect the display.
            Set the LineType property before adding the connection to the diagram model.  If you need to change
            the line type while the connection is displayed, remove the connection from the diagram model,
            set the property, then reinstate the connection.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnection.Pathfinder">
            <summary>
            Gets the routing algorithm for the connection.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramShape">
            <summary>
            Represents a geometrical shape in a diagram.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramShape.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/> class.
            </summary>
            <param name="name">The name of the shape.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramShape.Freeze">
            <summary>
            Freezes the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/> so that it cannot be modified.
            </summary>
            <returns>The frozen DiagramShape.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramShape.ToString">
            <summary>
            Provides a string representation of the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.
            </summary>
            <returns>A string representation of the DiagramShape</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShape.Name">
            <summary>
            Gets the name of the shape.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShape.LeftConnectionPointCount">
            <summary>
            Gets or sets the number of connection points on the shape's left edge.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShape.TopConnectionPointCount">
            <summary>
            Gets or sets the number of connection points on the shape's top edge.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShape.RightConnectionPointCount">
            <summary>
            Gets or sets the number of connection points on the shape's right edge.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShape.BottomConnectionPointCount">
            <summary>
            Gets or sets the number of connection points on the shape's bottom edge.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShape.DefaultSize">
            <summary>
            Gets or sets the default size when creating nodes of this shape.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShape.DisplayName">
            <summary>
            Gets or sets a display name which can be used in tooltips or other user interface text
            to identify the shape.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramShapes">
            <summary>
            Contains standard shapes for use in diagrams.
            </summary>
            <summary>
            DiagramShapes
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramShapes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramShapes"/> resource dictionary.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Rectangle">
            <summary>
            Represents a rectangle.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.RoundedRectangle">
            <summary>
            Represents a rectangle with rounded corners.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.SnipSingleCornerRectangle">
            <summary>
            Represents a rectangle with a top-right beveled corner.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.SnipSameSideCornerRectangle">
            <summary>
            Represents a rectangle with the top two corners beveled.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.SnipDiagonalCornerRectangle">
            <summary>
            Represents a rectangle with the top-right and bottom-left corners beveled.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.SnipAndRoundSingleCornerRectangle">
            <summary>
            Represents a rectangle with a top-left rounded corner and a top-right beveled corner.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.RoundSingleCornerRectangle">
            <summary>
            Represents a rectangle with a top-right rounded corner.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.RoundSameSideCornerRectangle">
            <summary>
            Represents a rectangle with two rounded corner on the top edge.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.RoundDiagonalCornerRectangle">
            <summary>
            Represents a rectangle with top-left and bottom-right rounded corners.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Ellipse">
            <summary>
            Represents an ellipse.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.IsoscelesTriangle">
            <summary>
            Represents an isosceles triangle.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.RightTriangle">
            <summary>
            Represents a right angled triangle.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Parallelogram">
            <summary>
            Represents a parallelogram.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Trapezoid">
            <summary>
            Represents a trapezium.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Diamond">
            <summary>
            Represents a diamond.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.RegularPentagon">
            <summary>
            Represents a regular pentagon.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Hexagon">
            <summary>
            Represents a regular hexagon.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Teardrop">
            <summary>
            Represents a teardrop.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.FourPointStar">
            <summary>
            Represents four pointed star.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.FivePointStar">
            <summary>
            Represents a five pointed star.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.RightArrow">
            <summary>
            Represents an arrow pointing right.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.LeftArrow">
            <summary>
            Represents an arrow pointing left.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.UpArrow">
            <summary>
            Represents an arrow pointing up.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.DownArrow">
            <summary>
            Represents an arrow pointing down.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.LeftRightArrow">
            <summary>
            Represents a two-way arrow pointing left and right.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.UpDownArrow">
            <summary>
            Represents a two-way arrow pointing up and down.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.QuadArrow">
            <summary>
            Represents an arrow pointing in all 4 directions.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.LeftRightUpArrow">
            <summary>
            Represents a three-way arrow pointing left, right and up.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.BentArrow">
            <summary>
            Represents an arrow initially pointing upwards, but then bends to the right.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.UTurnArrow">
            <summary>
            Represents a u-turn arrow.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.LeftUpArrow">
            <summary>
            Represents a two-way arrow pointing left and up.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.BentUpArrow">
            <summary>
            Represents an angular arrow that initially point right, but then angles upwards.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.CurvedRightArrow">
            <summary>
            Represents an arrow curving to the right.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.CurvedLeftArrow">
            <summary>
            Represents an arrow curving to the left.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.CurvedUpArrow">
            <summary>
            Represents an arrow curving upwards.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.CurvedDownArrow">
            <summary>
            Represents an arrow curving downwards.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.StripedRightArrow">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.NotchedRightArrow">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Pentagon">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Chevron">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.RightArrowCallout">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.DownArrowCallout">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.LeftArrowCallout">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.UpArrowCallout">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.LeftRightArrowCallout">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.QuadArrowCallout">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.CircularArrow">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Process">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.AlternateProcess">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Decision">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Data">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.PredefinedProcess">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.InternalStorage">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Document">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Multidocument">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Terminator">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Preparation">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.ManualInput">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.ManualOperation">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Connector">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.OffPageConnector">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Card">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.PunchedTape">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.SummingJunction">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Or">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Collate">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Sort">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Extract">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Merge">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.StoredData">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Delay">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.SequentialAccessStorage">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.MagneticDisk">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.DirectAccessStorage">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramShapes.Display">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramShapes.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShapes.DefaultNodeContentTemplateKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> representing the default
            node content (a text box).
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShapes.DefaultShapePathStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> representing the default
            style for diagram shapes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShapes.DefaultConnectionContentTemplateKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> representing the default
            connection content (a text box).
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShapes.DefaultConnectionPointTemplateKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> representing the default
            appearance of connection points.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShapes.TitleNodeToolKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/> representing a
            toolbox entry for <see cref="T:Mindscape.WpfDiagramming.TitleNode"/> nodes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramShapes.CommentNodeToolKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/> representing a
            toolbox entry for <see cref="T:Mindscape.WpfDiagramming.CommentNode"/> nodes.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ShapeLayout">
            <summary>
            Specifies how to display a <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.ShapeLayout"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeLayout.GetPositionCalculator(Mindscape.WpfDiagramming.Edge,System.Int32)">
            <summary>
            Gets the position of the connection point at the specified index along the specified edge.
            </summary>
            <param name="edge">The edge for which to get a connection point position.</param>
            <param name="index">The index of the connection point along that edge.</param>
            <returns>An <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> specifying the location of the connection point.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeLayout.GetToolboxIconStyle(System.Windows.Shapes.Path)">
            <summary>
            Gets the style to be used for a <see cref="T:System.Windows.Shapes.Path"/> in a <see cref="T:Mindscape.WpfDiagramming.ShapeLayout"/>
            when the shape appears in the toolbox.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The value of the ToolboxIconStyle property on the specified element.</returns>
            <remarks>The default is the Style of the Path.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeLayout.SetToolboxIconStyle(System.Windows.Shapes.Path,System.Windows.Style)">
            <summary>
            Gets the style to be used for a <see cref="T:System.Windows.Shapes.Path"/> in a <see cref="T:Mindscape.WpfDiagramming.ShapeLayout"/>
            when the shape appears in the toolbox.
            </summary>
            <param name="obj">The element to which the property value is written.</param>
            <param name="value">The value of the ToolboxIconStyle property on the specified element.</param>
            <remarks>The default is the Style of the Path.</remarks>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ShapeLayout.ToolboxIconStyleProperty">
            <summary>
            Identifies the ToolboxIconStyle attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeLayout.GetCursorVisualStyle(System.Windows.Shapes.Path)">
            <summary>
            Gets the style to be used for a <see cref="T:System.Windows.Shapes.Path"/> in a <see cref="T:Mindscape.WpfDiagramming.ShapeLayout"/>
            when the shape is being displayed as a cursor visual.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The value of the CursorVisualStyle property on the specified element.</returns>
            <remarks>The default is the Style of the Path.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeLayout.SetCursorVisualStyle(System.Windows.Shapes.Path,System.Windows.Style)">
            <summary>
            Gets the style to be used for a <see cref="T:System.Windows.Shapes.Path"/> in a <see cref="T:Mindscape.WpfDiagramming.ShapeLayout"/>
            when the shape is being displayed as a cursor visual.
            </summary>
            <param name="obj">The element to which the property value is written.</param>
            <param name="value">The value of the ToolboxIconStyle property on the specified element.</param>
            <remarks>The default is the Style of the Path.</remarks>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ShapeLayout.CursorVisualStyleProperty">
            <summary>
            Identifies the CursorVisualStyle attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeLayout.GetNodeStyle(System.Windows.Shapes.Path)">
            <summary>
            Gets the style to be used for a <see cref="T:System.Windows.Shapes.Path"/> in a <see cref="T:Mindscape.WpfDiagramming.ShapeLayout"/>
            when the shape is placed on the diagram.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The value of the NodeStyle property on the specified element.</returns>
            <remarks>The default is the Style of the Path.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeLayout.SetNodeStyle(System.Windows.Shapes.Path,System.Windows.Style)">
            <summary>
            Gets the style to be used for a <see cref="T:System.Windows.Shapes.Path"/> in a <see cref="T:Mindscape.WpfDiagramming.ShapeLayout"/>
            when the shape is placed on the diagram.
            </summary>
            <param name="obj">The element to which the property value is written.</param>
            <param name="value">The value of the ToolboxIconStyle property on the specified element.</param>
            <remarks>The default is the Style of the Path.</remarks>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ShapeLayout.NodeStyleProperty">
            <summary>
            Identifies the NodeStyle attached property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeLayout.Geometry">
            <summary>
            Specifies the geometry of a <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeLayout.ContentMargin">
            <summary>
            Specifies how content should be positioned on the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeLayout.ConnectionPointPositions">
            <summary>
            Specifies how connection points should be positioned on the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeLayout.Paths">
            <summary>
            Specifies the paths that make up a <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.  This is used for shapes that need to apply
            different fill, stroke or style settings to different figures in the shape.  A shape should specify either
            Paths or Geometry, but not both.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ShapeNode">
            <summary>
            Represents a node in a diagram that displays a geometric shape.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.ShapeNode"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeNode.Clone">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that represents the current state of this node
            at the time this method is called.
            </summary>
            <returns>An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that represents the current state of this node.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeNode.SetAs(Mindscape.WpfDiagramming.Foundation.IDiagramNodeState)">
            <summary>
            Sets all the properties of this node to match those of the
            given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>.
            </summary>
            <param name="state">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that will have its property values applied to this node.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeNode.BuildConnectionPoint(Mindscape.WpfDiagramming.Edge)">
            <summary>
            Returns a new connection point to be added to this node.
            </summary>
            <param name="edge">The <see cref="T:Mindscape.WpfDiagramming.Edge"/> value for the new connection point.</param>
            <returns>A connection point to be added to this node.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeNode.Shape">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/> displayed by this <see cref="T:Mindscape.WpfDiagramming.ShapeNode"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ShapeNodeBuilder">
            <summary>
            Provides <see cref="T:Mindscape.WpfDiagramming.ShapeNode"/> creation services for use by toolbox items.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeNodeBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.ShapeNodeBuilder"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeNodeBuilder.CreateNode(Mindscape.WpfDiagramming.Foundation.IDiagramModel,System.Windows.Rect)">
            <summary>
            Creates a new node in a diagram.
            </summary>
            <param name="diagram">The diagram in which the node is to be placed.</param>
            <param name="bounds">The bounds within which to create the node, relative to the
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeNodeBuilder.Shape">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/> of <see cref="T:Mindscape.WpfDiagramming.ShapeNode"/> objects created
            by this builder.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.ShapeNodeBuilder.DefaultSize">
            <summary>
            Gets the default size to use when creating nodes with this builder.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ShapeNodeStyleSelector">
            <summary>
            Selects a style for a <see cref="T:Mindscape.WpfDiagramming.ShapeNode"/> using the <see cref="T:Mindscape.WpfDiagramming.ShapeLayout"/> resource
            whose key is the ShapeNode object.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeNodeStyleSelector.SelectStyleCore(System.Object,System.Windows.DependencyObject)">
            <summary>
            Selects a style for a <see cref="T:Mindscape.WpfDiagramming.ShapeNode"/>.
            </summary>
            <param name="item">The node whose style is required.  If this is not a ShapeNode, the
            Styles collection is consulted instead as in a normal <see cref="T:Mindscape.WpfDiagramming.Foundation.MatchingStyleSelector"/>.</param>
            <param name="container">The data bound container object.</param>
            <returns>&gt;A <see cref="T:System.Windows.Style"/> for the specified node.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ShapeTool">
            <summary>
            Provides attached properties which configure a <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/>
            to create nodes of a specified <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeTool.GetShapePathStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:System.Windows.Style"/> to be applied to the Path part of a
            <see cref="T:Mindscape.WpfDiagramming.ShapeNode"/> created from the <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/>
            that the ShapePathStyle property is attached to.
            </summary>
            <param name="obj">The DiagramNodeTool or container from which the property value is read.</param>
            <returns>The value of the ShapePathStyle attached property on the specified DependencyObject.</returns>
            <remarks>ShapePathStyle is inherited and may therefore be applied at the
            <see cref="T:Mindscape.WpfDiagramming.DiagramToolBox"/> level instead of to individual DiagramNodeTool
            objects.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeTool.SetShapePathStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Sets the <see cref="T:System.Windows.Style"/> to be applied to the Path part of a
            <see cref="T:Mindscape.WpfDiagramming.ShapeNode"/> created from the <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/>
            that the ShapePathStyle property is attached to.
            </summary>
            <param name="obj">The DiagramNodeTool or container to which the property value is written.</param>
            <param name="value">The value of the ShapePathStyle attached property on the specified DependencyObject.</param>
            <remarks>ShapePathStyle is inherited and may therefore be applied at the
            <see cref="T:Mindscape.WpfDiagramming.DiagramToolBox"/> level instead of to individual DiagramNodeTool
            objects.</remarks>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ShapeTool.ShapePathStyleProperty">
            <summary>
            Identifies the ShapePathStyle attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeTool.GetShape(Mindscape.WpfDiagramming.DiagramNodeTool)">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/> for this <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/>.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DiagramShape of the specified DiagramNodeTool.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeTool.SetShape(Mindscape.WpfDiagramming.DiagramNodeTool,Mindscape.WpfDiagramming.DiagramShape)">
            <summary>
            Sets the <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/> for this <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/>.
            </summary>
            <param name="obj">The element to which the property value is written.</param>
            <param name="value">The DiagramShape of the specified DiagramNodeTool.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ShapeTool.ShapeProperty">
            <summary>
            Identifies the Shape attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.ShapeTool.ConfigureTool(Mindscape.WpfDiagramming.DiagramNodeTool,Mindscape.WpfDiagramming.DiagramShape,System.Func{Mindscape.WpfDiagramming.DiagramShape,Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder})">
            <summary>
            Configures a <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/> to create nodes of a particular shape and type.
            </summary>
            <param name="tool">The DiagramNodeTool to be configured.</param>
            <param name="shape">The <see cref="T:Mindscape.WpfDiagramming.DiagramShape"/> representing the desired node shape.</param>
            <param name="builder">A function which produces an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder"/> for the
            desired type of node.</param>
            <remarks>You can use this method if you want to leverage the shape tool infrastructure in
            your own custom diagram types.</remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.TitleNode">
            <summary>
            Displays a title on the diagram, with optional pre-title and subtitle text.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.TitleNode.Clone">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that represents the current state of this node
            at the time this method is called.
            </summary>
            <returns>An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that represents the current state of this node.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.TitleNode.SetAs(Mindscape.WpfDiagramming.Foundation.IDiagramNodeState)">
            <summary>
            Sets all the properties of this node to match those of the
            given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/>.
            </summary>
            <param name="state">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeState"/> that will have its property values applied to this node.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.TitleNode.DefaultBuilder">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder"/> that a toolbox item can use to construct
            <see cref="T:Mindscape.WpfDiagramming.TitleNode"/> objects.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.TitleNode.PreTitle">
            <summary>
            Gets or sets text to appear above the title.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.TitleNode.Subtitle">
            <summary>
            Gets or sets text to appear below the title.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.TitleNode.CanOriginateNewConnections">
            <summary>
            Returns false. A <see cref="T:Mindscape.WpfDiagramming.TitleNode"/> can not originate any connections.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.TitleNode.CanReceiveNewConnections">
            <summary>
            Returns false. A <see cref="T:Mindscape.WpfDiagramming.TitleNode"/> can not receive any connections.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDataTemplateMatcher">
            <summary>
            Maps a selection criterion to a <see cref="T:System.Windows.DataTemplate"/> in a
            <see cref="T:Mindscape.WpfDiagramming.Foundation.MatchingTemplateSelector"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDataTemplateMatcher.Matches(System.Object)">
            <summary>
            Tests whether an object matches the criterion for the <see cref="T:System.Windows.DataTemplate"/>.
            </summary>
            <param name="item">The object to be tested.</param>
            <returns>true if the object matches the criterion; otherwise false.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDataTemplateMatcher.Template">
            <summary>
            Gets the <see cref="T:System.Windows.DataTemplate"/> to be used for objects that meet this criterion.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRelocator">
            <summary>
            Provides services for relocating an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to a different source
            or/and destination <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRelocator.RelocateConnection(Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo)">
            <summary>
            Relocates the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to have the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> objects
            as its new source and destination. Note that one of the given connection points may be the same as the current
            source or destination of the connection.
            </summary>
            <param name="info"><see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo"/> holding information about the connection relocation that is to be performed.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRelocator.CanRelocateConnection(Mindscape.WpfDiagramming.Foundation.IDiagramModel,Mindscape.WpfDiagramming.Foundation.IDiagramConnection,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget)">
            <summary>
            Returns whether or not the connection can be relocated between the given connection point and connectable.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that the connection belongs to.</param>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that is being relocated.</param>
            <param name="connectionPoint">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> that the connection is still attached to.</param>
            <param name="dropTarget">Information about the potential destination that the connection is being relocated to.</param>
            <returns>True if the connection can be relocated, otherwise false.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRemover">
            <summary>
            Provides connection removal services from a diagram model.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRemover.RemoveConnections(Mindscape.WpfDiagramming.Foundation.IDiagramModel,System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.IDiagramConnection})">
            <summary>
            Removes all the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> objects from the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to have connections removed from.</param>
            <param name="connections">The connections to be removed from the model.</param>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramElementFactory">
            <summary>
            Creates <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> objects for custom diagram content.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramElementFactory.CreateElement(System.Object)">
            <summary>
            Creates a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> for the specified diagram model item.
            </summary>
            <param name="diagramItem">The diagram model item.</param>
            <returns>A DiagramElement that can be used to display the specified item.</returns>
            <remarks>The framework will set the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property of
            the newly created DiagramElement; it is not necessary for the factory to do this itself.</remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeRemover">
            <summary>
            Provides node removal services from a diagram model.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramNodeRemover.RemoveNodes(Mindscape.WpfDiagramming.Foundation.IDiagramModel,System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.IDiagramNode})">
            <summary>
            Removes all the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> objects from the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
            <param name="model">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to have nodes removed from.</param>
            <param name="nodes">The nodes to be removed from the model.</param>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramPrintCallback">
            <summary>
            Gets additional elements for printing on a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramPrintDocument"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramPrintCallback.GetBackgroundElements(System.Int32,System.Windows.Size,System.Windows.Point,System.Windows.Size)">
            <summary>
            Gets the elements to be printed in the background (behind the diagram itself).
            </summary>
            <param name="pageIndex">The page index (0-based).</param>
            <param name="pageSize">The total page size.</param>
            <param name="printableOrigin">The top left of the printable area.</param>
            <param name="printableSize">The size of the printable area.</param>
            <returns>A sequence of elements to be printed behind the diagram.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramPrintCallback.GetForegroundElements(System.Int32,System.Windows.Size,System.Windows.Point,System.Windows.Size)">
            <summary>
            Gets the elements to be printed in the foreground (in front of the diagram itself).
            </summary>
            <param name="pageIndex">The page index (0-based).</param>
            <param name="pageSize">The total page size.</param>
            <param name="printableOrigin">The top left of the printable area.</param>
            <param name="printableSize">The size of the printable area.</param>
            <returns>A sequence of elements to be printed in front of the diagram.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ILayout">
            <summary>
            Maps between diagram model bounds and element bounds on a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
            <remarks>Most formatters need not specify an <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayout"/>, in which case they will
            get the default layout, and node bounds will be the same in the model and on the diagram surface.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ILayout.GetDisplayBounds(Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Gets the display rectangle for a node.
            </summary>
            <param name="node">The node for which the display rectangle is required.</param>
            <returns>The display rectangle.</returns>
            <remarks>This operation must be the inverse of <see cref="M:Mindscape.WpfDiagramming.Foundation.ILayout.SetNodeBounds(Mindscape.WpfDiagramming.Foundation.IDiagramNode,System.Windows.Rect)"/>.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ILayout.SetNodeBounds(Mindscape.WpfDiagramming.Foundation.IDiagramNode,System.Windows.Rect)">
            <summary>
            Sets the model bounds for a node, based on its display rectangle.
            </summary>
            <param name="node">The node whose bounds are to be set.</param>
            <param name="displayBounds">The node's display rectangle.</param>
            <remarks>This operation must be the inverse of <see cref="M:Mindscape.WpfDiagramming.Foundation.ILayout.GetDisplayBounds(Mindscape.WpfDiagramming.Foundation.IDiagramNode)"/>.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ILayout.GetDisplayPosition(Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Gets the display position for a connection point.
            </summary>
            <param name="connectionPoint">The connection point for which the display position is required.</param>
            <returns>The display position.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithmInfo">
            <summary>
            Provides additional logic for layout algorithms that may be specific to certain diagram types.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithmInfo.IsIncluded(Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Returns whether or not the given node is to be modified by the layout algorithm.
            This is so certain diagram types can specify that nodes such as comments or titles should be ignored.
            </summary>
            <param name="node">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.</param>
            <returns>True if the given node should be managed by the layout algorithm. False otherwise.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.INotifyCustomPropertyChanged">
            <summary>
            Implementations of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable"/> that introduce additional properties can implement this interface
            allowing such properties to be integrated into the dirty-bit and undo features of a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.INotifyCustomPropertyChanged.CustomPropertyChanged">
            <summary>
            Raised when a custom property is changed.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IPathBuilder">
            <summary>
            Builds a <see cref="T:System.Windows.Media.PathGeometry"/> for a sequence of diagram connection segments.
            </summary>
            <remarks>The IPathBuilder interface allows connections to construct their own visual
            interpretations of the path found by the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPathfinder"/> interface.  The canonical
            example is the <see cref="T:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder"/>, which constructs a path geometry
            with smooth corners from the raw segment specification.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IPathBuilder.BuildPath(System.Collections.ObjectModel.Collection{Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment})">
            <summary>
            Returns a <see cref="T:System.Windows.Media.PathGeometry"/> based on the given connection segment data.
            </summary>
            <param name="segments">The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects making up the connection.</param>
            <returns>A <see cref="T:System.Windows.Media.PathGeometry"/> for the diagram connection.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IPathfinder">
            <summary>
            Determines a path for an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>, specified as a sequence of points.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IPathfinder.FindPath(Mindscape.WpfDiagramming.Foundation.IDiagramConnection,Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Determines a path for the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>. The containing <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>
            is also supplied as context, so that the implementation can plot a path that avoids other nodes or connections.
            The method returns a list of "via points" for the path, beginning with the start point of the connection end
            ending with its end point.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to find a path for.</param>
            <param name="diagram">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> used to obtain other nodes and connections if needed</param>
            <returns>A collection of via points representing the plotted course of the connection, or null
            to indicate that the connection path did not need to be refreshed.</returns>
            <remarks>An implementation may return null to indicate that the connection path did not
            need to be refreshed.</remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator">
            <summary>
            Calculates a position given a rectangle.  This is typically used
            to calculate the position of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/>
            on an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IPositionCalculator.GetPosition(System.Windows.Rect)">
            <summary>
            Calculates a position given a rectangle.
            </summary>
            <param name="bounds">The rectangle.</param>
            <returns>The position.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier">
            <summary>
            Defines how a value should be snapped to a guideline.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier.GetSnappedValue(System.Double)">
            <summary>
            Gets the snapped value of a coordinate.
            </summary>
            <param name="value">The original value of the coordinate.</param>
            <returns>The result of snapping the coordinate.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier.GetGuidelines(System.Double,System.Double)">
            <summary>
            Gets snap positions for drawing guidelines.
            </summary>
            <param name="startValue">A value below which guidelines are not required.</param>
            <param name="endValue">A value above which guidelines are not required.</param>
            <returns>The set of snap values within the given range.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IStyleMatcher">
            <summary>
            Represents a criterion for matching an item to a <see cref="P:Mindscape.WpfDiagramming.Foundation.IStyleMatcher.Style"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IStyleMatcher.Matches(System.Object)">
            <summary>
            Tests whether an object matches the criterion for the <see cref="P:Mindscape.WpfDiagramming.Foundation.IStyleMatcher.Style"/>.
            </summary>
            <param name="item">The object to be tested.</param>
            <returns>true if the object matches the criterion; otherwise false.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IStyleMatcher.Style">
            <summary>
            Gets the <see cref="P:Mindscape.WpfDiagramming.Foundation.IStyleMatcher.Style"/> to be used for objects that meet this criterion.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ForceBasedLayoutAlgorithm">
            <summary>
            A layout algorithm that uses physics equations based on charged particles and springs.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.LayoutAlgorithmBase">
            <summary>
            A base implementation of <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithm"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithm">
            <summary>
            represents an algorithm that can be applied to an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> which will
            reposition the nodes within the diagram into a sutable position.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithm.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Runs the layout algorithm.
            </summary>
            <param name="model">The diagram to be laid out.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithm.Info">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithmInfo"/> used to provide additional diagram specific logic.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.LayoutAlgorithmBase.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            When overridden in a derived class, runs this layout algorithm.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to be laid out.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.LayoutAlgorithmBase.IsIncluded(Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Returns whether or not the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> should be affected by this layout algorithm.
            </summary>
            <param name="node">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.</param>
            <returns>True if the given node should be affected by this layout algorithm. False otherwise.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.LayoutAlgorithmBase.GetStartNodes(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Returns a list of 'start nodes' based on the number of inbound connections on each node.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.</param>
            <returns>A list of start nodes within the given model.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.LayoutAlgorithmBase.Info">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithmInfo"/> used to provide additional diagram specific logic.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ForceBasedLayoutAlgorithm.SetSelectedNode(Mindscape.WpfDiagramming.Foundation.IDiagramModel,Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Notifies the <see cref="T:Mindscape.WpfDiagramming.Foundation.ForceBasedLayoutAlgorithm"/> of the node which is currently selected in the diagram.
            This should be set before calling the <see cref="M:Mindscape.WpfDiagramming.Foundation.ForceBasedLayoutAlgorithm.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)"/> method so that the algorithm
            doesn't affect the node that the user may be dragging.
            </summary>
            <param name="model">The diagram for which the selected node is being set.</param>
            <param name="node">The selected node in the diagram identified by model.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ForceBasedLayoutAlgorithm.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Runs this force based layout algorithm.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to be laid out.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ForceBasedLayoutAlgorithm.Damping">
            <summary>
            Gets or sets the force damping. This should be a value between 0 and 1. Low values produce smooth animations and high values allow for springy animations.
            The default is 0.5
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.CircularLayoutAlgorithm">
            <summary>
            A type of <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithm"/> that arranges the nodes in a circle.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CircularLayoutAlgorithm.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Runs this layout algorithm.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to be laid out.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CircularLayoutAlgorithm.Radius">
            <summary>
            Gets or sets the desired radius of the circle. Setting this to 0 will allow the radius to
            be automatically calculated based on the sizes of the nodes. The default is 0.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.GridLayoutAlgorithm">
            <summary>
            A layout algorithm that takes advantage of the positions and directions of connection points. Lays out all the nodes
            in a grid like pattern based on the structure of the diagram.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.GridLayoutAlgorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.GridLayoutAlgorithm"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.GridLayoutAlgorithm.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Runs this layout algorithm.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to be laid out.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.GridLayoutAlgorithm.HorizontalSpacing">
            <summary>
            Gets or sets the horizontal spacing between the columns of the grid.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.GridLayoutAlgorithm.VerticalSpacing">
            <summary>
            Gets or sets the vertical spacing between the rows of the grid.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.GridLayoutAlgorithm.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset at which to start layout out nodes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.GridLayoutAlgorithm.VerticalOffset">
            <summary>
            Gets or sets the vertical offset at which to start layout out nodes.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.HierarchicalLayoutAlgorithm">
            <summary>
            A layout algorithm that positions nodes in a hierarchical tree like structure.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.HierarchicalLayoutAlgorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.HierarchicalLayoutAlgorithm"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.HierarchicalLayoutAlgorithm.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Runs this layout algorithm.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to be laid out.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.HierarchicalLayoutAlgorithm.HorizontalSpacing">
            <summary>
            Gets or sets the spacing that should be kept between sibling nodes within the same level.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.HierarchicalLayoutAlgorithm.VerticalSpacing">
            <summary>
            Gets or sets the spacing that should be kept between each level of the hierarchical structure.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.HierarchicalLayoutAlgorithm.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset at which to start layout out nodes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.HierarchicalLayoutAlgorithm.VerticalOffset">
            <summary>
            Gets or sets the vertical offset at which to start layout out nodes.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.RandomLayoutAlgorithm">
            <summary>
            A type of <see cref="T:Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithm"/> that simply randomizes all the positions of
            the nodes within an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RandomLayoutAlgorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.RandomLayoutAlgorithm"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RandomLayoutAlgorithm.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Runs this <see cref="T:Mindscape.WpfDiagramming.Foundation.RandomLayoutAlgorithm"/> by simply randomizing all the positions
            of the nodes while keeping them all within the area of the <see cref="P:Mindscape.WpfDiagramming.Foundation.RandomLayoutAlgorithm.DiagramBounds"/>.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to be laid out.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RandomLayoutAlgorithm.DiagramBounds">
            <summary>
            Gets or sets the bounds that this <see cref="T:Mindscape.WpfDiagramming.Foundation.RandomLayoutAlgorithm"/> will keep
            all the nodes within.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm">
            <summary>
            A layout algorithm for createing tree layout patterns. This layout algorithm supports any diagram including diagrams with cycles.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm.Run(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Runs this <see cref="T:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm"/> on the given diagram. /&gt;
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to be laid out.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm.LayerSpacing">
            <summary>
            Gets or sets the desired spacing between layers of the tree layout.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm.NodeSpacing">
            <summary>
            Gets or sets the desired spacing between adjacent nodes in the same layer of the tree layout.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm.MaxDisconnectedAreaWidth">
            <summary>
            Gets the maximum width of the area where disconnected nodes are positioned.
            Disconnected nodes do not have any outbound or inbound connections.
            The disconnected nodes are wrapped to fit within the MaxDisconnectedAreaWidth.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm.LayoutDirection">
            <summary>
            Gets or sets the layout direction of this <see cref="T:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm.LayoutOrientation">
            <summary>
            Gets or sets the orientation of arranging individual trees.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm.StationaryNode">
            <summary>
            Gets or sets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> that will not be affected by this algorithm. All other nodes will be positioned based on this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm.GroupSpacing">
            <summary>
            Gets or sets the spacing put between individual groups of connected nodes.
            If this value is negative, instead of spacing out the groups, adjacent groups will be placed as close together as possible.
            i.e. Nodes from different groups can occupy the same columns/rows if their structures allow them to be nested in that way.
            The default is -1.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.LayoutDirection">
            <summary>
            Specifies the layout direction of a <see cref="T:Mindscape.WpfDiagramming.Foundation.TreeLayoutAlgorithm"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.LayoutDirection.LeftToRight">
            <summary>
            Left to right layout.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.LayoutDirection.RightToLeft">
            <summary>
            Right to left layout.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.LayoutDirection.TopToBottom">
            <summary>
            Top to bottom layout.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.LayoutDirection.BottomToTop">
            <summary>
            Bottom to top layout.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.LayoutOrientation">
            <summary>
            Specifies the orientation of groups of nodes in a layout algorithm.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.LayoutOrientation.Auto">
            <summary>
            The groups of nodes are automatically arranged.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.LayoutOrientation.Horizontal">
            <summary>
            The groups of nodes are arranged horizontally.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.LayoutOrientation.Vertical">
            <summary>
            The groups of nodes are arranged vertically.
            </summary>
        </member>
        <member name="T:Infralution.Licensing.LicenseResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.AuthenticatingTxt">
            <summary>
              Looks up a localized string similar to Authenticating.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.AuthenticationErrorMsg">
             <summary>
               Looks up a localized string similar to An unexpected error occurred while authenticating your license key.  Do you want to authenticate your license by sending  it to us via email or post instead?
            
            Click &quot;No&quot; and then &quot;Install&quot; to try again.
            
            Click &quot;Yes&quot; to save your license to a file.   Send this file to us and we will authenticate and return it, so that you can load it using the &quot;Load License&quot; button.
            
            Error: {0}.
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.AuthenticationErrorTitle">
            <summary>
              Looks up a localized string similar to Authentication Error.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.AuthenticationsExceededMsg">
            <summary>
              Looks up a localized string similar to The number of installations allowed for this license key has been exceeded.   .
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ConfirmUninstallMsg">
            <summary>
              Looks up a localized string similar to Are you sure you want to uninstall the current license?.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ConfirmUninstallTitle">
            <summary>
              Looks up a localized string similar to Confirm License Uninstall.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ConnectionErrorMsg">
             <summary>
               Looks up a localized string similar to Unable to connect to the License Authentication Server via the internet to authenticate your license on this computer. Do you want to authenticate your license by sending  it to us via email or post instead?
            
            Click &quot;No&quot; to fix your internet or firewall settings and then click the &quot;Install&quot; button to try again.
            
            Click &quot;Yes&quot; to save your license to a file.   Send this file to us and we will authenticate and return it, so that you can load it using the &quot;Load License&quot; button..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.EvaluationExpiredMsg">
            <summary>
              Looks up a localized string similar to Your evaluation period has expired.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.EvaluationInvalidMsg">
            <summary>
              Looks up a localized string similar to Your evaluation is no longer valid.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidAuthenticationKeyMsg">
            <summary>
              Looks up a localized string similar to The key ({0}) is not a valid license key for this product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidAuthenticationKeyTitle">
            <summary>
              Looks up a localized string similar to Invalid License Key.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidComputerMsg">
             <summary>
               Looks up a localized string similar to The license is not valid for this computer.  This could be because you have changed the computer name since installing the license.
            
            Licensed Computer: {0}
            This Computer: {1}
            
            You may need to install a new license using the original License Key provided to you when you purchased the product.  .
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidILSFile">
            <summary>
              Looks up a localized string similar to Not a valid License Settings File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidKeyMsg">
            <summary>
              Looks up a localized string similar to The key ({0}) is not a valid license key for this product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidKeyTitle">
            <summary>
              Looks up a localized string similar to Invalid License Key.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidLicenseTitle">
            <summary>
              Looks up a localized string similar to {0} - Invalid License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidProductMsg">
            <summary>
              Looks up a localized string similar to The license is not a valid license for this product ({0}).  It is a license for another product ({1})..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidSignatureMsg">
            <summary>
              Looks up a localized string similar to The license file contents have been modified and the license is no longer valid.  You may need to reinstall the license using the original License Key provided to you when you purchased the product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.LicenseFile">
            <summary>
              Looks up a localized string similar to License.lic.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.LicenseFileFilter">
            <summary>
              Looks up a localized string similar to License Files|*.lic.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.LicenseInstalledTxt">
            <summary>
              Looks up a localized string similar to License Installed.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.LoadLicenseTitle">
            <summary>
              Looks up a localized string similar to Load License from File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.NoLicenseInstalledTxt">
            <summary>
              Looks up a localized string similar to No License Installed.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ReadErrorMsg">
             <summary>
               Looks up a localized string similar to An error ({0}) occurred while reading the license from file ({1}).  
            
            Ensure you have sufficient privileges to read from the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ReadErrorTitle">
            <summary>
              Looks up a localized string similar to Error Reading License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ReadXmlErrorMsg">
            <summary>
              Looks up a localized string similar to An unexpected error ({0}) occurred while reading the license. .
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.SaveLicenseTitle">
            <summary>
              Looks up a localized string similar to Save License to File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.UnauthenticatedLicenseMsg">
            <summary>
              Looks up a localized string similar to The license has not been authenticated..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.UninstallErrorMsg">
             <summary>
               Looks up a localized string similar to An error ({0}) occurred while deleting the license file ({1}).  
            
            Ensure you have sufficient privileges to delete the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.UninstallErrorTitle">
            <summary>
              Looks up a localized string similar to Error Uninstalling License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.UnknownProductTxt">
            <summary>
              Looks up a localized string similar to Unknown Product.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.WaitTxt">
            <summary>
              Looks up a localized string similar to Please Wait....
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.WriteErrorMsg">
             <summary>
               Looks up a localized string similar to An error ({0}) occurred while writing the license to file ({1}).  
            
            Ensure you have sufficient privileges to write to the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.WriteErrorTitle">
            <summary>
              Looks up a localized string similar to Error Writing License.
            </summary>
        </member>
        <member name="T:Infralution.Licensing.TextEncoding">
            <summary>
            Defines the types of encoding possible for license keys
            </summary>
        </member>
        <member name="F:Infralution.Licensing.TextEncoding.Hex">
            <summary>
            Keys are encoded using hexadecimal notation (characters 0-9 and A-F)
            </summary>
        </member>
        <member name="F:Infralution.Licensing.TextEncoding.Base32">
            <summary>
            Keys are encoding using base 32 with the following character set (23456789ABCDEFGHJKLMNPQRSTUVWXYZ)
            </summary>
        </member>
        <member name="T:Infralution.Licensing.LicenseUtilities">
            <summary>
            Provides common utility methods for the Infralution Licensing classes
            </summary>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.FormatVBParameters(System.String)">
            <summary>
            Format license parameters nicely for inclusion in VB code
            </summary>
            <param name="licenseParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.FormatCSParameters(System.String)">
            <summary>
            Format license parameters nicely for inclusion in C# code
            </summary>
            <param name="licenseParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.Checksum(System.String)">
            <summary>
            Returns a three character checksum based on the given input string
            </summary>
            <param name="input">The input string to return a checksum for</param>
            <returns>An checksum that can be used to validate the given input string</returns>
            <remarks>
            <para>
            This function can be used to generate a short checksum that can be embedded in a
            license key as <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/>.  This allows you to tie 
            the license key to information supplied by the user (for instance the name of the 
            purchaser) without having to include the full information in the license key.  
            This enables license keys to be kept reasonably short.
            </para>
            <para>
            When the license is checked by the application it performs a checksum on the information
            supplied by the user and checks that it matches the information in the ProductInfo that
            was generated when the license was issued.   The License Tracker application provides
            support for "CustomGenerators" which allow you provide the code to generate the ProductInfo
            from customer and other information.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.Strip(System.String,System.String)">
            <summary>
            Return the given input string stripped of the given characters
            </summary>
            <param name="value">The string to strip</param>
            <param name="characters">The characters to strip from the string</param>
            <returns>The input string with the given characters removed</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ReadElementBase64(System.Xml.XmlReader)">
            <summary>
            Read a Base64 string from an XmlReader into a byte array
            </summary>
            <param name="reader">The XmlReader to read from</param>
            <returns>The byte data for the given element</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ReadElementBase64(System.Xml.XmlReader,System.String)">
            <summary>
            Read a Base64 string from an XmlReader into a byte array
            </summary>
            <param name="reader">The XmlReader to read from</param>
            <param name="name">The name of the element</param>
            <returns>The byte data for the given element</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.WriteElementBase64(System.Xml.XmlWriter,System.String,System.Byte[])">
            <summary>
            Write a byte array into Base64 string of an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to write to</param>
            <param name="name">The name of the element</param>
            <param name="value">The data to write</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.WriteRSAParameters(System.Security.Cryptography.RSACryptoServiceProvider,System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            Read RSA Parameters for an RSA Provider to an XmlWriter
            </summary>
            <param name="provider">The provider to writer the parameters for</param>
            <param name="writer">The XmlWriter to write to</param>
            <param name="localName">The name of the element</param>
            <param name="includePrivateParameters">Should the private RSA parameters be included</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ReadRSAParameters(System.Security.Cryptography.RSACryptoServiceProvider,System.Xml.XmlReader,System.String)">
            <summary>
            Read RSA Parameters for an RSA Provider from an XmlReader
            </summary>
            <param name="provider">The provider to read the parameters for</param>
            <param name="reader">The XmlReader to read from</param>
            <param name="localName">The name of the element</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ToHex(System.Byte[])">
            <summary>
            Converts a byte array into a hexadecimal representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <returns>Hexadecimal representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.FromHex(System.String)">
            <summary>
            Converts a hexadecimal string into a byte array.
            </summary>
            <param name="hex">The hexadecimal string to convert</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ToBase32(System.Byte[])">
            <summary>
            Converts a byte array into a base 32 representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <returns>Base32 representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.FromBase32(System.String)">
            <summary>
            Converts a base32 string into a byte array.
            </summary>
            <param name="str">The base32 string to convert</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.EncodeToText(System.Byte[],Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a byte array into a text representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>Text representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DecodeFromText(System.String,Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a string into a byte array.
            </summary>
            <param name="text">The text to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.CreateRSACryptoServiceProvider">
            <summary>
            Create an instance of the RSACryptoServiceProvider.
            </summary>
            <returns>An instance of the RSACryptoServiceProvider</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.VerifyData(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[],System.Byte[])">
            <summary>
            Verify the signature for the given data using the given RSA parameters
            </summary>
            <param name="rsaProvider">The RSA Provider to use</param>
            <param name="data">The data to verify</param>
            <param name="signature">The signature for the data</param>
            <returns>True if the data matches the signature</returns>
            <remarks>
            Uses <see cref="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])"/> instead of
            <see cref="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])"/> to workaround bug in standard Microsoft
            <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/> that can cause a lengthy delay.  
            See http://support.microsoft.com/default.aspx?scid=kb;en-us;948080
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.EncryptKeys(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Encrypt the keys of the given symmetric algorithm using an RSA public key 
            </summary>
            <param name="rsaProvider">The RSA provider to use to encrypt the symmetric keys</param>
            <param name="algorithm">The symmetric algorithm</param>
            <returns>String containing the encrypted keys</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DecryptKeys(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Set the Key and IV for the given symmetric algorithm by decrypting the keys from a string 
            </summary>
            <param name="rsaProvider">The RSA provider to use to decrypt the keys</param>
            <param name="algorithm">The symmetric algorithm to set the keys for</param>
            <param name="encryptedKeys">String containing encrypted keys</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.EncryptValues(System.Security.Cryptography.SymmetricAlgorithm,System.Collections.Hashtable)">
            <summary>
            Encrypt a set of key/values using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to encrypt the data</param>
            <param name="values">A hash table containing string key/value pairs</param>
            <returns>The encrypted key/values</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DecryptValues(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Decrypt a set of key/values using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to decrypt the values</param>
            <param name="encryptedValues">The encrypted data</param>
            <returns>A hashtable containing the string key/values</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.EncryptText(System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Encrypt text using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to encrypt the data</param>
            <param name="text">The text to encrypt</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DecryptText(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Decrypt text using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to decrypt the values</param>
            <param name="encryptedData">The encrypted text</param>
            <returns>The decryptedText</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.GetSavedLicenseKey(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieve the license key for the given type from the given DLL/EXE assembly resources
            </summary>
            <param name="assembly">The assembly containing the license resources</param>
            <param name="type">The type to get the license key for</param>
            <returns>The license key if any</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.UninstallLicenseFile(System.String)">
            <summary>
            Uninstall the given license file by deleting it
            </summary>
            <param name="path">The full file path</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ShowError(System.String,System.String)">
            <summary>
            Display an error to a message box or the trace output
            </summary>
            <param name="title">The title for the error</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DefaultLicenseDirectory(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Return the default directory used to store license files
            </summary>
            <param name="context">The licence context</param>
            <param name="type">The type being licensed</param>
            <returns>The directory to look for license files</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ArraySize(System.Int32)">
            <summary>
            Return the array size to use when declaring an array of the given length.
            </summary>
            <param name="length">The length of the array you are declaring</param>
            <returns>The size to declare the array</returns>
            <remarks>
            This is used to account for the difference between declaring VB and C# arrays and
            permit automatic conversion of the code to VB
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ArrayEqual(System.Byte[],System.Byte[])">
            <summary>
            Are the contents of the two byte arrays equal
            </summary>
            <param name="a1">The first array</param>
            <param name="a2">The second array </param>
            <returns>True if the contents of the arrays is equal</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.Checksum(System.Byte[])">
            <summary>
            Create a checksum for the given block of data
            </summary>
            <param name="data">The block of data to create a checksum for</param>
            <returns>An integer checksum</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.HashString(System.String)">
            <summary>
            Implements a string hashing code algorithm equivalent to the .NET 2003 String.GetHashCode()
            </summary>
            <remarks>
            Microsoft have changed the underlying String.GetHashCode algorithm.  This method provides an
            equivalent compatible method that can be used on all platforms returning the same result.
            </remarks>
            <param name="szStr">The string to get the hash code for</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.GetXmlLines(System.String)">
            <summary>
            Break the given xml fragment into lines
            </summary>
            <param name="xml">The xml fragment</param>
            <returns></returns>
        </member>
        <member name="P:Infralution.Licensing.LicenseUtilities.HandleIOExceptions">
            <summary>
            Should the licensing classes handle exceptions when reading and writing license files
            </summary>
            <remarks>
            Set this to false if you wish to handle these exceptions yourself
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.LicenseUtilities.UseMachineKeyStore">
            <summary>
            Determines whether RSA keys used to verify licenses are stored on a user or machine level
            </summary>
            <remarks>
            Setting this value to true may be useful when impersonating or running under an account 
            whose user profile is not loaded.  ILS will by default use the MachineKeyStore when there
            is no interactive user (ie services and ASP.NET) otherwise it will use the UserKeyStore.
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SnapToIntervalExtension">
            <summary>
            Provides a markup shortcut for specifying a snap line interval.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SnapToIntervalExtension.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.SnapToIntervalExtension"/> class.
            </summary>
            <param name="interval">The interval between snap lines.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SnapToIntervalExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns an <see cref="T:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier"/> reflecting the interval given in the constructor.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>An ISnapSpecifier for the interval given in the constructor.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.BasicDiagramConnectionBase`1">
            <summary>
            Provides a more basic implementation of diagram connections. This class is good for connections that do not support
            connection-mounted-connections, and the source/destination connection points are both the same type.
            </summary>
            <typeparam name="TConnectionPoint"></typeparam>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.BasicDiagramConnectionBase`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.BasicDiagramConnectionBase`1"/> class.
            </summary>
            <param name="fromConnectionPoint">The source of the connection.</param>
            <param name="toConnectionPoint">The destination of the connection.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.BasicDiagramConnectionBase`1.#ctor(`0,`0,System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment})">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.BasicDiagramConnectionBase`1"/> class.
            </summary>
            <param name="fromConnectionPoint">The source of the connection.</param>
            <param name="toConnectionPoint">The destination of the connection.</param>
            <param name="segments">The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects within this <see cref="T:Mindscape.WpfDiagramming.Foundation.BasicDiagramConnectionBase`1"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.BasicDiagramConnectionBase`1.AddConnectionPoint(System.Windows.Point,System.Double)">
            <summary>
            This type of connection does not support
            mounted connection points, and throws NotSupportedException.
            </summary>
            <param name="point">A point used to derive the position of the mounted connection point.</param>
            <param name="buffer">The minimum distance away from the connection corners that the mounted point can be placed.</param>
            <returns>Throws NotSupportedException.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.BasicDiagramConnectionBase`1.CanReceiveNewConnections">
            <summary>
            Gets whether the connection can be the destination
            of a new incoming connection.
            </summary>
            <remarks>Connections of this type do not support 'connections to connections,'
            and always return false from this property.</remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo">
            <summary>
            Holds information about performing a connection relocation action.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramModel,Mindscape.WpfDiagramming.Foundation.IDiagramConnection,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo"/> class.
            The given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> must contain the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> containing the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to be relocated.</param>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to be relocated.</param>
            <param name="newSource">The new source of the connection. This may be the same as the old source.</param>
            <param name="newDestination">The new destination of the connection. This may be the same as the old destination.</param>
            <param name="oldSource">The old source of the connection before starting the relocation.</param>
            <param name="oldDestination">The old destination of the connection before starting the relocation.</param>
            <param name="dropTarget">Information about where the connection was dropped.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramModel,Mindscape.WpfDiagramming.Foundation.IDiagramConnection,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo"/> class.
            The given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> must contain the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> containing the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to be relocated.</param>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to be relocated.</param>
            <param name="newSource">The new source of the connection. This may be the same as the old source.</param>
            <param name="newDestination">The new destination of the connection. This may be the same as the old destination.</param>
            <param name="oldSource">The old source of the connection before starting the relocation.</param>
            <param name="oldDestination">The old destination of the connection before starting the relocation.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.Model">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> containing the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that is being relocated.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.Connection">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that is being relocated.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.NewSource">
            <summary>
            Gets the requested new source of the connection. This will be the same as the old source if the source end of the connection
            is not being relocated.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.NewDestination">
            <summary>
            Gets the requested new destination of the connection. This will be the same as the old destination if the destination
            end of the connection is not being relocated.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.OldSource">
            <summary>
            Gets the old source of the connection before the connection relocation action began.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.OldDestination">
            <summary>
            Gets the old destination of the connection before the connection relocation action began.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo.DropTarget">
            <summary>
            Gets the connection drop target information about where the connection was dropped.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRelocator">
            <summary>
            Provides standard implementation of relocating an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRelocator.Instance">
            <summary>
            Gets an instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRelocator"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRelocator.RelocateConnection(Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo)">
            <summary>
            Relocates the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to have the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> objects
            as its new source and destination. Note that one of the given connection points may be the same as the current
            source or destination of the connection.
            </summary>
            <param name="info"><see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionRelocationInfo"/> holding information about the connection relocation that is to be performed.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRelocator.CanRelocateConnection(Mindscape.WpfDiagramming.Foundation.IDiagramModel,Mindscape.WpfDiagramming.Foundation.IDiagramConnection,Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint,Mindscape.WpfDiagramming.Foundation.ConnectionDropTarget)">
            <summary>
            Returns whether or not the given connection can be relocated between the given connection point and connectable.
            This implementation always returns true.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> that the connection belongs to.</param>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> being relocated.</param>
            <param name="connectionPoint">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> that the connection is still attached to.</param>
            <param name="dropTarget">Information about the potential destination that the connection is being relocated to.</param>
            <returns>True.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRemover">
            <summary>
            Provides the standard implementation for removing connections from a diagram.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRemover.Instance">
            <summary>
            Gets an instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRemover"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DefaultDiagramConnectionRemover.RemoveConnections(Mindscape.WpfDiagramming.Foundation.IDiagramModel,System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.IDiagramConnection})">
            <summary>
            Removes the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> objects from the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to have connections removed from.</param>
            <param name="connections">The connections to be removed from the model.</param>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DefaultDiagramNodeRemover">
            <summary>
            Provides the standard implementation of removing nodes from a diagram model.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DefaultDiagramNodeRemover.Instance">
            <summary>
            Gets an instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DefaultDiagramNodeRemover"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DefaultDiagramNodeRemover.RemoveNodes(Mindscape.WpfDiagramming.Foundation.IDiagramModel,System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.IDiagramNode})">
            <summary>
            Removes the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> objects from the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/>.
            </summary>
            <param name="model">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to have nodes removed from.</param>
            <param name="nodes">The nodes to be removed from the model.</param>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DefaultLayout">
            <summary>
            Maps between diagram model bounds and element bounds on a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
            <remarks>This layout is used by default.  Use an alternate layout only if you are creating a
            visual style in which nodes display content outside the bounds specified in the model.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DefaultLayout.GetDisplayBounds(Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Gets the display rectangle for a node.
            </summary>
            <param name="node">The node for which the display rectangle is required.</param>
            <returns>The display rectangle.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DefaultLayout.SetNodeBounds(Mindscape.WpfDiagramming.Foundation.IDiagramNode,System.Windows.Rect)">
            <summary>
            Sets the model bounds for a node, based on its display rectangle.
            </summary>
            <param name="node">The node whose bounds are to be set.</param>
            <param name="displayBounds">The node's display rectangle.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DefaultLayout.GetDisplayPosition(Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Gets the display position for a connection point.
            </summary>
            <param name="connectionPoint">The connection point for which the display position is required.</param>
            <returns>The display position.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DefaultLayout.Instance">
            <summary>
            A singleton instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DefaultLayout"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionCollection`1">
            <summary>
            A type of ObservableCollection that holds <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> objects and allows
            for cascading removal of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> objects that have other
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> objects attached to them. A DiagramConnectionCollection uses the
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionRemover"/> found in the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> passed into the constructor
            to delete the cascading connections from that model.
            </summary>
            <typeparam name="TConnection">The type of connection in the collection.</typeparam>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionCollection`1.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Instantiates a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionCollection`1"/> class.
            </summary>
            <param name="model">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to remove connections from if cascading deletion of connections occur.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> in this DiagramConnectionCollection found at the
            given index, and then recursively removes any <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> objects that are connected to the
            one that was removed.
            </summary>
            <param name="index">The index at which to remove a <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> from this DiagramConnectionCollection.</param>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramGrid">
            <summary>
            A data structure that can be filled with a diagram and provides fast collision detection.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramGrid.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramGrid"/> class.
            </summary>
            <param name="diagram">The diagram for which fast collision detection is required.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramGrid.Fill(Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Fills this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramGrid"/> with the given diagram.
            </summary>
            <param name="diagram">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> to fill this grid.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramGrid.HasIntersection(System.Windows.Point)">
            <summary>
            Returns whether or not the given <see cref="T:System.Windows.Point"/> intersects the bounds of a node in the diagram.
            </summary>
            <param name="point">A <see cref="T:System.Windows.Point"/> used to query an intersection.</param>
            <returns>True if the given <see cref="T:System.Windows.Point"/> intersects a diagram node. False otherwise.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramGrid.HasIntersection(System.Windows.Point,System.Collections.Generic.HashSet{Mindscape.WpfDiagramming.Foundation.IDiagramNode})">
            <summary>
            Returns whether or not the given <see cref="T:System.Windows.Point"/> intersects the bounds of a node in the diagram.
            </summary>
            <param name="point">A <see cref="T:System.Windows.Point"/> used to query an intersection.</param>
            <param name="ignoredNodes">The nodes to be ignored during collision detection. For example, parent nodes.</param>
            <returns>True if the given <see cref="T:System.Windows.Point"/> intersects a diagram node. False otherwise.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramGrid.GetItems(System.Windows.Rect)">
            <summary>
            Returns all the diagram items within the given rectangle bounds.
            </summary>
            <param name="rect">The rectangle bounds to check.</param>
            <returns>All the diagram items within or partially within the given rectangle.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramGrid.GetConnections(System.Windows.Rect)">
            <summary>
            Returns all the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> items within the given rectangle.
            </summary>
            <param name="rect">The rectangle bounds to check.</param>
            <returns>All the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> items within or intersecting with the given rectangle.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramGrid.Contains(Mindscape.WpfDiagramming.Foundation.IDiagramNode,System.Windows.Rect)">
            <summary>
            Returns whether or not the given node is visible in the given rectangle.
            </summary>
            <param name="node">The node to check.</param>
            <param name="rect">The rectangular bounds.</param>
            <returns>True if the node is visible within the rectangle. False otherwise.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramGrid.Contains(Mindscape.WpfDiagramming.Foundation.IDiagramConnection,System.Windows.Rect)">
            <summary>
            Returns whether or not the given connection is visible in the given rectangle.
            </summary>
            <param name="connection">The connection to check.</param>
            <param name="rect">The rectangular bounds.</param>
            <returns>True if the connection is visible within the rectangle. False otherwise.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramGrid.Bounds">
            <summary>
            Gets the logical bounds of the diagram.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirectionTemplate">
            <summary>
            Maps a <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirectionTemplate.ConnectionPointDirection"/> to a <see cref="T:System.Windows.DataTemplate"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirectionTemplate.Matches(System.Object)">
            <summary>
            Tests whether an object is a connection point with the specified <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirectionTemplate.ConnectionPointDirection"/>.
            </summary>
            <param name="item">The object to be tested.</param>
            <returns>True if the object matches the criterion; otherwise false.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirectionTemplate.ConnectionPointDirection">
            <summary>
            Gets or sets the <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirectionTemplate.ConnectionPointDirection"/> which this <see cref="T:Mindscape.WpfDiagramming.Foundation.IDataTemplateMatcher"/> matches.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirectionTemplate.Template">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> to be used for connection points with this <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointDirectionTemplate.ConnectionPointDirection"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SnapToIntervalSnapSpecifier">
            <summary>
            Represents an <see cref="T:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier"/> which snaps a coordinate to a
            regular interval.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.SnapToIntervalSnapSpecifier.IntervalProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.SnapToIntervalSnapSpecifier.Interval"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SnapToIntervalSnapSpecifier.GetSnappedValue(System.Double)">
            <summary>
            Gets the snapped value of a coordinate.
            </summary>
            <param name="value">The original value of the coordinate.</param>
            <returns>The result of snapping the coordinate.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SnapToIntervalSnapSpecifier.GetGuidelines(System.Double,System.Double)">
            <summary>
            Gets snap positions for drawing guidelines.
            </summary>
            <param name="startValue">A value below which guidelines are not required.</param>
            <param name="endValue">A value above which guidelines are not required.</param>
            <returns>The set of snap values within the given range.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SnapToIntervalSnapSpecifier.Interval">
            <summary>
            Gets or sets the interval.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.SnapToIntervalSnapSpecifier.IntervalProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.TypeEdgeCalculator">
            <summary>
            Maps a data type and an <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeEdgeCalculator.Edge"/> to an <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeEdgeCalculator.Matches(System.Object)">
            <summary>
            Returns true if the given object matches the criterion of being mapped to the calculator.
            </summary>
            <param name="item">The object to test.</param>
            <returns>True if the given object matches the mapping criterion. False otherwise.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeEdgeCalculator.DataType">
            <summary>
            The data type to which the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> is for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeEdgeCalculator.Edge">
            <summary>
            The <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeEdgeCalculator.Edge"/> of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> that the
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> is for.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeEdgeCalculator.Index">
            <summary>
            Gets or sets the index identifier used for selecting the calculator.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeEdgeCalculator.PositionCalculator">
            <summary>
            The <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> that is mapped to the DataType and Edge properties.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom">
            <summary>
            Provides support for mouse wheel based zooming.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.MouseZoomEvent">
            <summary>
            Identifies the MouseZoom routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.GetScaleFactor(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the scale factor used to translate mouse wheel movement
            into zoom changes.  A high scale factor means a slow zoom; a low scale factor
            means a rapid zoom.
            </summary>
            <param name="obj">The element from which to read the attached property.</param>
            <returns>The value of the ScaleFactor property.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.SetScaleFactor(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the scale factor used to translate mouse wheel movement
            into zoom changes.  A high scale factor means a slow zoom; a low scale factor
            means a rapid zoom.
            </summary>
            <param name="obj">The element from which to read the attached property.</param>
            <param name="value">The value of the ScaleFactor property.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.ScaleFactorProperty">
            <summary>
            Identifies the ScaleFactor attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.GetMinimumZoom(System.Windows.DependencyObject)">
            <summary>
            Gets the minimum zoom level that can be attained through the mouse wheel.
            </summary>
            <param name="obj">The element from which to read the attached property.</param>
            <returns>The value of the MinimumZoom property.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.SetMinimumZoom(System.Windows.DependencyObject,System.Double)">
            <summary>
            Gets the minimum zoom level that can be attained through the mouse wheel.
            </summary>
            <param name="obj">The element from which to read the attached property.</param>
            <param name="value">The value of the MinimumZoom property.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.MinimumZoomProperty">
            <summary>
            Identifies the MinimumZoom attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.GetMaximumZoom(System.Windows.DependencyObject)">
            <summary>
            Gets the maximum zoom level that can be attained through the mouse wheel.
            </summary>
            <param name="obj">The element from which to read the attached property.</param>
            <returns>The value of the MaximumZoom property.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.SetMaximumZoom(System.Windows.DependencyObject,System.Double)">
            <summary>
            Gets the maximum zoom level that can be attained through the mouse wheel.
            </summary>
            <param name="obj">The element from which to read the attached property.</param>
            <param name="value">The value of the MaximumZoom property.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.MaximumZoomProperty">
            <summary>
            Identifies the MaximumZoom attached property.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.MouseZoomEventArgs">
            <summary>
            Provides information about the <see cref="F:Mindscape.WpfDiagramming.Foundation.MouseWheelZoom.MouseZoomEvent"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MouseZoomEventArgs.#ctor(System.Windows.Point,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.MouseZoomEventArgs"/> class.
            </summary>
            <param name="position">The position of the mouse zoom.</param>
            <param name="delta">The mouse wheel delta.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MouseZoomEventArgs.Position">
            <summary>
            Gets the position of the mouse zoom, relative to the zoomable element.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MouseZoomEventArgs.Delta">
            <summary>
            Gets the mouse wheel delta.  This is the raw delta, not converted into a zoom fraction.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment">
            <summary>
            A type of <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> that can be moved by the user.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment">
            <summary>
            A single segment within an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>. <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects have access to
            the next or previous <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> from this themselves allowing them to be chained together.
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects only have a single <see cref="T:System.Windows.Point"/> representing the end point of the segment.
            The start point of the segment is the end point of the previous segment. So the first segment in a chain is only a single point.
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects ensure that there is a bidirectional link between the next and previous
            segments.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> class and sets its end point to be the
            given <see cref="T:System.Windows.Point"/>.
            </summary>
            <param name="end">The end point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> class and sets its end point
            as having the given x and y values.
            </summary>
            <param name="endX">The x value of the end point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>.</param>
            <param name="endY">The y value of the end point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.SetEndPointNoNotify(System.Windows.Point)">
            <summary>
            Just sets the end point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> without raising any property changed events.
            </summary>
            <param name="point">The new end point.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.SetStartPointNoNotify(System.Windows.Point)">
            <summary>
            Just sets the start point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> to be the given point without raising
            any property changed events. If the previous segment is null, then the end point of this segment will be set to
            be the given point instead.
            </summary>
            <param name="point">the new start point</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.Clone">
            <summary>
            Returns a deep clone of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>.
            </summary>
            <returns>A deep clone of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.ShallowClone">
            <summary>
            Returns a shallow copy of just this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>.
            </summary>
            <returns>A shallow copy of just this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.GetClosestPointTo(System.Windows.Point,System.Double)">
            <summary>
            Returns the <see cref="T:System.Windows.Point"/> that lies on this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> that is the closest
            point to the given one. The returned <see cref="T:System.Windows.Point"/> will have integer precision values.
            </summary>
            <param name="point">some <see cref="T:System.Windows.Point"/>.</param>
            <param name="buffer">The region from each end of this segment where a connection mounted connection point can not be situated.</param>
            <returns>The closest point on this segment to the given point.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.RecalculateLayoutProperties">
            <summary>
            Calculates and sets the appropriate values for the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.Midpoint"/>, <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.IsHorizontal"/>,
            and <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.IsVertical"/> properties.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.Connection">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that the segment belongs to.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.NextSegment">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> that comes next in a chain of segments.
            Setting this property also makes sure that the previous segment of the set one is set to
            be this segment.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.PreviousSegment">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> that comes previously before this one
            in a chain of segments. Setting this property alse makes sure that the next segment of the set one
            is set to be this segment.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.EndPoint">
            <summary>
            Gets or sets the end point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>. Note that this value is also used for the start
            point of the next segment to this one.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.StartPoint">
            <summary>
            Gets or sets the end point of the previous <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> to this one.
            If this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> does not have a previous segment, then the start
            point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> is its end point.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.Midpoint">
            <summary>
            Gets the midpoint of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.IsHorizontal">
            <summary>
            Gets whether the segment is horizontal.
            A <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> is horizontal if the y values of the start and end points are both the same.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.IsVertical">
            <summary>
            Gets the whether the segment is vertical.
            A <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> is vertical if the x values of the start and end points are both the same.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.Length">
            <summary>
            Returns the length of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> in double precision/&gt;
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment.PropertyChanged">
            <summary>
            Raised when a property changes.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> class with the given end point.
            </summary>
            <param name="endpoint">The end point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> class with the end point made from the given x and y values.
            </summary>
            <param name="endX">The x value of the end point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/>.</param>
            <param name="endY">The y value of the end point of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment.MoveHorizontally(System.Double)">
            <summary>
            Changes the x value of the start and end points of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> by
            the given value.
            </summary>
            <param name="delta">The amount to move this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> horizontally by.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment.MoveVertically(System.Double)">
            <summary>
            Changes the y value of the start and end points of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> by
            the given value.
            </summary>
            <param name="delta">The amount to move this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> vertically by.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment.SetHorizontal(System.Double)">
            <summary>
            Sets the y value of the start and end points to be the given value thus making this
            <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> horizontal.
            </summary>
            <param name="axisY">The new y value of the start and end points of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment.SetVertical(System.Double)">
            <summary>
            Sets the x value of the start and end points to be the given value thus making this
            <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> vertical.
            </summary>
            <param name="axisX">The new x value of the start and end points of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment.ShallowClone">
            <summary>
            Returns a shallow clone of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/>.
            </summary>
            <returns>A shallow clone of this <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/>.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder">
            <summary>
            Constructs a <see cref="T:System.Windows.Media.PathGeometry"/> from a list of <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects,
            applying curved or bevelled corners.
            </summary>
            <remarks>
            <para>The CorneredPathBuilder softens the corners between adjacent segments, creating curved or bevelled
            corners in the generated geometry according to the <see cref="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.CornerType"/> and <see cref="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.CornerRadius"/>
            properties.</para>
            <para>If displaying an arrowhead on the connection, you may need to set up the <see cref="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.StartOffset"/>,
            <see cref="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.EndOffset"/> and <see cref="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.ArrowLength"/> properties.  The StartOffset and EndOffset
            properties tell the CorneredPathBuilder not to run the path geometry all the way to the end of
            the first or last segment.  This is important for wide connections to prevent them from poking out
            from under the arrow graphic.  The ArrowLength property tells the CorneredPathBuilder the length of
            the arrow so that it does not curve or bevel a corner in such a way as to overlap the arrow.</para>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.PathBuilderBase">
            <summary>
            Provides a standard base implementation of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPathBuilder"/> interface.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.PathBuilderBase.BuildPath(System.Collections.ObjectModel.Collection{Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment})">
            <summary>
            Returns a <see cref="T:System.Windows.Media.PathGeometry"/> based on the given connection segment data.
            </summary>
            <param name="segments">The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects making up the connection.</param>
            <returns>A <see cref="T:System.Windows.Media.PathGeometry"/> for the diagram connection.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.PathBuilderBase.CreateMultiSegmentFigure(System.Collections.ObjectModel.Collection{Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment})">
            <summary>
            When overridden in a derived class, creates the <see cref="T:System.Windows.Media.PathFigure"/> representing
            the path for the specified segments.
            </summary>
            <param name="segments">The connection segments.</param>
            <returns>A PathFigure representing the connection path.</returns>
            <remarks>This method is called only if there are two or more segments.
            Implementations may assume that segments.Count is 2 or greater.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.CreateMultiSegmentFigure(System.Collections.ObjectModel.Collection{Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment})">
            <summary>
            Creates the <see cref="T:System.Windows.Media.PathFigure"/> representing a path for the specified segments.
            </summary>
            <param name="segments">The connection segments.</param>
            <returns>A <see cref="T:System.Windows.Media.PathFigure"/> representing the connection path.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.EndOffset">
            <summary>
            Gets or sets how much to cut off the end of the segment.  This is used when an arrow is displayed on the
            connection, so that a wide path does not show around the sides of the arrow.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.StartOffset">
            <summary>
            Gets or sets how much to cut off the start of the segment.  This is used when an arrow is displayed on the
            connection, so that a wide path does not show around the sides of the arrow.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.CornerRadius">
            <summary>
            Gets or sets the radius of the corners. This specifies how large the curve or bevel of each corner is.
            This value should be less than or equal to the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.SegmentEndBuffer"/>
            property; for optimum visual results, it should be equal to the SegmentEndBuffer.
            </summary>
            <remarks>If CornerRadius is not equal to SegmentEndBuffer, then you may see 'floating' corners on
            connections that are mounted to other connections.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.CornerType">
            <summary>
            Gets or sets the way that this <see cref="T:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder"/> creates the geometries for the corner points
            of a connection path.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.ArrowLength">
            <summary>
            Gets or sets the length of the arrow head. The <see cref="T:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder"/> uses this to suppress
            cornering geometries that would overlap the arrow.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CorneredPathBuilder.IsIntersectionBridgingEnabled">
            <summary>
            Gets or sets whether or not bridges are rendered at segment intersections.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.CornerType">
            <summary>
            Represents the style of a corner.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.CornerType.Bevel">
            <summary>
            A beveled corner type.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.CornerType.Curve">
            <summary>
            A curved corner type.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.AStarPathfinder">
            <summary>
            Determines a path for an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>, using the A* algorithm
            to plot a course which consists of horizontal and vertical segments and avoids
            collisions with other nodes and connections.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.AStarPathfinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.AStarPathfinder"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.AStarPathfinder.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.AStarPathfinder"/> class.
            </summary>
            <param name="connectionSeparation">The desired separation between parallel connection segments. This helps prevent connection overlaps.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.AStarPathfinder.FindPath(Mindscape.WpfDiagramming.Foundation.IDiagramConnection,Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Determines a path for the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to find a path for.</param>
            <param name="diagram">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> used to obtain other nodes and connections if needed</param>
            <returns>A collection of via points representing the plotted course of the connection, or null
            to indicate that the connection path did not need to be refreshed.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.AStarPathfinder.Instance">
            <summary>
            Gets a static instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.AStarPathfinder"/> class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.AStarPathfinder.FallbackPathfinder">
            <summary>
            Gets or sets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IPathfinder"/> to fall back on if the A* algorithm cannot be used.
            </summary>
            <remarks>The fallback pathfinder is used if A* cannot find a path with no collisions, or
            if either end of the connection is mounted to another connection.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.AStarPathfinder.HeuristicFunction">
            <summary>
            Gets or sets the heuristic funtion. The default is the manhattan heuristic function.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ElbowPathfinder">
            <summary>
            Determines a path for an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that consists of
            horizontal and vertical segments, and avoids collisions with the elements which
            it connects.
            </summary>
            <remarks>This pathfinder does not attempt to avoid collisions with other elements
            on the diagram surface.  To route a path without collisions, use <see cref="T:Mindscape.WpfDiagramming.Foundation.AStarPathfinder"/>.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ElbowPathfinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ElbowPathfinder"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ElbowPathfinder.FindPath(Mindscape.WpfDiagramming.Foundation.IDiagramConnection,Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Determines a path for the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            This method returns null if the given connection element does not need to have its path re-configured.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to find a path for.</param>
            <param name="diagram">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> used to obtain other nodes and connections if needed</param>
            <returns>A collection of via points representing the plotted course of the connection, or null
            to indicate that the connection path did not need to be refreshed.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ElbowPathfinder.Instance">
            <summary>
            Gets an instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ElbowPathfinder"/> class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ElbowPathfinder.Spacing">
            <summary>
            Gets or sets the desired spacing between nodes and connections in pixels. The default is 20.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.HeuristicFunctions">
            <summary>
            A static class containing common heuristic functions that can be used by the AStarPathfinder.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.HeuristicFunctions.Manhattan(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the sum of vertical and horizontal differences between the given points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The manhattan heuristic for the given points.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.HeuristicFunctions.Euclidean(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between the given points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The euclidean heuristic for the given points.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.HeuristicFunctions.DistanceMagnitude(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance magnitude between the given points.
            This is the euclidean heuristic raised to a power of 2.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The distance magnitude heuristic for the given points.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.StraightLinePathfinder">
            <summary>
            Determines a path for an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> using a straight line from the
            start to the end of the connection.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.StraightLinePathfinder.FindPath(Mindscape.WpfDiagramming.Foundation.IDiagramConnection,Mindscape.WpfDiagramming.Foundation.IDiagramModel)">
            <summary>
            Determines a path for the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to find a path for.</param>
            <param name="diagram">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramModel"/> used to obtain other nodes and connections if needed</param>
            <returns>A collection of via points representing the plotted course of the connection, or null
            to indicate that the connection path did not need to be refreshed.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.StraightLinePathfinder.Instance">
            <summary>
            Gets an instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.StraightLinePathfinder"/> class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.StraightLinePathfinder.Buffer">
            <summary>
            Gets or sets a length to be added, entering the connection point at right angles, at each end
            of the connection. This is useful if the connection displays arrowheads, as it ensures the arrow
            abuts cleanly to the connected element instead of entering at an angle.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator">
            <summary>
            A type of <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> that calculates the position according to
            factors of the width and height of a bounding rectangle.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator"/> class using
            the specified horizontal and vertical proportional offsets.
            </summary>
            <param name="horizontalFactor">A value typically between 0 and 1 for calculating the x co-ordinate.</param>
            <param name="verticalFactor">A value typically between 0 and 1 for calculating the y co-ordinate.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.GetPosition(System.Windows.Rect)">
            <summary>
            Returns a <see cref="T:System.Windows.Point"/> that is derived from the given <see cref="T:System.Windows.Rect"/> according
            to the values of the XFactor and YFactor properties.
            </summary>
            <param name="bounds">The <see cref="T:System.Windows.Rect"/> used to derive the returned <see cref="T:System.Windows.Point"/>.</param>
            <returns>A <see cref="T:System.Windows.Point"/> whose position is relational to the given <see cref="T:System.Windows.Rect"/> and the XFactor and YFactor properties.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.XFactor">
            <summary>
            Gets or sets a value that is ideally but not restricted to the range of 0-1. This is used
            to find the x position derived from the width of the bounds given to the
            GetPosition(Rect) method.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.YFactor">
            <summary>
            Gets or sets a value that is ideally but not restricted to the range of 0-1. This is used
            to find the y position derived from the height of the bounds given to the
            GetPosition(Rect) method.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.XOffset">
            <summary>
            Gets or sets the offset that contributes to the x value of the position of this
            <see cref="T:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator"/>. This value is added after the <see cref="P:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.XFactor"/>
            has determined the initial x value.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.YOffset">
            <summary>
            Gets or sets the offset that contributes to the y value of the position of this
            <see cref="T:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator"/>. This value is added after the <see cref="P:Mindscape.WpfDiagramming.Foundation.OffsetPositionCalculator.YFactor"/>
            has determined the initial y value.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.PositionCalculators">
            <summary>
            Contains <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> implementations for
            common positions.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.PositionCalculators.TopCenter">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> for the top center of the rectangle.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.PositionCalculators.BottomCenter">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> for the bottom center of the rectangle.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.PositionCalculators.CenterLeft">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> for the center left of the rectangle.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.PositionCalculators.CenterRight">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> for the center right of the rectangle.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.PositionCalculators.Center">
            <summary>
            Gets an <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> for the center of the rectangle.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.RotateThumb">
            <summary>
            A thumb used to rotate diagram nodes.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.RotateThumb.RotatedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.RotateThumb.Rotated"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RotateThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.RotateThumb"/> class.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.RotateThumb.Rotated">
            <summary>
            Occurs when the <see cref="T:Mindscape.WpfDiagramming.Foundation.RotateThumb"/> is used.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.RotatedEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.Foundation.RotateThumb.Rotated"/> event of a
            <see cref="T:Mindscape.WpfDiagramming.Foundation.RotateThumb"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.RotatedEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.RotatedEventArgs"/> class.
            </summary>
            <param name="oldRotation">The previous rotation.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.RotatedEventArgs.OldRotation">
            <summary>
            Gets the previous rotation.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DelegatingDataTemplateSelector">
            <summary>
            Selects a template, falling back to another <see cref="T:System.Windows.Controls.DataTemplateSelector"/> if
            no template is found by this selector.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DelegatingDataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DataTemplate"/> for the item.
            </summary>
            <param name="item">The item for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>A DataTemplate for the item.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DelegatingDataTemplateSelector.SelectTemplateCore(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, gets a <see cref="T:System.Windows.DataTemplate"/> for the item.
            If this method returns null, the item is handed off to the <see cref="P:Mindscape.WpfDiagramming.Foundation.DelegatingDataTemplateSelector.BasedOn"/> <see cref="T:System.Windows.Controls.DataTemplateSelector"/>.
            </summary>
            <param name="item">The item for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>A DataTemplate for the item, or null to delegate to the BasedOn DataTemplateSelector.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DelegatingDataTemplateSelector.BasedOn">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.DataTemplateSelector"/> on which to fall back if no template
            is found by this selector.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.FixedStyleSelector">
            <summary>
            A <see cref="T:System.Windows.Controls.StyleSelector"/> which always selects a fixed <see cref="P:Mindscape.WpfDiagramming.Foundation.FixedStyleSelector.Style"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.FixedStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="P:Mindscape.WpfDiagramming.Foundation.FixedStyleSelector.Style"/> for an item.
            </summary>
            <param name="item">The item for which to select the style.</param>
            <param name="container">The data-bound object.</param>
            <returns>The value of the <see cref="P:Mindscape.WpfDiagramming.Foundation.FixedStyleSelector.Style"/> property.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FixedStyleSelector.Style">
            <summary>
            The <see cref="P:Mindscape.WpfDiagramming.Foundation.FixedStyleSelector.Style"/> to be selected for all inputs.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.FixedTemplateSelector">
            <summary>
            A <see cref="T:System.Windows.Controls.DataTemplateSelector"/> which always selects a fixed <see cref="T:System.Windows.DataTemplate"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.FixedTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DataTemplate"/> for an item.
            </summary>
            <param name="item">The item for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>The value of the <see cref="P:Mindscape.WpfDiagramming.Foundation.FixedTemplateSelector.Template"/> property.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.FixedTemplateSelector.Template">
            <summary>
            The <see cref="T:System.Windows.DataTemplate"/> to be selected for all inputs.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.MatchingTemplateSelector">
            <summary>
            Selects a data template based on a list of match criteria.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MatchingTemplateSelector.SelectTemplateCore(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns the <see cref="T:System.Windows.DataTemplate"/> associated with the first criterion to match the item.
            </summary>
            <param name="item">The item for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>The template from the first matching entry in the <see cref="P:Mindscape.WpfDiagramming.Foundation.MatchingTemplateSelector.Templates"/> list if any; otherwise
            the <see cref="P:Mindscape.WpfDiagramming.Foundation.MatchingTemplateSelector.DefaultTemplate"/>.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MatchingTemplateSelector.DefaultTemplate">
            <summary>
            Gets or sets the default data template.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MatchingTemplateSelector.Templates">
            <summary>
            Gets the list of templates and matching criteria.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.TypeStyleSelector">
            <summary>
            Selects a style based on the type of the object.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.TypeStyleSelectorBase">
            <summary>
            selects a style based on a type.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeStyleSelectorBase.GetSelectionType(System.Object)">
            <summary>
            When overridden in a derived class, gets the type to be used in selecting a
            style for an item.
            </summary>
            <param name="item">The item for which to obtain a data type.</param>
            <returns>The data type for the item.</returns>
            <remarks>Implementations should return null to request fall-through to the
            default template.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeStyleSelectorBase.SelectStyleCore(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DataTemplate"/> according to the type of the item.
            </summary>
            <param name="item">The item for which to select the style.</param>
            <param name="container">The data-bound object.</param>
            <returns>The style from the <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeStyleSelectorBase.TypeStyles"/> list if one matches; otherwise
            the <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeStyleSelectorBase.DefaultStyle"/>.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeStyleSelectorBase.DefaultStyle">
            <summary>
            Gets or sets the default style.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeStyleSelectorBase.TypeStyles">
            <summary>
            Gets the list of type-specific styles.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeStyleSelector.GetSelectionType(System.Object)">
            <summary>
            Gets the type to be used in selecting a template for an item, being
            the CLR type of the object itself.
            </summary>
            <param name="item">The item for which to obtain a data type.</param>
            <returns>The data type for the item.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SnapLineDisplayMode">
            <summary>
            Controls how a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> displays snap lines.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.SnapLineDisplayMode.None">
            <summary>
            Snap lines are not displayed.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.SnapLineDisplayMode.Intersection">
            <summary>
            The intersections of snap lines are displayed.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.SnapLineDisplayMode.Line">
            <summary>
            Snap lines are displayed as lines.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ToolThumb">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.Primitives.Thumb"/> that, in addition to being dragged,
            can be clicked to "charge" the cursor.
            </summary>
            <remarks>This control is used in the implementation of diagram tools
            and is not intended for use outside that context.</remarks>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ToolThumb.ToolDroppedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.ToolThumb.ToolDropped"/> routed event.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ToolThumb.QueryDropPositionEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.ToolThumb.QueryDropPosition"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ToolThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ToolThumb.IsSquareSizingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ToolThumb.IsSquareSizing"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ToolThumb.CursorVisualProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ToolThumb.CursorVisual"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ToolThumb.AllowToolDragProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ToolThumb.AllowToolDrag"/> property.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.ToolThumb.ToolDropped">
            <summary>
            Occurs when a user drags the tool across an area using a charged cursor.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.ToolThumb.QueryDropPosition">
            <summary>
            Occurs when QueryDropPosition happens.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ToolThumb.IsSquareSizing">
            <summary>
            Gets or sets whether or not this <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/> is in 'square sizing mode'.
            In square sizing mode, Dragging a charged tool on a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> will change
            the width and height of the cursor visual by the same amounts.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.ToolThumb.IsSquareSizingProperty"/></td></tr>
              <tr><td>Metadata properties set to false</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ToolThumb.CursorVisual">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Visual"/> displayed while dragging or when
            the cursor is charged.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.ToolThumb.CursorVisualProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ToolThumb.AllowToolDrag">
            <summary>
            Gets or sets whether the tool may be dragged.  If this is false, the tool
            may be used only by selecting it, and then clicking or click-dragging.
            The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.ToolThumb.AllowToolDragProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ToolDroppedEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.Foundation.ToolThumb.ToolDropped"/> event
            of a <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/> control.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ToolDroppedEventArgs.#ctor(System.Windows.IInputElement,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolDroppedEventArgs"/> class.
            </summary>
            <param name="droppedOn">The element on which the tool is being dropped.</param>
            <param name="left">The x-coordinate of the drop bounds.</param>
            <param name="top">The y-coordinate of the drop bounds.</param>
            <param name="width">The width of the drop bounds.</param>
            <param name="height">The height of the drop bounds.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ToolDroppedEventArgs.#ctor(System.Windows.IInputElement,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolDroppedEventArgs"/> class.
            </summary>
            <param name="droppedOn">The element on which the tool was dropped.</param>
            <param name="bounds">The bounds of the drop, in thumb coordinates.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ToolDroppedEventArgs.Bounds">
            <summary>
            Gets the bounds of the drop, in thumb coordinates.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ToolDroppedEventArgs.DroppedOn">
            <summary>
            Gets the element on which the tool was dropped.  In the case of a drag-size,
            this is the element where the drag-size began.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.Foundation.ToolThumb.QueryDropPosition"/> event of a
            <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs.#ctor(System.Windows.IInputElement,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs"/> class.
            </summary>
            <param name="inputElement">The <see cref="T:System.Windows.IInputElement"/> of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/>.</param>
            <param name="bounds">The actual bounds of the <see cref="T:System.Windows.IInputElement"/> of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs.#ctor(System.Windows.IInputElement,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs"/> class.
            </summary>
            <param name="inputElement">The <see cref="T:System.Windows.IInputElement"/> of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/>.</param>
            <param name="positionX">The x position of the left edge of the actual bounds.</param>
            <param name="positionY">The y position of the top edge of the actual bounds.</param>
            <param name="width">The width of the actual bounds.</param>
            <param name="height">The height of the actual bounds.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs.#ctor(System.Windows.IInputElement,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs"/> class.
            This constructor sets the width and height of the actual bounds to be 0.
            </summary>
            <param name="inputElement">The <see cref="T:System.Windows.IInputElement"/> of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/>.</param>
            <param name="positionX">The x position of the left edge of the actual bounds.</param>
            <param name="positionY">The y position of the top edge of the actual bounds.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs.#ctor(System.Windows.IInputElement,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs"/> class.
            </summary>
            <param name="inputElement">The <see cref="T:System.Windows.IInputElement"/> of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/>.</param>
            <param name="pt">The position of the top left corner of the actual bounds.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs.ActualBounds">
            <summary>
            Gets the actual bounds.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs.DesiredBounds">
            <summary>
            Gets or sets the desired bounds.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs.InputElement">
            <summary>
            Gets the <see cref="P:Mindscape.WpfDiagramming.Foundation.QueryDropPositionEventArgs.InputElement"/> of this <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolThumb"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb">
            <summary>
            A control which can be dragged to create a connection.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.ConnectionPointProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.ConnectionPoint"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsToConnectionDragOverProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsToConnectionDragOver"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsFromConnectionDragOverProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsFromConnectionDragOver"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsConnectionDragOverProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsConnectionDragOver"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.ConnectionPoint">
            <summary>
            Gets or sets the connection point which the thumb represents.
            This is a dependency property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsToConnectionDragOver">
            <summary>
            Gets whether or not the destination end of a connection is being dragged over the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> of this connection point thumb
            allowing it to be displayed. This is useful for connection point validation UI.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsToConnectionDragOverProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsFromConnectionDragOver">
            <summary>
            Gets whether or not the source end of a connection is being dragged over the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> of this connection point thumb
            allowing it to be displayed. This is useful for connection point validation UI.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsFromConnectionDragOverProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsConnectionDragOver">
            <summary>
            Gets whether or not a connection is being dragged over this <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb.IsConnectionDragOverProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.CursorActionTypeConverter">
            <summary>
            Converts a <see cref="T:Mindscape.WpfDiagramming.Foundation.CursorAction"/> to a <see cref="T:Mindscape.WpfDiagramming.Foundation.CursorActionType"/> in
            a null-safe manner.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CursorActionTypeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:Mindscape.WpfDiagramming.Foundation.CursorAction"/> to a <see cref="T:Mindscape.WpfDiagramming.Foundation.CursorActionType"/> in
            a null-safe manner.
            </summary>
            <param name="value">The CursorAction.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A CursorActionType suitable for use by the binding target.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CursorActionTypeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.CursorActionType">
            <summary>
            Specifies the type of operation represented by a <see cref="T:Mindscape.WpfDiagramming.Foundation.CursorAction"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.CursorActionType.Default">
            <summary>
            The CursorAction performs the default operation.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.CursorActionType.CreateNode">
            <summary>
            The CursorAction creates diagram nodes.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.CursorActionType.CreateConnection">
            <summary>
            The CursorAction creates diagram connections.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.CursorAction">
            <summary>
            Represents an action associated with the cursor, such as a "charged cursor"
            for click-and-drop interaction.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CursorAction.GetCurrent(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <b>Current</b> attached property for an object.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>The object's Current property value.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CursorAction.SetCurrent(System.Windows.DependencyObject,Mindscape.WpfDiagramming.Foundation.CursorAction)">
            <summary>
            Sets the value of the <b>Current</b> attached property for an object.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.CursorAction.CurrentProperty">
            <summary>
            Gets or sets the action associated with the cursor when it is over a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.CursorAction.Default">
            <summary>
            Gets the default cursor action (marquee select).
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CursorAction.Execute(Mindscape.WpfDiagramming.DiagramSurface,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Executes the cursor action.  This is typically called when the mouse is released after
            a click or press-and-drag action.
            </summary>
            <param name="surface">The <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> on which to execute the action.</param>
            <param name="eventArgs">The event data associated with the mouse action.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CursorAction.ExecuteCore(Mindscape.WpfDiagramming.DiagramSurface,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            When overridden in a derived class, executes the cursor action.
            </summary>
            <param name="surface">The <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> on which to execute the action.</param>
            <param name="eventArgs">The event data associated with the mouse action.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CursorAction.Discharge">
            <summary>
            Disassociates the cursor action from the cursor.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CursorAction.CursorActionType">
            <summary>
            Gets the type of operation performed by this <see cref="T:Mindscape.WpfDiagramming.Foundation.CursorAction"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DefaultCursorAction">
            <summary>
            Represents the default cursor action (when no toolbox item is selected).
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DefaultCursorAction.ExecuteCore(Mindscape.WpfDiagramming.DiagramSurface,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Executes the cursor action.
            </summary>
            <param name="surface">The <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> on which to execute the action.</param>
            <param name="eventArgs">The event data associated with the mouse action.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DefaultCursorAction.CursorActionType">
            <summary>
            Gets the type of operation performed by this <see cref="T:Mindscape.WpfDiagramming.Foundation.CursorAction"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ToolCursorAction`1">
            <summary>
            Represents the cursor action when a toolbox item is selected.
            </summary>
            <typeparam name="TTool">The type of tool selected.</typeparam>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ToolCursorAction`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.ToolCursorAction`1"/> class.
            </summary>
            <param name="tool">The tool associated with the cursor action.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ToolCursorAction`1.Discharge">
            <summary>
            Disassociates the toolbox item from the cursor.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.ToolCursorAction`1.Tool">
            <summary>
            Gets the tool associated with the cursor action.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.CreateConnectionCursorAction">
            <summary>
            Represents the cursor action to create a connection using a "connection" toolbox item.
            This action is typically used only when a diagram contains multiple types of
            connection -- for example, an entity diagram which contains both inheritance and
            association relationships.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CreateConnectionCursorAction.#ctor(Mindscape.WpfDiagramming.DiagramConnectionTool)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.CreateConnectionCursorAction"/> class.
            </summary>
            <param name="tool">The <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/> associated with the cursor action.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.CreateConnectionCursorAction.ExecuteCore(Mindscape.WpfDiagramming.DiagramSurface,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Executes the cursor action.
            </summary>
            <param name="surface">The <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> on which to execute the action.</param>
            <param name="eventArgs">The event data associated with the mouse action.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.CreateConnectionCursorAction.CursorActionType">
            <summary>
            Gets the type of operation performed by this <see cref="T:Mindscape.WpfDiagramming.Foundation.CursorAction"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement">
            <summary>
            Represents a connection between two <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> elements.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramElement">
            <summary>
            Represents a visual element in a diagram (a node or connection).
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse is pressed over this element.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.MoveBy(System.Double,System.Double)">
            <summary>
            Moves the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> by the specified amounts.  Diagram elements
            which are not independently positioned will ignore this call.
            </summary>
            <param name="horizontalChange">The amount to move horizontally.</param>
            <param name="verticalChange">The amount to move vertically.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.OnMoveBy(System.Double,System.Double)">
            <summary>
            When overridden in a derived class, implements the <see cref="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.MoveBy(System.Double,System.Double)"/> method.
            </summary>
            <param name="horizontalChange">The amount to move horizontally.</param>
            <param name="verticalChange">The amount to move vertically.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.OnApplyFormatting(Mindscape.WpfDiagramming.DiagramSurface)">
            <summary>
            When overridden in a derived class, applies additional formatting beyond the
            template and style selectors.
            </summary>
            <param name="formattingSource">The <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> on which 
            the element is displayed.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.GetStyleSelector(Mindscape.WpfDiagramming.Foundation.IDiagramFormatter)">
            <summary>
            When overridden in a derived class, gets the <see cref="T:System.Windows.Controls.StyleSelector"/>
            applicable to this type of element.
            </summary>
            <param name="formatter">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter"/> from which to retrieve the selector.</param>
            <returns>The StyleSelector to be used for this type of <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.OnConnectionDragEnter(System.Nullable{System.Windows.Point},Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Called when a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb"/> is being dragged
            over the element.
            </summary>
            <param name="mousePoint">The mouse location of the dragged thumb.</param>
            <param name="source">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> that is the source of the moving connection.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.OnConnectionDragLeave">
            <summary>
            Called when a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb"/> that was being
            dragged over the element is dragged away from the element.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramElement.ConnectionPointTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramElement.ConnectionPointTemplateSelector"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramElement.Bounds">
            <summary>
            Gets the bounds of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramElement.ConnectionPointTemplateSelector">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.DataTemplateSelector"/> used to select the template
            for connection points.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramElement.ConnectionPointTemplateSelectorProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ContentControl.Content"/> changes.
            </summary>
            <param name="oldContent">The old form of the Content property.</param>
            <param name="newContent">The new form of the Content property.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.LeftProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Left"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RightProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Left"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.BottomProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Bottom"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.TopProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Top"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.FromConnectionPointProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.FromConnectionPoint"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ToConnectionPointProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ToConnectionPoint"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ConnectionProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Connection"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ConnectionContentTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ConnectionContentTemplateSelector"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.SegmentEndBufferProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.SegmentEndBuffer"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathStyleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathStyle"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.EndArrowTemplateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.EndArrowTemplate"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.StartArrowTemplateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.StartArrowTemplate"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathBuilderProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathBuilder"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathGeometryProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathGeometry"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.OnApplyFormatting(Mindscape.WpfDiagramming.DiagramSurface)">
            <summary>
            Applies additional formatting beyond the template and style selectors.
            </summary>
            <param name="formattingSource">The <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> on which 
            the element is displayed.</param>
            <remarks>For the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> this method is used to apply
            pathfinding, using the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPathfinder"/> specified on the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter"/>,
            or a <see cref="T:Mindscape.WpfDiagramming.Foundation.ElbowPathfinder"/> if no IPathfinder is specified.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse moves over this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse leaves this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.SetRequestedConnectionPoint(System.Nullable{System.Windows.Point})">
            <summary>
            Sets the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RequestedConnectionPoint"/> property to be a point on one of the
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> that is
            closest to the given <see cref="T:System.Windows.Point"/>. The actual value that is set is then returned.
            </summary>
            <param name="point">A <see cref="T:System.Windows.Point"/> used to derive the value for the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RequestedConnectionPoint"/> property.</param>
            <returns>The value that is set to the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RequestedConnectionPoint"/> property.</returns>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RequestedConnectionPointProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RequestedConnectionPoint"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.IsRequestingConnectionPointProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.IsRequestingConnectionPoint"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.OnMoveBy(System.Double,System.Double)">
            <summary>
            Implements the <see cref="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.MoveBy(System.Double,System.Double)"/> method.  This is a no-op for
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> because connections are not independently
            positioned.
            </summary>
            <param name="horizontalChange">The amount to move horizontally.</param>
            <param name="verticalChange">The amount to move vertically.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.GetStyleSelector(Mindscape.WpfDiagramming.Foundation.IDiagramFormatter)">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.StyleSelector"/>
            applicable to this type of element.
            </summary>
            <param name="formatter">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter"/> from which to retrieve the selector.</param>
            <returns>The StyleSelector to be used for this type of <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.OnConnectionDragEnter(System.Nullable{System.Windows.Point},Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Called when a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb"/> is being dragged
            over the element.
            </summary>
            <param name="mousePoint">The mouse location of the dragged thumb.</param>
            <param name="source">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> that is the source of the moving connection.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.OnConnectionDragLeave">
            <summary>
            Called when a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb"/> that was being
            dragged over the element is dragged away from the element.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Left">
            <summary>
            Gets the the horizontal offset of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> from 
            the left hand side of the diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.LeftProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Right">
            <summary>
            Gets the the horizontal offset of the right hand side of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> from 
            the left hand side of the diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RightProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Bottom">
            <summary>
            Gets the the vertical offset of the bottom of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> from 
            the top of the diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.BottomProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Top">
            <summary>
            Gets the the vertical offset of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> from 
            the top of the diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.TopProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.FromConnectionPoint">
            <summary>
            Gets or sets the point from which the connection originates.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.FromConnectionPointProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ToConnectionPoint">
            <summary>
            Gets or sets the point to which the connection goes.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ToConnectionPointProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Connection">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> represented by this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ConnectionProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ConnectionContentTemplateSelector">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.DataTemplateSelector"/> used to the select the <see cref="T:System.Windows.DataTemplate"/> for displaying the data within the
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.ConnectionContentTemplateSelectorProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.SegmentEndBuffer">
            <summary>
            Gets or sets the buffer at each end of a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/>
            that can not have an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> attached to it.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.SegmentEndBufferProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style"/> applied to the connection path.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathStyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.EndArrowTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> applied to the end of the connection.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.EndArrowTemplateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.StartArrowTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> applied to the start of the connection..
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.StartArrowTemplateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathBuilder">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IPathBuilder"/> used to create the path geometry for this connection.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathBuilderProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathGeometry">
            <summary>
            Gets the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathGeometry"/> of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.PathGeometryProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.MovableSegments">
            <summary>
            Returns an IList of all the <see cref="T:Mindscape.WpfDiagramming.Foundation.MovableDiagramConnectionSegment"/> objects that make up
            the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> graphically represents.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RequestedConnectionPoint">
            <summary>
            Gets the RequestedConnectionPoint.
            The requested connection point is a point on one of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects of this
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> of which is a potential place for a connection to be connected to.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.RequestedConnectionPointProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.IsRequestingConnectionPoint">
            <summary>
            Gets whether a connection point position is being requested (the user is dragging a connection
            close to this one and the framework wishes to display a potential connection point).
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.IsRequestingConnectionPointProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement.Bounds">
            <summary>
            Gets the bounds of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramConnectionTool">
            <summary>
            Represents a control which, when selected, puts the cursor into
            "draw connection" mode.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramToolboxTool">
            <summary>
            Represents a control which can be dragged from a toolbox onto
            a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> to create new diagram elements.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.IDiagramToolboxTool.ToolScope">
            <summary>
            Gets the containing object within which the tool can be applied.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramConnectionTool.BuilderProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramConnectionTool.Builder"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramConnectionTool.ToolScopeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramConnectionTool.ToolScope"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramConnectionTool.LineStyleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramConnectionTool.LineStyle"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramConnectionTool.ConnectionCursorProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramConnectionTool.ConnectionCursor"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramConnectionTool.OnClick">
            <summary>
            Called whenever a mouse button is pressed over this <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/>.
            This method sets the current cursor action to be a new <see cref="T:Mindscape.WpfDiagramming.Foundation.CreateConnectionCursorAction"/>.
            This method does nothing if the <see cref="P:Mindscape.WpfDiagramming.DiagramConnectionTool.ToolScope"/> property is set to null.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnectionTool.Builder">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionBuilder"/> which takes effect
            when the control is selected.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramConnectionTool.BuilderProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnectionTool.ToolScope">
            <summary>
            Gets or sets the object within which the tool may be applied.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramConnectionTool.ToolScopeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnectionTool.LineStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style"/> applied to the line used to draw the connection
            while the user is dragging the tool.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramConnectionTool.LineStyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnectionTool.ConnectionCursor">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Input.Cursor"/> used to express that the application is in 'add connection' mode.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramConnectionTool.ConnectionCursorProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramConnectionTool.DefaultLineStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the default <see cref="T:System.Windows.Style"/> used for
            drawing connections in progress.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement">
            <summary>
            Represents a node (content element) on a diagram.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.BoundsChangeRequestedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.BoundsChangeRequested"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.SetIsGeometryProvider(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether or not a binding should be made between the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Geometry"/> property of this
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> and the <see cref="P:System.Windows.Shapes.Path.Data"/> property that the IsGeometryProvider
            attached property is attached to.
            </summary>
            <param name="element">The <see cref="T:System.Windows.DependencyObject"/> to set the value to.</param>
            <param name="value">The value to set to the IsGeometryProvider attached property.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.GetIsGeometryProvider(System.Windows.DependencyObject)">
            <summary>
            Gets whether or not a binding should be made between the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Geometry"/> property of this
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> and the <see cref="P:System.Windows.Shapes.Path.Data"/> property that the IsGeometryProvider
            attached property is attached to.
            </summary>
            <param name="element">The <see cref="T:System.Windows.DependencyObject"/> to get the value from.</param>
            <returns>The value of the IsGeometryProvider attached property.</returns>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsGeometryProviderProperty">
            <summary>
            Identifies the IsGeometryProvider property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.SetRaisesBoundsChangeRequested(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether or not the <see cref="T:System.Windows.FrameworkElement"/> that the RaisesBoundsChangeRequested attached property is attached to
            should cause a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> to raise the <see cref="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.BoundsChangeRequested"/> event.
            </summary>
            <param name="element">The <see cref="T:System.Windows.DependencyObject"/> to set the value to.</param>
            <param name="value">The value to set to the RaisesBoundsChangeRequested attached property.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.GetRaisesBoundsChangeRequested(System.Windows.DependencyObject)">
            <summary>
            Gets whether or not the <see cref="T:System.Windows.FrameworkElement"/> that the RaisesBoundsChangeRequested attached property is attached to
            should cause a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> to raise the <see cref="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.BoundsChangeRequested"/> event.
            </summary>
            <param name="element">The <see cref="T:System.Windows.DependencyObject"/> to get the value from.</param>
            <returns>The value of the RaisesBoundsChangeRequested attached property.</returns>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.RaisesBoundsChangeRequestedProperty">
            <summary>
            Identifies the RaisesBoundsChangeRequested property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeTemplateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeTemplate"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsToConnectionDragOverProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsToConnectionDragOver"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsFromConnectionDragOverProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsFromConnectionDragOver"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.ShowConnectionPointControls(Mindscape.WpfDiagramming.Foundation.ConnectionPointShowFlags)">
            <summary>
            Allows connection points to be visible by setting the IsToConnectionDragOver and IsFromConnectionDragOver
            property values.
            </summary>
            <param name="showFlags">States which connection points should be made visible.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.HideConnectionPointControls(Mindscape.WpfDiagramming.Foundation.ConnectionPointShowFlags)">
            <summary>
            Hides connection points by setting the IsToConnectionDragOver and IsFromConnectionDragOver
            property values.
            </summary>
            <param name="showFlags">States which connection points to hide.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.LeftProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Left"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.TopProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Top"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsResizableProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsResizable"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.GeometryProperty">
            <summary>
            Identifies the <see cref="T:System.Windows.Media.PathGeometry"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeContentTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeContentTemplateSelector"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ContentControl.Content"/> changes.
            </summary>
            <param name="oldContent">The old form of the Content property.</param>
            <param name="newContent">The new form of the Content property.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.FindMouseOverConnectionPoint">
            <summary>
            Returns the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> on this node that the mouse is currently over.
            Returns null if the mouse is not currently over any connection point.
            </summary>
            <returns>The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> that the mouse is currently over.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.FindClosestConnectionPoint">
            <summary>
            Returns the closest <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> to the current mouse position.
            </summary>
            <returns>The closest connection point on this element to the current mouse position.</returns>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Node"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.OnMoveBy(System.Double,System.Double)">
            <summary>
            Implements the <see cref="M:Mindscape.WpfDiagramming.Foundation.DiagramElement.MoveBy(System.Double,System.Double)"/> method.
            </summary>
            <param name="horizontalChange">The amount to move horizontally.</param>
            <param name="verticalChange">The amount to move vertically.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.OnApplyFormatting(Mindscape.WpfDiagramming.DiagramSurface)">
            <summary>
            Applies additional formatting beyond the
            template and style selectors.
            </summary>
            <param name="formattingSource">The <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> on which 
            the element is displayed.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.ConnectionPointPositionsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.ConnectionPointPositions"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.GetStyleSelector(Mindscape.WpfDiagramming.Foundation.IDiagramFormatter)">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.StyleSelector"/>
            applicable to this type of element.
            </summary>
            <param name="formatter">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramFormatter"/> from which to retrieve the selector.</param>
            <returns>The StyleSelector to be used for this type of <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.OnConnectionDragEnter(System.Nullable{System.Windows.Point},Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint)">
            <summary>
            Called when a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb"/> is being dragged
            over the element.
            </summary>
            <param name="mousePoint">The mouse location of the dragged thumb.</param>
            <param name="source">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnectionPoint"/> that is the source of the moving connection.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.OnConnectionDragLeave">
            <summary>
            Called when a <see cref="T:Mindscape.WpfDiagramming.Foundation.ConnectionPointThumb"/> that was being
            dragged over the element is dragged away from the element.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.BoundsChangeRequested">
            <summary>
            Occurs whenever a bounds change for this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> is requested.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> used to give shape and color to the node.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeTemplateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsToConnectionDragOver">
            <summary>
            Gets whether or not the mouse is being dragged over this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> allowing
            the inbound connection points to be displayed.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsToConnectionDragOverProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsFromConnectionDragOver">
            <summary>
            Gets whether or not the mouse is being dragged over this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> allowing
            the outbound connection points to be displayed.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsFromConnectionDragOverProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Left">
            <summary>
            Gets or sets the the horizontal offset of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> from 
            the left hand side of the diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.LeftProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Top">
            <summary>
            Gets or sets the the vertical offset of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> from 
            the top of the diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.TopProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsResizable">
            <summary>
            Gets or sets whether the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> can be resized.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.IsResizableProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Geometry">
            <summary>
            Gets or sets the boundary shape of the node.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.GeometryProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeContentTemplateSelector">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.DataTemplateSelector"/> used to the select the <see cref="T:System.Windows.DataTemplate"/> for displaying the data within the
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeContentTemplateSelectorProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Node">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> represented by this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.NodeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.ConnectionPointPositions">
            <summary>
            Gets or sets a collection of <see cref="T:Mindscape.WpfDiagramming.ShapeConnectionPointPosition"/> objects that specify how
            connection points should be positioned on the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.ConnectionPointPositionsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement.Bounds">
            <summary>
            Gets the bounds of this <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs">
            <summary>
            Provides information about the DiagramNodeElement.BoundsChangeRequested
            event of a <see cref="P:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs.DiagramNodeElement"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs.#ctor(Mindscape.WpfDiagramming.Foundation.DiagramNodeElement,System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs"/> class.
            </summary>
            <param name="node">The <see cref="P:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs.DiagramNodeElement"/> that the bounds change is to be applied to.</param>
            <param name="contentElement">The <see cref="T:System.Windows.FrameworkElement"/> that is causing the bounds change request.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs.DiagramNodeElement">
            <summary>
            Gets the <see cref="P:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs.DiagramNodeElement"/> that the bounds change is to be applied to.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs.ContentElement">
            <summary>
            Gets the <see cref="T:System.Windows.FrameworkElement"/> that is causing the bounds change request.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs.Width">
            <summary>
            Gets the actual width of the <see cref="T:System.Windows.FrameworkElement"/> causing the bounds change request.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.BoundsChangeRequestedEventArgs.Height">
            <summary>
            Gets the actual height of the <see cref="T:System.Windows.FrameworkElement"/> causing the bounds change request.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramNodeTool">
            <summary>
            Represents a control which can be dragged from a toolbox onto
            a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> to create new diagram nodes.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramNodeTool.DiagramNodeToolDroppedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.DiagramNodeTool.DiagramNodeToolDropped"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramNodeTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramNodeTool.BuilderProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramNodeTool.Builder"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramNodeTool.ToolScopeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramNodeTool.ToolScope"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramNodeTool.CursorVisualProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramNodeTool.CursorVisual"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramNodeTool.IsDragResizeEnabledProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramNodeTool.IsDragResizeEnabled"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramNodeTool.AllowChargedCursorProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramNodeTool.AllowChargedCursor"/> property.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.DiagramNodeTool.DiagramNodeToolDropped">
            <summary>
            Occurs when a user drags or drops the tool.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNodeTool.Builder">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder"/> which takes effect
            when the control is selected.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramNodeTool.BuilderProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNodeTool.ToolScope">
            <summary>
            Gets or sets the object within which the tool may be applied in a charged-cursor
            scenario.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramNodeTool.ToolScopeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNodeTool.CursorVisual">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Visual"/> displayed while dragging or when
            the cursor is charged.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramNodeTool.CursorVisualProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNodeTool.IsDragResizeEnabled">
            <summary>
            Gets or sets whether this <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/> supports the drag resize feature.
            Drag resizing can be achieved by doing a single mouse click on the tool, and then pressing and dragging the mouse on the diagram surface.
            The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramNodeTool.IsDragResizeEnabledProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNodeTool.AllowChargedCursor">
            <summary>
            Gets or sets whether or not this node tool allows the charged cursor behavior. Charged cursor behavior
            means the user can use a single mouse click to charge the mouse cursor with the node tool. Moving the mouse over
            the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> and then clicking again will create the node. The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramNodeTool.AllowChargedCursorProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramNodeToolDroppedEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.DiagramNodeTool.DiagramNodeToolDropped"/> event
            of a <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/> control.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramNodeToolDroppedEventArgs.#ctor(Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramNodeToolDroppedEventArgs"/> class.
            </summary>
            <param name="builder">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder"/> associated with the dropped tool.</param>
            <param name="bounds">The bounds of the drop, in tool coordinates.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNodeToolDroppedEventArgs.Bounds">
            <summary>
            Gets the bounds of the drop, in thumb coordinates.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNodeToolDroppedEventArgs.Builder">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder"/> associated with the dropped tool.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramNodeToolDroppedEventArgs.UseDefaultSize">
            <summary>
            Gets whether the node should be created with the default size (i.e. the tool
            was dropped) rather than being sized according to the <see cref="P:Mindscape.WpfDiagramming.DiagramNodeToolDroppedEventArgs.Bounds"/> (i.e.
            a click-drag-size).
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.DiagramSurface">
            <summary>
            Represents the surface on which a diagram is displayed.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragCompletedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragCompleted"/> routed event.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragStartedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragStarted"/> routed event.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragDeltaEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragDelta"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.InstallLicense(System.String)">
            <summary>
            Performs manual licensing for specialized deployment scenarios.
            </summary>
            <param name="licenseKey">A runtime license key.</param>
            <remarks>In normal deployment scenarios, the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> control is
            automatically licensed.  Install a license key manually only under advisement
            from Mindscape support.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.OnApplyTemplate">
            <summary>
            Called by the framework when a template is applied to the control.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.IsSmartScrollingEnabledProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.IsSmartScrollingEnabled"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CanConnectToConnectionsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CanConnectToConnections"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CanRotateNodesProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CanRotateNodes"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.ApplyLayoutAlgorithm(Mindscape.WpfDiagramming.Foundation.ILayoutAlgorithm)">
            <summary>
            Applies the given layout algorithm to the diagram, re-formats all the connections and takes a snapshot
            for undo/redo integration.
            </summary>
            <param name="algorithm">The layout algorithm to run.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.AllowNodeCollisionsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.AllowNodeCollisions"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.AllowSegmentToNodeCollisionsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.AllowSegmentToNodeCollisions"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CollisionBufferProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CollisionBuffer"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.DiagramElementsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.DiagramElements"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.FindConnectionElement(Mindscape.WpfDiagramming.Foundation.IDiagramConnection)">
            <summary>
            Returns the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> that represents the visual for the given
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>. This method returns null if no such <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>
            can be found.
            </summary>
            <param name="connection">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> to find the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> for.</param>
            <returns>The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> that represents the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.FindNodeElement(Mindscape.WpfDiagramming.Foundation.IDiagramNode)">
            <summary>
            Returns the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> that represents the visual for the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            This method returns null if no such <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> can be found.
            </summary>
            <param name="node">An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> to find the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> for.</param>
            <returns>The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> representing the given <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.GetConnections(System.Windows.Rect)">
            <summary>
            Returns all the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> items within the given rectangle.
            </summary>
            <param name="rect">The rectangle bounds to check.</param>
            <returns>All the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/> items within or intersecting with the given rectangle.</returns>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.IsDirtyProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.IsDirty"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.SetDirty">
            <summary>
            Marks the diagram as dirty (having changed).
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.ClearDirty">
            <summary>
            Clears the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.IsDirty"/> flag.  Call this method when saving the diagram.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.SelectedItem"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.SelectItem(System.Object)">
            <summary>
            Selects the given item.
            </summary>
            <param name="item">The model item to select</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.SelectedItemsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.SelectionMode"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CanCalculateConnectionIntersectionsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CanCalculateConnectionIntersections"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.IsVirtualizingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.IsVirtualizing"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.DiagramProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.Diagram"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.IsLoadingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.IsLoading"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.ElementFactoryProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.ElementFactory"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.FormatterProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.Formatter"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.IsReadOnly"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.ReadOnlyCanSelectProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.ReadOnlyCanSelect"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CanAddOrRemoveNodesProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CanAddOrRemoveNodes"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CanModifyConnectivityProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CanModifyConnectivity"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CanModifyNodeContentProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CanModifyNodeContent"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CanModifyConnectionContentProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CanModifyConnectionContent"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.ZoomProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.Zoom"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.ZoomModeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.ZoomMode"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.AllowInfiniteScrollingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.AllowInfiniteScrolling"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.ScrollChangeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.ScrollChange"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.SizeToFit">
            <summary>
            Sets the viewport of the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.ScrollViewer"/> to fit the entire diagram of this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.SetViewport(System.Windows.Rect)">
            <summary>
            Sets the viewport (the part of the diagram which is visible).
            </summary>
            <param name="viewport">The desired viewport, in diagram coordinates.</param>
            <remarks>In order to preserve the aspect ratio of the diagram, the displayed viewport
            may be larger than the requested viewport.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.GetViewport">
            <summary>
            Gets the viewport (the part of the diagram which is visible).
            </summary>
            <returns>The current viewport (in diagram coordinates).</returns>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.DragActionProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.DragAction"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed while this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> has focus.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when a key is released while this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> has focus.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled Mouse.MouseDown attached event reaches an element in
            its route that is derived from this class.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event
            data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled Mouse.MouseUp attached event reaches an element in
            its route that is derived from this class.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event
            data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled Mouse.MouseUp attached event reaches an element in
            its route that is derived from this class.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event
            data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeSelectBoundsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.MarqueeSelectBounds"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.TakeSnapshot">
            <summary>
            Saves the current state of the diagram that this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> is displaying.
            This saved state is used for undo purposes. This method should be called AFTER an action
            has modified the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>. This only takes effect if IsUndoManagerEnabled is true.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.CancelLastSnapshot">
            <summary>
            Cancels the last snapshot that was taken so that it is ignored by the undo command.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.ResetUndo">
            <summary>
            Resets the undo feature by clearing all the snapshots that have been made up to now.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.GetLogicalBounds(System.Windows.Rect)">
            <summary>
            Gets the diagram model bounds corresponding to a rectangle on the display
            (in control coordinates).  This method is used to compensate for the effects
            of zooming and scrolling on a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
            <param name="physicalBounds">The physical bounds, typically obtained from
            a tool drop event.</param>
            <returns>A <see cref="T:System.Windows.Rect"/> containing the equivalent coordinates in the
            unscaled diagram model.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.GetPhysicalBounds(System.Windows.Rect)">
            <summary>
            Gets the display rectangle (in control coordinates) corresponding to a region
            of the diagram model.  This method is used to compensate for the effects
            of zooming and scrolling on a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
            <param name="logicalBounds">The logical bounds.</param>
            <returns>A <see cref="T:System.Windows.Rect"/> containing the equivalent coordinates in
            control coordinates.</returns>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.DefaultCreateConnectionLineStyleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.DefaultCreateConnectionLineStyle"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeStyleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.MarqueeStyle"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.HorizontalSnapSpecifierProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.HorizontalSnapSpecifier"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.VerticalSnapSpecifierProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.VerticalSnapSpecifier"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.SnapLineDrawingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.SnapLineDrawing"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeSelectBehaviorProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.MarqueeSelectBehavior"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.CanSelectConnectionsWithMarqueeRectangleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.CanSelectConnectionsWithMarqueeRectangle"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.ScrollViewerProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.ScrollViewer"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.VerticalScrollBarVisibility"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.DiagramSurface.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.HorizontalScrollBarVisibility"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.GetMousePosition">
            <summary>
            Returns a <see cref="T:System.Windows.Point"/> reflecting the position of the mouse pointer relative to the (0, 0)
            coordinate on this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
            <returns>The mouse position relative to (0, 0) on this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.FindElementAtPoint(System.Windows.Point)">
            <summary>
            Returns the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> that interescts with the given <see cref="T:System.Windows.Point"/>. This could
            be a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> or a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>.
            Returns null if there is no <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> at the given point.
            </summary>
            <param name="point">The <see cref="T:System.Windows.Point"/> object used to search for a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/>.</param>
            <returns>The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> that intersects with the given point.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.FindNodeElementAtPoint(System.Windows.Point)">
            <summary>
            Returns the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> that intersects with the given <see cref="T:System.Windows.Point"/>.
            Returns null if there is no <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> at the given point.
            </summary>
            <param name="point">The <see cref="T:System.Windows.Point"/> object used to search for a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/>.</param>
            <returns>The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> that intersects the given point.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.FindMouseOverElement">
            <summary>
            Returns the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> that the mouse is currently over. This could
            be a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> or a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/>.
            Returns null if the mouse is not currently over any <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/>.
            </summary>
            <returns>The <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> that the mouse is currently over if any.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.DiagramSurface.FindMouseOverNodeElement">
            <summary>
            Returns the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> that the mouse is currently over.
            Returns null if the mouse is not currently over any <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragCompleted">
            <summary>
            Occurs when a marquee drag is completed.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragStarted">
            <summary>
            Occurs when a marquee drag has begun.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragDelta">
            <summary>
            Occurs when a marquee is being dragged.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.IsSmartScrollingEnabled">
            <summary>
            Gets or sets whether or not this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> uses smart scrolling.
            Smart scrolling allows the viewport of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/> to be dynamically
            updated when an element is moved or sized of the screen.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.IsSmartScrollingEnabledProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CanConnectToConnections">
            <summary>
            Gets or sets whether or not connections are allowed to be connected to other connections from the time this property is set.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CanConnectToConnectionsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CanRotateNodes">
            <summary>
            Gets or sets whether or not diagram nodes can be rotated. The default is false.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CanRotateNodesProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.AllowNodeCollisions">
            <summary>
            Gets or sets whether this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> should detect and manage collisions between
            two <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> objects.
            If this property is set to true, then collisions will be ignored.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.AllowSegmentToNodeCollisions">
            <summary>
            Gets or sets whether this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> should detect and manage collisions between
            <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionSegment"/> objects and <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> objects.
            If this property is set to true, then collisions will be ignored.
            Note that if this property is set to true, collisions still can not occur with a segment and the node that it is directly connected to.
            </summary>
            <remarks>Collision avoidance is applied only to manually placed connection segments.
            This setting does not affect automatic routing by an <see cref="T:Mindscape.WpfDiagramming.Foundation.IPathfinder"/>.</remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CollisionBuffer">
            <summary>
            Gets or sets the minimum distance between nodes and connection segments.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CollisionBufferProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            <para>It is advised that this value is not set to be negative.</para>
            <para>Note that when using a horizontal or/and vertical <see cref="T:Mindscape.WpfDiagramming.Foundation.ISnapSpecifier"/>, the snap specifiers
            will be used after collision detection is performed which may negate the effect of the buffer value.
            Generally, the buffer should be set to be some factor of the distance between snap lines.</para>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.DiagramElements">
            <summary>
            Gets the collection of <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> objects displayed on 
            this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>. This collection is sorted based on the ZIndex of the elements.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.DiagramElementsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.ConnectionElements">
            <summary>
            Gets all the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramConnectionElement"/> objects displayed on this
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.NodeElements">
            <summary>
            Gets all the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramNodeElement"/> objects displayed on this
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.IsDirty">
            <summary>
            Gets or sets whether or not a change has been made to this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>
            since the last time the diagram was saved.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.IsDirtyProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.SelectedItem">
            <summary>
            Gets or sets the selected diagram model item (<see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> or
            <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramConnection"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.SelectedItemProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="E:Mindscape.WpfDiagramming.DiagramSurface.SelectedItemsChanged">
            <summary>
            Raised when the <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.SelectedItems"/> property changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.SelectedItems">
            <summary>
            Gets the collection of selected diagram model items.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.SelectedItemsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.SelectionMode">
            <summary>
            Gets or sets the selection behavior for a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            The default is <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.SelectionMode">Single</see> selection.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.SelectionModeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CanCalculateConnectionIntersections">
            <summary>
            Gets or sets whether or not the DiagramSurface keeps track connection intersections.
            This is for drawing connection bridges and should be set to false for exeptionally large diagrams.
            The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CanCalculateConnectionIntersectionsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.IsVirtualizing">
            <summary>
            Gets or sets whether or not the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> virtualizes the elements. The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.IsVirtualizingProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.Diagram">
            <summary>
            Gets or sets the diagram to be displayed.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.DiagramProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.IsLoading">
            <summary>
            Gets whether or not the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> is currently loading a diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.IsLoadingProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="E:Mindscape.WpfDiagramming.DiagramSurface.FinishedLoadingDiagram">
            <summary>
            Raised when the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> has finished loading a diagram after the Diagram property was set.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.ElementFactory">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramElementFactory"/> used to construct <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/>
            objects for custom items.  This must be populated if the diagram model contains custom items;
            it is ignored if the diagram model does not contain custom items.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.ElementFactoryProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.Formatter">
            <summary>
            Gets or sets formatting and display settings for the diagram.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.FormatterProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.IsReadOnly">
            <summary>
            Gets or sets whether the diagram display is read-only (cannot be modified by the user).
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.IsReadOnlyProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.ReadOnlyCanSelect">
            <summary>
            Gets or sets whether diagram elements can still be selected in read-only mode.
            The default is false.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.ReadOnlyCanSelectProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CanAddOrRemoveNodes">
            <summary>
            Gets or sets if diagram nodes can be added or removed from the diagram of this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CanAddOrRemoveNodesProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CanModifyConnectivity">
            <summary>
            Gets or sets if connections can be relocated, added or removed from the diagram of this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            The default is true;
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CanModifyConnectivityProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CanModifyNodeContent">
            <summary>
            Gets or sets if the content of a node within this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> can be changed or not.
            The default is true;
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CanModifyNodeContentProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CanModifyConnectionContent">
            <summary>
            Gets or sets if the content of a connection within this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> can be changed or not.
            The default is true;
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CanModifyConnectionContentProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.Zoom">
            <summary>
            Gets or sets the zoom factor.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.ZoomProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.ZoomMode">
            <summary>
            Gets or sets built-in zooming behavior.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.ZoomModeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.AllowInfiniteScrolling">
            <summary>
            Gets or sets whether or not the scroll bars can be scrolled indefinitely. The default is true.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.AllowInfiniteScrollingProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.ScrollChange">
            <summary>
            Gets or sets the magnitude of mouse wheel scrolling.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.ScrollChangeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.DragAction">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramSurfaceDragAction"/> to determine the behaviour of dragging the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.DragActionProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.MarqueeSelectBounds">
            <summary>
            Gets the current bounds of the marquee select rectangle.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeSelectBoundsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.IsUndoManagerEnabled">
            <summary>
            Gets or sets whether or not the built in undo/redo support is enabled. The default is true.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.DefaultCreateConnectionLineStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style"/> used when the user drags to create a connection,
            if no <see cref="T:Mindscape.WpfDiagramming.DiagramConnectionTool"/> is selected or the tool does not specify
            its own style.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.DefaultCreateConnectionLineStyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.MarqueeStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style"/> applied to marquee selection rectangles.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeStyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.DefaultMarqueeStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the default <see cref="T:System.Windows.Style"/> used for
            drawing marquee selection rectangles.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.HorizontalSnapSpecifier">
            <summary>
            Gets or sets horizontal snapping for mouse dragging of nodes.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.HorizontalSnapSpecifierProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.VerticalSnapSpecifier">
            <summary>
            Gets or sets the vertical snapping for mouse dragging of nodes.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.VerticalSnapSpecifierProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.SnapLineDrawing">
            <summary>
            Gets or sets the method used to draw snap lines.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.SnapLineDrawingProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.MarqueeSelectBehavior">
            <summary>
            Gets or sets the selection behavior of the marquee select rectangle.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.MarqueeSelectBehaviorProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.CanSelectConnectionsWithMarqueeRectangle">
            <summary>
            Gets or sets whether or not the marquee select rectangle can be used to select connection elements. The default is false.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.CanSelectConnectionsWithMarqueeRectangleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.ScrollViewer">
            <summary>
            Gets the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/> used for scrolling the diagram view.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.ScrollViewerProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="E:Mindscape.WpfDiagramming.DiagramSurface.ViewPortChanged">
            <summary>
            Raised when the diagram view port of this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.HorizontalOffset">
            <summary>
            Gets the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.HorizontalOffset"/> property of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/> of this
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>. If the scroll viewer is null, then 0 is returned.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.VerticalOffset">
            <summary>
            Gets the <see cref="P:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer.VerticalOffset"/> property of the <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramScrollViewer"/> of this
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>. If the scroll viewer is null, then 0 is returned.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the VerticalScrollBarVisibility.
            The default is ScrollBarVisibility.Visible.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.VerticalScrollBarVisibilityProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the HorizontalScrollBarVisibility.
            The default is ScrollBarVisibility.Visible.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.DiagramSurface.HorizontalScrollBarVisibilityProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.PrintStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> for formatting a
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> for printing.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.DiagramSurface.DiagramBounds">
            <summary>
            Gets the bounding <see cref="T:System.Windows.Rect"/> of this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>. This such rectangle is the smallest
            rectangle that fits all of the diagram elements in this <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.MarqueeSelectBehavior">
            <summary>
            Specifies the behavior of selecting diagram elements using the marquee select rectangle.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.MarqueeSelectBehavior.Contains">
            <summary>
            Diagram elements will be selected if they are entirely within the marquee select rectangle.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.MarqueeSelectBehavior.Intersects">
            <summary>
            Diagram elements will be selected if they partially or entirely intersect with the marquee select rectangle.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.MarqueeDragCompletedEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragCompleted"/> event of a
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.MarqueeDragCompletedEventArgs.#ctor(System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.MarqueeDragCompletedEventArgs"/> class.
            </summary>
            <param name="marquee">The marquee drag rectangle (in diagram coordinates).</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.MarqueeDragCompletedEventArgs.Marquee">
            <summary>
            Gets the marquee drag rectangle (in diagram coordinates).
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.MarqueeDragStartedEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragStarted"/> event of a
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.MarqueeDragStartedEventArgs.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.MarqueeDragStartedEventArgs"/> class.
            </summary>
            <param name="startPosition">The start position of the marquee relative to the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.MarqueeDragStartedEventArgs.StartPosition">
            <summary>
            Gets the start position of the marquee area relative to the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.MarqueeDragDeltaEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.DiagramSurface.MarqueeDragDelta"/> event of a
            <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.MarqueeDragDeltaEventArgs.#ctor(System.Collections.Generic.IList{Mindscape.WpfDiagramming.Foundation.IDiagramConnectable})">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.MarqueeDragDeltaEventArgs"/> class.
            </summary>
            <param name="items">The diagram model items contained within the marquee rectangle.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.MarqueeDragDeltaEventArgs.ContainedItems">
            <summary>
            Gets a collection of the diagram model items currently contained within the marquee rectangle.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.IDiagramAdapter">
            <summary>
            Represents an adapter that maps a business object model to a diagram
            model.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.IDiagramAdapter.CreateDiagramModel(System.Object)">
            <summary>
            Creates a diagram model representing a business object model.
            </summary>
            <param name="businessModel">The business object model.</param>
            <returns>A diagram model.</returns>
        </member>
        <member name="T:Infralution.Licensing.EncryptedLicense">
            <summary>
            Defines an encrypted license for an application or component generated using the Infralution
            Licensing System.
            </summary>
            <remarks>
            The Infralution Licensing System provides a secure way of licensing .NET controls,
            components and applications.   Licenses are protected using public key encryption to
            minimize possibility of cracking.
            </remarks>
            <seealso cref="T:Infralution.Licensing.EncryptedLicenseProvider"/>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicense.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new Infralution Encrypted License
            </summary>
            <param name="key">The key for the license</param>
            <param name="serialNo">The serial number of the license</param>
            <param name="productInfo">The product data associated with the license</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicense.Dispose">
            <summary>
            Cleans up any resources held by the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.LicenseKey">
            <summary>
            The license key for the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.ProductInfo">
            <summary>
            The product data associated with the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.SerialNo">
            <summary>
            The unique serial no for the license
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EncryptedLicenseParameters">
            <summary>
            The parameters used to generate and validate <see cref="T:Infralution.Licensing.EncryptedLicense">EncryptedLicenses</see>
            using an <see cref="T:Infralution.Licensing.EncryptedLicenseProvider"/>
            </summary>
            <seealso cref="T:Infralution.Licensing.EncryptedLicenseProvider"/>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseParameters.ReadFromString(System.String)">
            <summary>
            Read the parameters from an XML string
            </summary>
            <param name="xmlParameters"></param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseParameters.WriteToString(System.Boolean)">
            <summary>
            Write the parameters to an XML string
            </summary>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
            <returns>The parameters in a formatted XML string</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseParameters.Read(System.Xml.XmlReader)">
            <summary>
            Read the parameters from an XML Reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseParameters.Write(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the parameters to an XML Writer
            </summary>
            <param name="writer">The XML Writer to write to</param>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.ProductName">
            <summary>
            The name of the product being licensed
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.ProductPassword">
            <summary>
            The password used to encrypt the license data
            </summary>
            <remarks>
            The <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.KeyStrength"/> determines the number of characters of the ProductPassword that are
            actually used in generating keys.   If the ProductPassword is shorter than the <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.KeyStrength"/> then 
            it is padded.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.KeyStrength">
            <summary>
            The strength of the key to generate.   
            </summary>
            <remarks>
            The KeyStrength determines the number of characters of the <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.ProductPassword"/> that are
            actually used in generating keys.    The smaller the KeyStrength the shorter the generated keys.
            If the <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.ProductPassword"/> is shorter than the KeyStrength then it is padded.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.TextEncoding">
            <summary>
            The encoding used to convert the binary key to text
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.ChecksumProductInfo">
            <summary>
            Should a checksum of the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> be included in the key  
            </summary>
            <remarks>
            If true a checksum is included in generated keys to check that the contents of the 
            <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> are valid.  This is only necessary if the 
            ProductInfo is potentially more than 6 characters long.  For ProductInfo of less than 7 
            characters the block encryption algorithm used to encrypt the overall key guarantees the validity
            of the ProductInfo.  
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.ShortSerialNo">
            <summary>
            If true serial numbers must be less than <see cref="F:System.UInt16.MaxValue"/>.  
            </summary>
            <remarks>
            Setting this to true enables the generated key to be kept as short as possible.   The default
            value for backward compatibility with previous versions is true.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.MaxSerialNo">
            <summary>
            Return the maximum serial no.
            </summary>
            <remarks>
            This returns the maximum allowed serial no based on the value of the <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.ShortSerialNo"/>
            property.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.RSAProvider">
            <summary>
            Return the RSA Provider used to validate RSA signatures
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.DesignSignature">
            <summary>
            The RSA signature for the product password at design time
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.RuntimeSignature">
            <summary>
            The RSA signature for the product password at runtime
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EncryptedLicenseProvider">
            <summary>
            Defines a .NET LicenseProvider that generates and validates simple, secure 
            <see cref="T:Infralution.Licensing.EncryptedLicense">EncryptedLicenses</see>.
            </summary>
            <remarks>
            The EncryptedLicenseProvider generates simple license keys which are validated using
            a public key encryption algorithm to minimize the possibility of cracking.  See 
            <see href="XtraGettingStarted.html">Getting Started</see> for detailed information on using
            the EncryptedLicenseProvider to license applications and components.
            </remarks>
            <seealso cref="T:Infralution.Licensing.EncryptedLicense"/>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseProvider._parameters">
            <summary>
            The current parameters for validating licenses
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)">
            <summary>
            Set the parameters used to validate licenses created by this provider.
            </summary>
            <remarks>
            This must be called by the client software prior to obtaining licenses using the EncryptedLicenseProvider.
            The XML parameter string is generated using the Infralution License Key Generator and pasted into the calling client code
            or by calling <see cref="M:Infralution.Licensing.EncryptedLicenseParameters.WriteToString(System.Boolean)"/>
            </remarks>
            <param name="xmlParameters">An XML string containing parameters used to validate licenses</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateKey(Infralution.Licensing.EncryptedLicenseParameters,System.String,System.Int32)">
            <summary>
            Generate a new encrypted license using the given parameters
            </summary>
            <param name="parameters">The license parameters to use to generate the key</param>
            <param name="productInfo">User defined data to be included in license key</param>
            <param name="serialNo">The unique license serial number for the</param>
            <returns>An encrypted license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed password is "TEST" and the only allowed serial numbers are 1 or 0.  
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateRuntimeKey(System.String)">
            <summary>
            Generate a runtime license key from the given design time license key
            </summary>
            <param name="designTimeLicenseKey">The design time license key to use</param>
            <returns>A runtime license key (or null if the designTimeLicenseKey can't be validated)</returns>
            <remarks>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,Infralution.Licensing.EncryptedLicense)">
            <summary>
            Install a license key for the given component or control type.
            </summary>
            <remarks>
            This method is used to install licenses for components and controls.  The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.EncryptedLicense)"/>
            method is typically better for installing application licenses because it provides more control over the 
            license key file name.  This license key file used by this method is the full type name followed by a ".lic" suffix. 
            </remarks>
            <param name="type">The type to install the license for</param>
            <param name="license">The license to install</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,System.String)">
            <summary>
            Install a license key for the given component or control type.
            </summary>
            <remarks>
            Validates the given license key and then installs the license.
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)"/> and then
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,Infralution.Licensing.EncryptedLicense)"/>.
            </remarks>
            <param name="type">The type to install the license for</param>
            <param name="licenseKey">The license key to install</param>
            <returns>A license if succesful or null/nothing if not</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.EncryptedLicense)">
            <summary>
            Install a license key for an application in the given file.
            </summary>
            <remarks>
            This method is used to install licenses for applications.  Use the <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,Infralution.Licensing.EncryptedLicense)"/>
            method to install licenses for components or controls.  If a full path is not specified for licenseFile then
            the file will be created relative to the entry executable directory.
            </remarks>
            <param name="licenseFile">The name of the file to install the license key in</param>
            <param name="license">The license to install</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,System.String)">
            <summary>
            Install a license key for an application in the given file.
            </summary>
            <remarks>
            Validates the given license key and then installs the license.
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)"/> and then
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.EncryptedLicense)"/>.
            </remarks>
            <param name="licenseFile">The name of the file to install the license key in</param>
            <param name="licenseKey">The license key to install</param>
            <returns>A license if succesful or null/nothing if not</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.UninstallLicense(System.Type)">
            <summary>
            Uninstall a license key for the given component or control type.
            </summary>
            <remarks>
            Deletes the license file for the given type
            </remarks>
            <param name="type">The type to uninstall the license for</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.UninstallLicense(System.String)">
            <summary>
            Uninstall the license key in the given file.
            </summary>
            <remarks>
            Deletes the license file
            </remarks>
            <param name="licenseFile">The name of the file the license key is in</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Check  that the given license key is valid
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <param name="context">The current licensing context</param>
            <param name="type">The type to be licensed</param>
            <returns>An <see cref="T:Infralution.Licensing.EncryptedLicense"/> or null if licenseKey is not valid</returns>
            <remarks>
            <para>
            This method is called to validate the licence key for a type.  If the license context is a design
            time context then it generates a runtime license key and saves it in the context.
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)">
            <summary>
            Validate that the given license key is valid for the current licensing parameters
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <returns>The encrypted license if the key is valid otherwise null</returns>
            <remarks>
            <para>
            This method provides a mechanism to validate that a given license key is valid
            prior to attempting to install it.   This can be useful if you want to check
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> before installing the license.
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </para>
            </remarks>
            <seealso cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.String)"/> 
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.String)">
            <summary>
            Validate that the given license key is valid for the given licensing parameters
            </summary>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="licenseKey">The license key to validate</param>
            <returns>The encrypted license if the key is valid otherwise null</returns>
            <remarks>
            <para>
            This method provides a mechanism to validate that a given license key is valid
            prior to attempting to install it.   This can be useful if you want to check
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> before installing the license.  
            </para>
            <para>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> followed by 
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String)">
            <summary>
            Get a license (if installed) from the given license file.
            </summary>
            <param name="licenseFile">The name of the license file containing the license key</param>
            <returns>The installed license if any</returns>
            <remarks>
            <para>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager"/> methods to load and validate licenses.  If a full path is not specified 
            for licenseFile then the file loaded will be relative to the directory containing the application 
            executable (for Window Forms applications) or aspx files (for ASP.NET applications).
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String,System.String)">
            <summary>
            Get a license (if installed) from the given license file.
            </summary>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="licenseFile">The name of the license file containing the license key</param>
            <returns>The installed license if any</returns>
            <remarks>
            <para>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager"/> methods to read and validate licenses.  If a full path is not specified 
            for licenseFile then the file loaded will be relative to the directory containing the application 
            executable (for Window Forms applications) or aspx files (for ASP.NET applications).
            </para>
            <para>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> followed by 
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Get a license (if installed) for the given component/control type 
            </summary>
            <param name="context">The context (design or runtime)</param>
            <param name="type">The type to get the license for</param>
            <param name="instance">The object the license is for</param>
            <param name="allowExceptions">If true a <see cref="T:System.ComponentModel.LicenseException"/> is thrown if a valid license cannot be loaded</param>
            <returns>An encrypted license</returns>
            <remarks>
            <para>
            This method is used to get licenses for components and controls.  Applications should generally
            use the <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String,System.String)"/> method as it provides more control over the license file
            that keys are stored in.  This method is not typically called directly by application code.  
            Instead the component or control uses the <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)"/> or
            <see cref="M:System.ComponentModel.LicenseManager.Validate(System.Type)"/> methods which find the <see cref="T:System.ComponentModel.LicenseProvider"/> for the type
            and call this method.
            </para>
            <para>
            You must call <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> before calling this method either directly or
            indirectly by via a call to <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Reflection.Assembly,System.Type)">
            <summary>
            Return the license for the given type from a given DLL assembly resources
            </summary>
            <param name="context">The license context to validate the license in</param>
            <param name="assembly">The assembly containing the license</param>
            <param name="type">The type to get the license for</param>
            <returns>The license key if any</returns>
            <remarks>
            This method can be used to check the given DLL assembly for a license.  By default the .NET licensing
            framework only checks the entry assembly (ie typically executables) for licenses.  This means
            that if a licensed control is wrapped in another control, the customer of the wrapped control will
            still required a design time license key for the original control.  This is generally the behaviour
            that control authors would like.  If however you want to provide a license that enables a customer
            to create new component/controls using your control/component then you can achieve this by using 
            this method to check for a license in the CallingAssembly that created the control/component.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.EncodeToText(System.Byte[],Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a byte array into a text representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>Text representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.DecodeFromText(System.String,Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a string into a byte array.
            </summary>
            <param name="text">The text to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetPasswordData(System.String,System.Int32)">
            <summary>
            Generate the password data used to verify and decrypt the license
            </summary>
            <param name="password">The password used to generate the key</param>
            <param name="keyStrength">The strength of the key to create</param>
            <returns>The password data used to verify and decrypt the license</returns> 
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.PadPassword(System.Byte[])">
            <summary>
            Pad the given password if required.
            </summary>
            <param name="passwordData">The password data to pad</param>
            <returns>The padded password data</returns> 
            <remarks>
            This function is required for backward compatibility with 7 byte passwords which were
            padded before being signed
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.CreateSignatures(Infralution.Licensing.EncryptedLicenseParameters)">
            <summary>
            Create the signatures based on the current parameters
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateKey(Infralution.Licensing.EncryptedLicenseParameters,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Generate a new encrypted license 
            </summary>
            <param name="parameters">The license parameters to use to generate the key</param>
            <param name="productPassword">The password used to encrypted the license data</param>
            <param name="productInfo">User defined data to be included in license key</param>
            <param name="serialNo">The unique license serial number</param>
            <returns>An encrypted license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed password is "TEST" and the only allowed serial numbers are 1 or 0.  To use the
            licensed version of this method ensure that the file Infralution.Licensing.EncryptedLicenseProvider.lic
            exists in the same directory as the Infralution.Licensing.dll and contains a valid
            license key for the Licensing System.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.ComponentModel.LicenseUsageMode,System.Boolean,System.String@)">
            <summary>
            Check that the given license key is valid and optionally generate a runtime license key
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <param name="usageMode">The usage mode that we want to validate the license key for</param>
            <param name="generateRuntimeLicenseKey">Should a runtime license be generated from the license - usageMode must also be DesignTime</param>
            <param name="runtimeLicenseKey">The generated runtime license (if any)</param>
            <returns>An <see cref="T:Infralution.Licensing.EncryptedLicense"/> or null if licenseKey is not valid</returns>
            <remarks>
            <para>
            This method implements the core validation logic (other ValidateLicenseKey methods call it) and optionally
            generates a runtime license key.
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ReadKeyFromFile(System.String)">
            <summary>
            Read a license key from the given file
            </summary>
            <param name="licenseFile">The path to the license file to read the key from</param>
            <returns>The license key if any</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.WriteKeyToFile(System.String,System.String)">
            <summary>
            Write a license key to the given file
            </summary>
            <param name="licenseFile">The path to the license file to write the key to</param>
            <param name="licenseKey">The license key to write</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicenseDirectory(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Return the directory used to store license files
            </summary>
            <param name="context">The licence context</param>
            <param name="type">The type being licensed</param>
            <returns>The directory to look for license files</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicenseFilePath(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Called by <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String)"/> to get the file path to obtain the license from (if there is no runtime license saved in the context)
            </summary>
            <remarks>
            This can be overridden to change the file used to store the design time license for the provider.   By default the
            the license file is stored in the same directory as the component executable with the name based on the fully
            qualified type name eg MyNamespace.MyControl.lic
            </remarks>
            <param name="context">The licence context</param>
            <param name="type">The type to get the license for</param>
            <returns>The path of the license file</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ShowError(System.String,System.String)">
            <summary>
            Display an error to a message box or the trace output
            </summary>
            <param name="title">The title for the error</param>
            <param name="message">The error message</param>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseProvider.Parameters">
            <summary>
            Set/Get Parameters for validating <see cref="T:Infralution.Licensing.EncryptedLicense">EncryptedLicenses</see>  
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EvaluationMonitor">
            <summary>
            Provides a mechanism for managing time/usage limited evaluations of products.
            </summary>
            <remarks>
            <para>
            Instantiate an instance of this class to read/write the evaluation parameters for the   
            given product.  The <see cref="P:Infralution.Licensing.EvaluationMonitor.FirstUseDate"/> is set the first time that
            the class is instantiated.  The <see cref="P:Infralution.Licensing.EvaluationMonitor.LastUseDate"/> and <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> 
            properties are set each time the class is instantiated (or once per day if
            the <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/> property is set to true).
            </para>
            <para>
            Note that evaluation data must be stored somewhere on the users 
            hard disk.  It is therefore not too difficult for a sophisticated user to determine the 
            changes made either to registry keys or files (using file/registry monitoring software) 
            and restore the state of these to their pre-installation state (thus resetting the 
            evaluation period).  For this reason it is recommended that you don't rely on this 
            mechanism alone.  You should also consider limiting the functionality of your product 
            in some way or adding nag screens to discourage long term use of evaluation versions.
            </para>
            <para>
            If you have a data oriented application you can increase the security of evaluations by
            storing the current <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> somewhere in your database each time the 
            application runs and cross checking this with the number returned by the EvaluationMonitor.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="countUsageOncePerDay">Should the usage count only be incremented once per day</param>
            <param name="password">A unique password for this product</param>
            <remarks>
            If countUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> is only incremented once
            for each day that the product is actually used.   If countUsageOncePerDay is false then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/>
            is incremented each time a new evaluation monitor is instantiated for a product
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.#ctor(System.String)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="password">A unique password for this product</param>
            <remarks>
            For backward compatibility this overloaded constructor sets the <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/>
            property to false.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Reset">
            <summary>
            Allows you to reset the evaluation period.
            </summary>
            <remarks>
            This may be useful if a customer needs an extension or if somehow they
            invalidate their evaluation data by attempting to fiddle
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.FindBaseKey(Microsoft.Win32.RegistryKey)">
            <summary>
            Find the base key for this product
            </summary>
            <param name="parent">The key to search under</param>
            <returns>The base registry key used to store the data</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.CreateBaseKey(Microsoft.Win32.RegistryKey)">
            <summary>
            Create the base key for this product
            </summary>
            <param name="parent">The key to place the information under</param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.UpdateData">
            <summary>
            Update the registry data
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Encrypt(System.String)">
            <summary>
            Encrypt the given text
            </summary>
            <param name="text">The text to encrypt</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Decrypt(System.Byte[])">
            <summary>
            Decrypt the given byte data to text
            </summary>
            <param name="data">The byte data to decrypt</param>
            <returns>The decrypted text</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.EncryptDate(System.DateTime)">
            <summary>
            Encrypt a date
            </summary>
            <param name="date">The date to encrypt</param>
            <returns>The encrypted date data</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.DecryptDate(System.Byte[])">
            <summary>
            Decrypt a date
            </summary>
            <param name="data">The data to decrypt</param>
            <returns>The descryped date</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Equals(System.Byte[],System.Byte[])">
            <summary>
            Are the contents of the two byte arrays equal
            </summary>
            <param name="a1">The first array</param>
            <param name="a2">The second array </param>
            <returns>True if the contents of the arrays is equal</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Dispose">
            <summary>
            Free resources used by the EvaluationMonitor
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay">
            <summary>
            Set/Get whether the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> should be incremented only once per day 
            </summary>
            <remarks>
            </remarks>
            <remarks>
            If CountUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> is only incremented once
            for each day that the product is actually used.   If CountUsageOncePerDay is false then 
            the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> is incremented each time a new evaluation monitor is instantiated for 
            a given product id. 
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.UsageCount">
            <summary>
            Return the number of times the product has been used 
            </summary>
            <remarks>
            If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/> is set to true then the UsageCount is only incremented once
            for each day that the product is actually used.   If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/> is false then 
            the UsageCount is incremented each time a new evaluation monitor is instantiated for 
            a given product id.  Typically you should instantiate an EvaluationMonitor object just once in your 
            software.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.FirstUseDate">
            <summary>
            Return the date/time the product was first used
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.LastUseDate">
            <summary>
            Return the date/time the product was last used
            </summary>
            <remarks>
            If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/> is set to true then this is the date
            at which the usage count was last updated - otherwise it is the date at 
            which the EvaluationMonitor was last created.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.DaysInUse">
            <summary>
            Return the number of days since the product was first run.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.Invalid">
            <summary>
            Returns true if the evaluation monitor detects attempts to circumvent
            evaluation limits by tampering with the hidden evaluation data or winding
            the PC clock backwards 
            </summary>
        </member>
        <member name="T:Infralution.Licensing.PublicEncryptedLicenseProvider">
            <summary>
            Forwards licensing requests to the internal provider.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.PublicEncryptedLicenseProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infralution.Licensing.PublicEncryptedLicenseProvider"/> class.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.PublicEncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Get a license (if installed) for the given component/control type 
            </summary>
            <param name="context">The context (design or runtime)</param>
            <param name="type">The type to get the license for</param>
            <param name="instance">The object the license is for</param>
            <param name="allowExceptions">If true a <see cref="T:System.ComponentModel.LicenseException"/> is thrown if a valid license cannot be loaded</param>
            <returns>An encrypted license</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.BuilderTypeExtension">
            <summary>
            Provides a markup shortcut for specifying the <see cref="P:Mindscape.WpfDiagramming.DiagramNodeTool.Builder"/>
            associated with a <see cref="T:Mindscape.WpfDiagramming.DiagramNodeTool"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.BuilderTypeExtension.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.BuilderTypeExtension"/> class.
            </summary>
            <param name="builderType">The type of <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder"/>.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.BuilderTypeExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns an instance of the specified tool type.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>An <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNodeBuilder"/> of the type specified in the constructor.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.TypeStyle">
            <summary>
            Maps a data type to a <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeStyle.Style"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeStyle.Matches(System.Object)">
            <summary>
            Tests whether an object matches the criterion for the <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeStyle.Style"/>.
            </summary>
            <param name="item">The object to be tested.</param>
            <returns>true if the object matches the criterion; otherwise false.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeStyle.DataType">
            <summary>
            The data type to which the <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeStyle.Style"/> property applies.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeStyle.Style">
            <summary>
            Gets or sets the <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeStyle.Style"/> to be used for the specified <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeStyle.DataType"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.TypeTemplate">
            <summary>
            Maps a data type to a <see cref="T:System.Windows.DataTemplate"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeTemplate.Matches(System.Object)">
            <summary>
            Tests whether an object matches the criterion for this <see cref="T:System.Windows.DataTemplate"/>.
            </summary>
            <param name="item">The object to be tested.</param>
            <returns>true if the object matches the criterion; otherwise false.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeTemplate.DataType">
            <summary>
            The data type to which the <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeTemplate.Template"/> property applies.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeTemplate.Template">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> to be used for the specified <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeTemplate.DataType"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.MoveThumb">
            <summary>
            Enables dragging of the associated <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.MoveThumb.MovedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.MoveThumb.Moved"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MoveThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.MoveThumb"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.MoveThumb.GeometryProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.MoveThumb.Geometry"/> property.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.MoveThumb.Moved">
            <summary>
            Occurs when the <see cref="T:Mindscape.WpfDiagramming.Foundation.MoveThumb"/> is moved.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MoveThumb.InvisibleStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> for making a
            <see cref="T:Mindscape.WpfDiagramming.Foundation.MoveThumb"/> invisible to the user.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MoveThumb.Geometry">
            <summary>
            Gets or sets the Geometry.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.MoveThumb.GeometryProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.MovedEventArgs">
            <summary>
            Provides information about the <see cref="E:Mindscape.WpfDiagramming.Foundation.MoveThumb.Moved"/> event of a
            <see cref="T:Mindscape.WpfDiagramming.Foundation.MoveThumb"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.MovedEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.MovedEventArgs"/> class.
            </summary>
            <param name="horizontalChange">The horizontal move amount.</param>
            <param name="verticalChange">The vertical move amount.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MovedEventArgs.HorizontalChange">
            <summary>
            Gets the horizontal move amount.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.MovedEventArgs.VerticalChange">
            <summary>
            Gets the vertical move amount.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.ExpiredOn">
            <summary>
              Looks up a localized string similar to Mindscape WPF Diagramming trial license expired on {0:d}.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.ExpiringSoon">
            <summary>
              Looks up a localized string similar to Mindscape WPF Diagramming trial license expires on {0:d}.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.ToolboxAllFilterLabel">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.ToolboxMultipleFilterLabel">
            <summary>
              Looks up a localized string similar to Multiple.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.TrialLicenceMessageCaption">
            <summary>
              Looks up a localized string similar to Mindscape WPF Diagramming Trial License.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.TrialLicenceTraceMessage">
            <summary>
              Looks up a localized string similar to Mindscape WPF Diagramming trial license: {0} days remaining.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.TrialLicenceTraceMessage_Expired">
            <summary>
              Looks up a localized string similar to Mindscape WPF Diagramming trial license expired.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Properties.Resources.TrialLicenceTraceMessage_GracePeriod">
            <summary>
              Looks up a localized string similar to Mindscape WPF Diagramming trial license expiring soon: {0} days remaining.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.Resizer">
            <summary>
            Enables resizing of the associated <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.Resizer.ElementProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.Resizer.Element"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.Resizer.Element">
            <summary>
            Gets or sets the element which will be resized by this control.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.Resizer.ElementProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DataTypeStyleSelector">
            <summary>
            Selects a diagram node style based on the type of the diagram node
            data.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DataTypeStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.Style"/> according to the type of the <see cref="P:Mindscape.WpfDiagramming.Foundation.IDiagramConnectable.Data"/> 
            property of the provided <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            </summary>
            <param name="item">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> for which to select the style.</param>
            <param name="container">The data-bound object.</param>
            <returns>The style from the <see cref="P:Mindscape.WpfDiagramming.Foundation.DataTypeStyleSelector.TypeStyles"/> list if one matches; otherwise
            the <see cref="P:Mindscape.WpfDiagramming.Foundation.DataTypeStyleSelector.DefaultStyle"/>.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DataTypeStyleSelector.DefaultStyle">
            <summary>
            Gets or sets the default style.  This style is used if there
            is no specific template for the type of the node data, or if the node
            data is null.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.DataTypeStyleSelector.TypeStyles">
            <summary>
            Gets the list of type-specific styles.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.DataTypeTemplateSelector">
            <summary>
            Selects a diagram node template based on the type of the diagram node
            data.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelectorBase">
            <summary>
            Selects a data template based on a type.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelectorBase.GetSelectionType(System.Object)">
            <summary>
            When overridden in a derived class, gets the type to be used in selecting a
            template for an item.
            </summary>
            <param name="item">The item for which to obtain a data type.</param>
            <returns>The data type for the item.</returns>
            <remarks>Implementations should return null to request fall-through to the
            default template.</remarks>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelectorBase.SelectTemplateCore(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DataTemplate"/> according to the type of the item.
            </summary>
            <param name="item">The item for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>The template from the <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelectorBase.TypeTemplates"/> list if one matches; otherwise
            the <see cref="P:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelectorBase.DefaultTemplate"/>.</returns>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelectorBase.DefaultTemplate">
            <summary>
            Gets or sets the default data template.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelectorBase.TypeTemplates">
            <summary>
            Gets the list of type-specific templates.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.DataTypeTemplateSelector.GetSelectionType(System.Object)">
            <summary>
            Gets the type of the data content of an <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/>.
            </summary>
            <param name="item">The <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> for which to obtain a data type.</param>
            <returns>The data type for the item.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelector">
            <summary>
            Selects a data template based on the type of the object.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.TypeTemplateSelector.GetSelectionType(System.Object)">
            <summary>
            Gets the type to be used in selecting a template for an item, being
            the CLR type of the object itself.
            </summary>
            <param name="item">The item for which to obtain a data type.</param>
            <returns>The data type for the item.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SizeThumb">
            <summary>
            Enables resizing of the associated <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <remarks>SizeThumb represents a single resize handle.  The location of the handle,
            and the effect of dragging, are determined by the <see cref="T:System.Windows.HorizontalAlignment"/>
            and <see cref="T:System.Windows.VerticalAlignment"/> properties.  To enable resizing on all sides
            and corners, use a <see cref="T:Mindscape.WpfDiagramming.Foundation.Resizer"/> control.</remarks>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.SizeThumb.SizedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfDiagramming.Foundation.SizeThumb.Sized"/> routed event.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SizeThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.SizeThumb"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.SizeThumb.IsSquareSizingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfDiagramming.Foundation.SizeThumb.IsSquareSizing"/> property.
            </summary>
        </member>
        <member name="E:Mindscape.WpfDiagramming.Foundation.SizeThumb.Sized">
            <summary>
            Occurs when the <see cref="T:Mindscape.WpfDiagramming.Foundation.MoveThumb"/> is moved.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SizeThumb.IsSquareSizing">
            <summary>
            Gets or sets whether or not this <see cref="T:Mindscape.WpfDiagramming.Foundation.SizeThumb"/> is in square sizing mode.
            In square sizing mode, the vertical change and horizontal change is the same when changing the
            size of a node via a corner sizing handle.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfDiagramming.Foundation.SizeThumb.IsSquareSizingProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.SizedEventArgs">
            <summary>
            Provides information about the Sized event of a <see cref="P:Mindscape.WpfDiagramming.Foundation.SizedEventArgs.SizeThumb"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.SizedEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.SizedEventArgs"/> class.
            </summary>
            <param name="widthChange">The change in the width of the element being resized.</param>
            <param name="heightChange">The change in the height of the element being resized.</param>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SizedEventArgs.WidthChange">
            <summary>
            Gets the amount that the width of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> changed by.
            </summary>
        </member>
        <member name="P:Mindscape.WpfDiagramming.Foundation.SizedEventArgs.HeightChange">
            <summary>
            Gets the amount that the height of the <see cref="T:Mindscape.WpfDiagramming.Foundation.IDiagramNode"/> changed by.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.PositionCalculatorConverter">
            <summary>
            Converts instances of other types to and from <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> instances.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.PositionCalculatorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether a class can be converted from a given type to an instance of <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/>.
            </summary>
            <param name="context">Describes the context information of a type.</param>
            <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
            <returns>true if the converter can convert from the specified type to an instance of IPositionCalculator; otherwise, false.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.PositionCalculatorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/>.
            </summary>
            <param name="context">Describes the context information of a type.</param>
            <param name="culture">Culture-specific information that should be respected during conversion.</param>
            <param name="value">The object being converted.</param>
            <returns>The instance of IPositionCalculator that is created from the converted source.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ShapeConnectionPointPositionCollectionConverter">
            <summary>
            Converts instances of other types to and from <see cref="T:Mindscape.WpfDiagramming.Foundation.IPositionCalculator"/> instances.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ShapeConnectionPointPositionCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether a class can be converted from a given type to a collection of <see cref="T:Mindscape.WpfDiagramming.ShapeConnectionPointPosition"/> objects.
            </summary>
            <param name="context">Describes the context information of a type.</param>
            <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
            <returns>true if the converter can convert from the specified type to an instance of IPositionCalculator; otherwise, false.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.ShapeConnectionPointPositionCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Attempts to convert a specified object to a collection of <see cref="T:Mindscape.WpfDiagramming.ShapeConnectionPointPosition"/> objects.
            </summary>
            <param name="context">Describes the context information of a type.</param>
            <param name="culture">Culture-specific information that should be respected during conversion.</param>
            <param name="value">The object being converted.</param>
            <returns>The collection of ShapeConnectionPointPosition objects that is created from the converted source.</returns>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.UndoManager">
            <summary>
            A class that manages the undo and redo procedures of a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.UndoManager.#ctor(Mindscape.WpfDiagramming.DiagramSurface)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfDiagramming.Foundation.UndoManager"/>.
            </summary>
            <param name="surface">The <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> that this <see cref="T:Mindscape.WpfDiagramming.Foundation.UndoManager"/> performs undo actions on.</param>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.UndoManager.CanUndo">
            <summary>
            Returns true if this <see cref="T:Mindscape.WpfDiagramming.Foundation.UndoManager"/> can currently perform an undo.
            Returns false otherwise.
            </summary>
            <returns>True if an undo can be performed at the time this method is called. False otherwise.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.UndoManager.CanRedo">
            <summary>
            Returns true if this <see cref="T:Mindscape.WpfDiagramming.Foundation.UndoManager"/> can currently perform a redo.
            returns false otherwise.
            </summary>
            <returns>True if a redo can be performed at the time this method is called. False otherwise.</returns>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.UndoManager.Reset">
            <summary>
            Resets this <see cref="T:Mindscape.WpfDiagramming.Foundation.UndoManager"/> by deleting its undo history.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.UndoManager.TakeSnapshot">
            <summary>
            Saves a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramState"/> 'snapshot' of the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> known
            to this <see cref="T:Mindscape.WpfDiagramming.Foundation.UndoManager"/>. This method should be called AFTER an action has modified
            the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.UndoManager.CancelLastSnapshot">
            <summary>
            Removes the last snapshot from the undo stack, and restores the redo stack.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.UndoManager.Undo">
            <summary>
            Performs an undo on the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> known to this <see cref="T:Mindscape.WpfDiagramming.Foundation.UndoManager"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfDiagramming.Foundation.UndoManager.Redo">
            <summary>
            Performs a redo on the <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/> known to this <see cref="T:Mindscape.WpfDiagramming.Foundation.UndoManager"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.Foundation.ZIndexLayer">
            <summary>
            Specifies how a <see cref="T:Mindscape.WpfDiagramming.Foundation.DiagramElement"/> participates in the z-order.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ZIndexLayer.Normal">
            <summary>
            The element participates normally in the z-order.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ZIndexLayer.LayerBackground">
            <summary>
            The element appears behind all Normal elements at the same level in the
            parenting hierarchy.  The relative order of LayerBackground elements is
            not determined.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ZIndexLayer.Topmost">
            <summary>
            The element appears in front of all non-Topmost elements.  The 
            relative order of Topmost elements is not determined.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.Foundation.ZIndexLayer.DiagramBackground">
            <summary>
            The element appears behind all non-DiagramBackground elements.  The relative
            order of DiagramBackground elements is not determined.
            </summary>
        </member>
        <member name="T:Mindscape.WpfDiagramming.ZoomMode">
            <summary>
            Specifies the zooming behavior of a <see cref="T:Mindscape.WpfDiagramming.DiagramSurface"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ZoomMode.Manual">
            <summary>
            No built-in zooming gesture.  Applications can zoom by setting the 
            <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.Zoom"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ZoomMode.MouseWheel">
            <summary>
            The user can zoom the diagram using the mouse wheel.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ZoomMode.ControlMouseWheel">
            <summary>
            The user can zoom the diagram by holding down the Control key and
            using the mouse wheel.
            </summary>
        </member>
        <member name="F:Mindscape.WpfDiagramming.ZoomMode.SizeToFit">
            <summary>
            The diagram is zoomed to fit the available space.  The <see cref="P:Mindscape.WpfDiagramming.DiagramSurface.Zoom"/>
            value is ignored.
            </summary>
        </member>
    </members>
</doc>
