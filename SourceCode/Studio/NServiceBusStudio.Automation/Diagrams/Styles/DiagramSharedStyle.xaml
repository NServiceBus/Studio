<ResourceDictionary 
    x:Class="NServiceBusStudio.Automation.Diagrams.Styles.DiagramSharedStyle"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:shapes="clr-namespace:NServiceBusStudio.Automation.Diagrams.ViewModels.Shapes"
    xmlns:converters="clr-namespace:NServiceBusStudio.Automation.Diagrams.Converters"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ms="http://namespaces.mindscape.co.nz/wpf">

    <ControlTemplate x:Key="ContextMenuItemTemplate" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border"
                            Background="Transparent">
            <Grid Height="30">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="Col0" MinWidth="35" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition x:Name="Col3" Width="35"/>
                </Grid.ColumnDefinitions>

                <!-- ContentPresenter to show an Icon if needed -->
                <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                <!-- Glyph is a checkmark if needed for a checkable menu -->
                <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                    <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                </Grid>

                <!-- Content for the menu text etc -->
                <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"
                                          VerticalAlignment="Center" />

                <!-- Content for the menu IGT -->
                <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

                <!-- Arrow drawn path which points to the next level of the menu -->
                <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                    <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                </Grid>

                <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                    <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">
                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                            <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Grid>
                    </Border>
                </Popup>
            </Grid>
        </Border>

        <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
        <ControlTemplate.Triggers>
            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="6,1,6,1"/>
                <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>

            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="6,1,6,1"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>

            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2,0,2"/>
            </Trigger>

            <!-- Role = SubMenuItem : this is a child menu item which has children-->
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2,0,2"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
            </Trigger>

            <!-- If no Icon is present the we collapse the Icon Content -->
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
            </Trigger>

            <!-- The GlyphPanel contains the CheckMark -->
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
            </Trigger>

            <!-- Using the system colors for the Menu Highlight and IsEnabled-->
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" Value="#007AC5" TargetName="Border"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="LightGray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Segoe UI Semibold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Grid>
                        <Polygon Points="0.5,0.5 0,1 1,1"
                                 Fill="Black"
                                 Width="20"
                                 Height="10"
                                 Stretch="Fill"
                                 VerticalAlignment="Top"
                                 HorizontalAlignment="Center" />
                        <Border Name="Border"
                                Margin="0,10,0,0"
                                Background="Black"
                                BorderThickness="0">
                            <StackPanel IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="MenuItem">
                <Setter Property="Template" Value="{StaticResource ContextMenuItemTemplate}" />
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="MenuButton" TargetType="Button">
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontFamily" Value="Segoe UI Semibold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Height" Value="34" />
        <Setter Property="Margin" Value="12, 3, 0, 3" />
        <Setter Property="ContextMenuService.Placement" Value="Bottom" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu ItemsSource="{Binding MenuOptions}">
                    <!--Style="{StaticResource ContextMenuStyle}"-->
                    <ContextMenu.ItemTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding MenuOptions}">
                            <ContentPresenter Content="{Binding Caption}" RecognizesAccessKey="True" />
                        </HierarchicalDataTemplate>
                    </ContextMenu.ItemTemplate>
                    <ContextMenu.GroupStyle>
                        <GroupStyle HidesIfEmpty="True" />
                    </ContextMenu.GroupStyle>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>