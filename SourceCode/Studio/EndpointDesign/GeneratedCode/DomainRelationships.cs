//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NServiceBus.Modeling.EndpointDesign
{
	/// <summary>
	/// DomainRelationship EndpointModelHasEvents
	/// Description for NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents
	/// </summary>
	[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8fa0aebb-8141-46f1-bfe4-1b08a53b2c6f")]
	public partial class EndpointModelHasEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EndpointModelHasEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8fa0aebb, 0x8141, 0x46f1, 0xbf, 0xe4, 0x1b, 0x08, 0xa5, 0x3b, 0x2c, 0x6f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EndpointModelHasEvents link in the same Partition as the given EndpointModel
		/// </summary>
		/// <param name="source">EndpointModel to use as the source of the relationship.</param>
		/// <param name="target">Event to use as the target of the relationship.</param>
		public EndpointModelHasEvents(EndpointModel source, Event target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EndpointModelHasEvents.EndpointModelDomainRoleId, source), new DslModeling::RoleAssignment(EndpointModelHasEvents.EventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndpointModelHasEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndpointModelHasEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndpointModelHasEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndpointModelHasEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EndpointModel domain role code
		
		/// <summary>
		/// EndpointModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointModelDomainRoleId = new global::System.Guid(0xdc5a8e34, 0x7c6e, 0x4157, 0x98, 0x58, 0x97, 0xdb, 0x1c, 0xf1, 0x01, 0x87);
		
		/// <summary>
		/// DomainRole EndpointModel
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents.EndpointModel
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents/EndpointModel.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents/EndpointModel.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Events", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents/EndpointModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dc5a8e34-7c6e-4157-9858-97db1cf10187")]
		public virtual EndpointModel EndpointModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EndpointModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EndpointModel of a Event
		/// <summary>
		/// Gets EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EndpointModel GetEndpointModel(Event element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EventDomainRoleId) as EndpointModel;
		}
		
		/// <summary>
		/// Sets EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEndpointModel(Event element, EndpointModel newEndpointModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EventDomainRoleId, newEndpointModel);
		}
		#endregion
		#region Event domain role code
		
		/// <summary>
		/// Event domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventDomainRoleId = new global::System.Guid(0xaca62130, 0x701d, 0x4552, 0x95, 0x6e, 0xa2, 0x14, 0xc3, 0x0e, 0x35, 0xa2);
		
		/// <summary>
		/// DomainRole Event
		/// Description for NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents.Event
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents/Event.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents/Event.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EndpointModel", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents/Event.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aca62130-701d-4552-956e-a214c30e35a2")]
		public virtual Event Event
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Event)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Events of a EndpointModel
		/// <summary>
		/// Gets a list of Events.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Event> GetEvents(EndpointModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Event>, Event>(element, EndpointModelDomainRoleId);
		}
		#endregion
		#region EndpointModel link accessor
		/// <summary>
		/// Get the list of EndpointModelHasEvents links to a EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents> GetLinksToEvents ( global::NServiceBus.Modeling.EndpointDesign.EndpointModel endpointModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents>(endpointModelInstance, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents.EndpointModelDomainRoleId);
		}
		#endregion
		#region Event link accessor
		/// <summary>
		/// Get the EndpointModelHasEvents link to a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents GetLinkToEndpointModel (global::NServiceBus.Modeling.EndpointDesign.Event eventInstance)
		{
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents>(eventInstance, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents.EventDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Event not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EndpointModelHasEvents instance accessors
		
		/// <summary>
		/// Get any EndpointModelHasEvents links between a given EndpointModel and a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents> GetLinks( global::NServiceBus.Modeling.EndpointDesign.EndpointModel source, global::NServiceBus.Modeling.EndpointDesign.Event target )
		{
			global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents> outLinks = new global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents>();
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents>(source, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents.EndpointModelDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents link in links )
			{
				if ( target.Equals(link.Event) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EndpointModelHasEvents link between a given EndpointModeland a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents GetLink( global::NServiceBus.Modeling.EndpointDesign.EndpointModel source, global::NServiceBus.Modeling.EndpointDesign.Event target )
		{
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents>(source, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents.EndpointModelDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEvents link in links )
			{
				if ( target.Equals(link.Event) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NServiceBus.Modeling.EndpointDesign
{
	/// <summary>
	/// DomainRelationship EndpointModelHasEndpoints
	/// Description for NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints
	/// </summary>
	[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4b427a2a-39d5-4ea5-9313-abd59ca52c79")]
	public partial class EndpointModelHasEndpoints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EndpointModelHasEndpoints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4b427a2a, 0x39d5, 0x4ea5, 0x93, 0x13, 0xab, 0xd5, 0x9c, 0xa5, 0x2c, 0x79);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EndpointModelHasEndpoints link in the same Partition as the given EndpointModel
		/// </summary>
		/// <param name="source">EndpointModel to use as the source of the relationship.</param>
		/// <param name="target">Endpoint to use as the target of the relationship.</param>
		public EndpointModelHasEndpoints(EndpointModel source, Endpoint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EndpointModelHasEndpoints.EndpointModelDomainRoleId, source), new DslModeling::RoleAssignment(EndpointModelHasEndpoints.EndpointDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndpointModelHasEndpoints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndpointModelHasEndpoints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndpointModelHasEndpoints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndpointModelHasEndpoints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EndpointModel domain role code
		
		/// <summary>
		/// EndpointModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointModelDomainRoleId = new global::System.Guid(0x390adaa9, 0x8f4c, 0x4060, 0x92, 0xf1, 0x44, 0x5a, 0x3e, 0xfc, 0xe8, 0xdf);
		
		/// <summary>
		/// DomainRole EndpointModel
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints.EndpointModel
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints/EndpointModel.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints/EndpointModel.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Endpoints", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints/EndpointModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("390adaa9-8f4c-4060-92f1-445a3efce8df")]
		public virtual EndpointModel EndpointModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EndpointModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EndpointModel of a Endpoint
		/// <summary>
		/// Gets EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EndpointModel GetEndpointModel(Endpoint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EndpointDomainRoleId) as EndpointModel;
		}
		
		/// <summary>
		/// Sets EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEndpointModel(Endpoint element, EndpointModel newEndpointModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EndpointDomainRoleId, newEndpointModel);
		}
		#endregion
		#region Endpoint domain role code
		
		/// <summary>
		/// Endpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointDomainRoleId = new global::System.Guid(0x33be3340, 0x6dc7, 0x4d56, 0xb4, 0x17, 0xf1, 0x58, 0x80, 0x26, 0xe3, 0xe2);
		
		/// <summary>
		/// DomainRole Endpoint
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints.Endpoint
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints/Endpoint.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints/Endpoint.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EndpointModel", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints/Endpoint.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("33be3340-6dc7-4d56-b417-f1588026e3e2")]
		public virtual Endpoint Endpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Endpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Endpoints of a EndpointModel
		/// <summary>
		/// Gets a list of Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Endpoint> GetEndpoints(EndpointModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoint>, Endpoint>(element, EndpointModelDomainRoleId);
		}
		#endregion
		#region EndpointModel link accessor
		/// <summary>
		/// Get the list of EndpointModelHasEndpoints links to a EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints> GetLinksToEndpoints ( global::NServiceBus.Modeling.EndpointDesign.EndpointModel endpointModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints>(endpointModelInstance, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints.EndpointModelDomainRoleId);
		}
		#endregion
		#region Endpoint link accessor
		/// <summary>
		/// Get the EndpointModelHasEndpoints link to a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints GetLinkToEndpointModel (global::NServiceBus.Modeling.EndpointDesign.Endpoint endpointInstance)
		{
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints>(endpointInstance, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints.EndpointDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Endpoint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EndpointModelHasEndpoints instance accessors
		
		/// <summary>
		/// Get any EndpointModelHasEndpoints links between a given EndpointModel and a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints> GetLinks( global::NServiceBus.Modeling.EndpointDesign.EndpointModel source, global::NServiceBus.Modeling.EndpointDesign.Endpoint target )
		{
			global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints> outLinks = new global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints>();
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints>(source, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints.EndpointModelDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EndpointModelHasEndpoints link between a given EndpointModeland a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints GetLink( global::NServiceBus.Modeling.EndpointDesign.EndpointModel source, global::NServiceBus.Modeling.EndpointDesign.Endpoint target )
		{
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints>(source, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints.EndpointModelDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasEndpoints link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NServiceBus.Modeling.EndpointDesign
{
	/// <summary>
	/// DomainRelationship EndpointModelHasCommands
	/// Description for NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands
	/// </summary>
	[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("52c02bec-dba7-4a4f-9d60-57c9b979effe")]
	public partial class EndpointModelHasCommands : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EndpointModelHasCommands domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x52c02bec, 0xdba7, 0x4a4f, 0x9d, 0x60, 0x57, 0xc9, 0xb9, 0x79, 0xef, 0xfe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EndpointModelHasCommands link in the same Partition as the given EndpointModel
		/// </summary>
		/// <param name="source">EndpointModel to use as the source of the relationship.</param>
		/// <param name="target">Command to use as the target of the relationship.</param>
		public EndpointModelHasCommands(EndpointModel source, Command target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EndpointModelHasCommands.EndpointModelDomainRoleId, source), new DslModeling::RoleAssignment(EndpointModelHasCommands.CommandDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndpointModelHasCommands(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndpointModelHasCommands(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndpointModelHasCommands(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndpointModelHasCommands(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EndpointModel domain role code
		
		/// <summary>
		/// EndpointModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointModelDomainRoleId = new global::System.Guid(0xe9775036, 0xba02, 0x47bc, 0x90, 0xae, 0x3e, 0x87, 0x1a, 0x3f, 0x58, 0x23);
		
		/// <summary>
		/// DomainRole EndpointModel
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands.EndpointModel
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands/EndpointModel.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands/EndpointModel.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Commands", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands/EndpointModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e9775036-ba02-47bc-90ae-3e871a3f5823")]
		public virtual EndpointModel EndpointModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EndpointModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EndpointModel of a Command
		/// <summary>
		/// Gets EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EndpointModel GetEndpointModel(Command element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommandDomainRoleId) as EndpointModel;
		}
		
		/// <summary>
		/// Sets EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEndpointModel(Command element, EndpointModel newEndpointModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommandDomainRoleId, newEndpointModel);
		}
		#endregion
		#region Command domain role code
		
		/// <summary>
		/// Command domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandDomainRoleId = new global::System.Guid(0x6fc4ba07, 0xf1e8, 0x41c4, 0x91, 0x05, 0x30, 0x49, 0xb2, 0x4f, 0xa9, 0x02);
		
		/// <summary>
		/// DomainRole Command
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands.Command
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands/Command.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands/Command.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EndpointModel", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands/Command.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6fc4ba07-f1e8-41c4-9105-3049b24fa902")]
		public virtual Command Command
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Command)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Commands of a EndpointModel
		/// <summary>
		/// Gets a list of Commands.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Command> GetCommands(EndpointModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Command>, Command>(element, EndpointModelDomainRoleId);
		}
		#endregion
		#region EndpointModel link accessor
		/// <summary>
		/// Get the list of EndpointModelHasCommands links to a EndpointModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands> GetLinksToCommands ( global::NServiceBus.Modeling.EndpointDesign.EndpointModel endpointModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands>(endpointModelInstance, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands.EndpointModelDomainRoleId);
		}
		#endregion
		#region Command link accessor
		/// <summary>
		/// Get the EndpointModelHasCommands link to a Command.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands GetLinkToEndpointModel (global::NServiceBus.Modeling.EndpointDesign.Command commandInstance)
		{
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands>(commandInstance, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands.CommandDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Command not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EndpointModelHasCommands instance accessors
		
		/// <summary>
		/// Get any EndpointModelHasCommands links between a given EndpointModel and a Command.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands> GetLinks( global::NServiceBus.Modeling.EndpointDesign.EndpointModel source, global::NServiceBus.Modeling.EndpointDesign.Command target )
		{
			global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands> outLinks = new global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands>();
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands>(source, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands.EndpointModelDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands link in links )
			{
				if ( target.Equals(link.Command) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EndpointModelHasCommands link between a given EndpointModeland a Command.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands GetLink( global::NServiceBus.Modeling.EndpointDesign.EndpointModel source, global::NServiceBus.Modeling.EndpointDesign.Command target )
		{
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands>(source, global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands.EndpointModelDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.EndpointModelHasCommands link in links )
			{
				if ( target.Equals(link.Command) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NServiceBus.Modeling.EndpointDesign
{
	/// <summary>
	/// DomainRelationship CommandIsProcessedBySendReceiveEndpoint
	/// Description for
	/// NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint
	/// </summary>
	[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("0d98957c-a135-4cc1-9957-e0a8ae7b8582")]
	public partial class CommandIsProcessedBySendReceiveEndpoint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommandIsProcessedBySendReceiveEndpoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d98957c, 0xa135, 0x4cc1, 0x99, 0x57, 0xe0, 0xa8, 0xae, 0x7b, 0x85, 0x82);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommandIsProcessedBySendReceiveEndpoint link in the same Partition as the given Command
		/// </summary>
		/// <param name="source">Command to use as the source of the relationship.</param>
		/// <param name="target">SendReceiveEndpoint to use as the target of the relationship.</param>
		public CommandIsProcessedBySendReceiveEndpoint(Command source, SendReceiveEndpoint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommandIsProcessedBySendReceiveEndpoint.CommandDomainRoleId, source), new DslModeling::RoleAssignment(CommandIsProcessedBySendReceiveEndpoint.SendReceiveEndpointDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommandIsProcessedBySendReceiveEndpoint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommandIsProcessedBySendReceiveEndpoint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommandIsProcessedBySendReceiveEndpoint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommandIsProcessedBySendReceiveEndpoint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Command domain role code
		
		/// <summary>
		/// Command domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandDomainRoleId = new global::System.Guid(0x3e2895c4, 0x7e5a, 0x4f16, 0xb1, 0x9f, 0x0e, 0x43, 0xb5, 0x7f, 0x46, 0xc8);
		
		/// <summary>
		/// DomainRole Command
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint.Command
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint/Command.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint/Command.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProcessingEndpoint", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint/Command.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3e2895c4-7e5a-4f16-b19f-0e43b57f46c8")]
		public virtual Command Command
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Command)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProcessCommands of a SendReceiveEndpoint
		/// <summary>
		/// Gets a list of ProcessCommands.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Command> GetProcessCommands(SendReceiveEndpoint element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Command>, Command>(element, SendReceiveEndpointDomainRoleId);
		}
		#endregion
		#region SendReceiveEndpoint domain role code
		
		/// <summary>
		/// SendReceiveEndpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SendReceiveEndpointDomainRoleId = new global::System.Guid(0x2cabc1d3, 0x0678, 0x40d4, 0x86, 0x05, 0x2a, 0xe3, 0x2d, 0x81, 0x4a, 0x4b);
		
		/// <summary>
		/// DomainRole SendReceiveEndpoint
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint.SendReceiveEndpoint
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint/SendReceiveEndpoint.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint/SendReceiveEndpoint.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProcessCommands", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint/SendReceiveEndpoint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2cabc1d3-0678-40d4-8605-2ae32d814a4b")]
		public virtual SendReceiveEndpoint SendReceiveEndpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SendReceiveEndpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SendReceiveEndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SendReceiveEndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProcessingEndpoint of a Command
		/// <summary>
		/// Gets a list of ProcessingEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SendReceiveEndpoint> GetProcessingEndpoint(Command element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SendReceiveEndpoint>, SendReceiveEndpoint>(element, CommandDomainRoleId);
		}
		#endregion
		#region Command link accessor
		/// <summary>
		/// Get the list of CommandIsProcessedBySendReceiveEndpoint links to a Command.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint> GetLinksToProcessingEndpoint ( global::NServiceBus.Modeling.EndpointDesign.Command commandInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint>(commandInstance, global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint.CommandDomainRoleId);
		}
		#endregion
		#region SendReceiveEndpoint link accessor
		/// <summary>
		/// Get the list of CommandIsProcessedBySendReceiveEndpoint links to a SendReceiveEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint> GetLinksToProcessCommands ( global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpoint sendReceiveEndpointInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint>(sendReceiveEndpointInstance, global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint.SendReceiveEndpointDomainRoleId);
		}
		#endregion
		#region CommandIsProcessedBySendReceiveEndpoint instance accessors
		
		/// <summary>
		/// Get any CommandIsProcessedBySendReceiveEndpoint links between a given Command and a SendReceiveEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint> GetLinks( global::NServiceBus.Modeling.EndpointDesign.Command source, global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpoint target )
		{
			global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint> outLinks = new global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint>();
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint>(source, global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint.CommandDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.CommandIsProcessedBySendReceiveEndpoint link in links )
			{
				if ( target.Equals(link.SendReceiveEndpoint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace NServiceBus.Modeling.EndpointDesign
{
	/// <summary>
	/// DomainRelationship EventsAreProcessedBySendReceiveEndpoints
	/// Description for
	/// NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints
	/// </summary>
	[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("435940d8-2cd2-4084-88d5-a68f72be64ea")]
	public partial class EventsAreProcessedBySendReceiveEndpoints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EventsAreProcessedBySendReceiveEndpoints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x435940d8, 0x2cd2, 0x4084, 0x88, 0xd5, 0xa6, 0x8f, 0x72, 0xbe, 0x64, 0xea);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EventsAreProcessedBySendReceiveEndpoints link in the same Partition as the given Event
		/// </summary>
		/// <param name="source">Event to use as the source of the relationship.</param>
		/// <param name="target">SendReceiveEndpoint to use as the target of the relationship.</param>
		public EventsAreProcessedBySendReceiveEndpoints(Event source, SendReceiveEndpoint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EventsAreProcessedBySendReceiveEndpoints.EventDomainRoleId, source), new DslModeling::RoleAssignment(EventsAreProcessedBySendReceiveEndpoints.SendReceiveEndpointDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EventsAreProcessedBySendReceiveEndpoints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EventsAreProcessedBySendReceiveEndpoints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EventsAreProcessedBySendReceiveEndpoints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EventsAreProcessedBySendReceiveEndpoints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Event domain role code
		
		/// <summary>
		/// Event domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventDomainRoleId = new global::System.Guid(0xff85dc3c, 0x5e73, 0x4609, 0xbb, 0x53, 0x5b, 0x31, 0xad, 0x47, 0x3e, 0x61);
		
		/// <summary>
		/// DomainRole Event
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints.Event
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints/Event.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints/Event.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProcessingEndpoints", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints/Event.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ff85dc3c-5e73-4609-bb53-5b31ad473e61")]
		public virtual Event Event
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Event)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProcessEvents of a SendReceiveEndpoint
		/// <summary>
		/// Gets a list of ProcessEvents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Event> GetProcessEvents(SendReceiveEndpoint element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Event>, Event>(element, SendReceiveEndpointDomainRoleId);
		}
		#endregion
		#region SendReceiveEndpoint domain role code
		
		/// <summary>
		/// SendReceiveEndpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SendReceiveEndpointDomainRoleId = new global::System.Guid(0x3058e310, 0x334f, 0x4a61, 0xab, 0x62, 0xd4, 0x79, 0xc3, 0x2c, 0xda, 0x75);
		
		/// <summary>
		/// DomainRole SendReceiveEndpoint
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints.SendReceiveEndpoint
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints/SendReceiveEndpoint.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints/SendReceiveEndpoint.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProcessEvents", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints/SendReceiveEndpoint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3058e310-334f-4a61-ab62-d479c32cda75")]
		public virtual SendReceiveEndpoint SendReceiveEndpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SendReceiveEndpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SendReceiveEndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SendReceiveEndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProcessingEndpoints of a Event
		/// <summary>
		/// Gets a list of ProcessingEndpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SendReceiveEndpoint> GetProcessingEndpoints(Event element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SendReceiveEndpoint>, SendReceiveEndpoint>(element, EventDomainRoleId);
		}
		#endregion
		#region Event link accessor
		/// <summary>
		/// Get the list of EventsAreProcessedBySendReceiveEndpoints links to a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints> GetLinksToProcessingEndpoints ( global::NServiceBus.Modeling.EndpointDesign.Event eventInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints>(eventInstance, global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints.EventDomainRoleId);
		}
		#endregion
		#region SendReceiveEndpoint link accessor
		/// <summary>
		/// Get the list of EventsAreProcessedBySendReceiveEndpoints links to a SendReceiveEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints> GetLinksToProcessEvents ( global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpoint sendReceiveEndpointInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints>(sendReceiveEndpointInstance, global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints.SendReceiveEndpointDomainRoleId);
		}
		#endregion
		#region EventsAreProcessedBySendReceiveEndpoints instance accessors
		
		/// <summary>
		/// Get any EventsAreProcessedBySendReceiveEndpoints links between a given Event and a SendReceiveEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints> GetLinks( global::NServiceBus.Modeling.EndpointDesign.Event source, global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpoint target )
		{
			global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints> outLinks = new global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints>();
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints>(source, global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints.EventDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.EventsAreProcessedBySendReceiveEndpoints link in links )
			{
				if ( target.Equals(link.SendReceiveEndpoint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace NServiceBus.Modeling.EndpointDesign
{
	/// <summary>
	/// DomainRelationship SendEndpointEmitsCommands
	/// Description for NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands
	/// </summary>
	[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("2b373871-5fc2-4452-8a0d-944a038c8714")]
	public partial class SendEndpointEmitsCommands : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SendEndpointEmitsCommands domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2b373871, 0x5fc2, 0x4452, 0x8a, 0x0d, 0x94, 0x4a, 0x03, 0x8c, 0x87, 0x14);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SendEndpointEmitsCommands link in the same Partition as the given SendEndpoint
		/// </summary>
		/// <param name="source">SendEndpoint to use as the source of the relationship.</param>
		/// <param name="target">Command to use as the target of the relationship.</param>
		public SendEndpointEmitsCommands(SendEndpoint source, Command target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SendEndpointEmitsCommands.SendEndpointDomainRoleId, source), new DslModeling::RoleAssignment(SendEndpointEmitsCommands.CommandDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SendEndpointEmitsCommands(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SendEndpointEmitsCommands(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SendEndpointEmitsCommands(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SendEndpointEmitsCommands(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SendEndpoint domain role code
		
		/// <summary>
		/// SendEndpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SendEndpointDomainRoleId = new global::System.Guid(0x870aa2ad, 0x6c36, 0x4c54, 0xad, 0x97, 0x32, 0x3d, 0x57, 0x8c, 0x71, 0x0a);
		
		/// <summary>
		/// DomainRole SendEndpoint
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands.SendEndpoint
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands/SendEndpoint.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands/SendEndpoint.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EmittedCommands", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands/SendEndpoint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("870aa2ad-6c36-4c54-ad97-323d578c710a")]
		public virtual SendEndpoint SendEndpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SendEndpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SendEndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SendEndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SendEndpoints of a Command
		/// <summary>
		/// Gets a list of SendEndpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SendEndpoint> GetSendEndpoints(Command element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SendEndpoint>, SendEndpoint>(element, CommandDomainRoleId);
		}
		#endregion
		#region Command domain role code
		
		/// <summary>
		/// Command domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandDomainRoleId = new global::System.Guid(0xe947f357, 0x9aab, 0x425f, 0xbe, 0xaf, 0x78, 0x01, 0xa7, 0xbf, 0x20, 0xbb);
		
		/// <summary>
		/// DomainRole Command
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands.Command
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands/Command.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands/Command.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SendEndpoints", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands/Command.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e947f357-9aab-425f-beaf-7801a7bf20bb")]
		public virtual Command Command
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Command)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmittedCommands of a SendEndpoint
		/// <summary>
		/// Gets a list of EmittedCommands.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Command> GetEmittedCommands(SendEndpoint element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Command>, Command>(element, SendEndpointDomainRoleId);
		}
		#endregion
		#region SendEndpoint link accessor
		/// <summary>
		/// Get the list of SendEndpointEmitsCommands links to a SendEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands> GetLinksToEmittedCommands ( global::NServiceBus.Modeling.EndpointDesign.SendEndpoint sendEndpointInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands>(sendEndpointInstance, global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands.SendEndpointDomainRoleId);
		}
		#endregion
		#region Command link accessor
		/// <summary>
		/// Get the list of SendEndpointEmitsCommands links to a Command.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands> GetLinksToSendEndpoints ( global::NServiceBus.Modeling.EndpointDesign.Command commandInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands>(commandInstance, global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands.CommandDomainRoleId);
		}
		#endregion
		#region SendEndpointEmitsCommands instance accessors
		
		/// <summary>
		/// Get any SendEndpointEmitsCommands links between a given SendEndpoint and a Command.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands> GetLinks( global::NServiceBus.Modeling.EndpointDesign.SendEndpoint source, global::NServiceBus.Modeling.EndpointDesign.Command target )
		{
			global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands> outLinks = new global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands>();
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands>(source, global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands.SendEndpointDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.SendEndpointEmitsCommands link in links )
			{
				if ( target.Equals(link.Command) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace NServiceBus.Modeling.EndpointDesign
{
	/// <summary>
	/// DomainRelationship SendReceiveEndpointEmitsEvents
	/// Description for
	/// NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents
	/// </summary>
	[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("2190eda0-a758-40b4-9148-123380940f6f")]
	public partial class SendReceiveEndpointEmitsEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SendReceiveEndpointEmitsEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2190eda0, 0xa758, 0x40b4, 0x91, 0x48, 0x12, 0x33, 0x80, 0x94, 0x0f, 0x6f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SendReceiveEndpointEmitsEvents link in the same Partition as the given SendReceiveEndpoint
		/// </summary>
		/// <param name="source">SendReceiveEndpoint to use as the source of the relationship.</param>
		/// <param name="target">Event to use as the target of the relationship.</param>
		public SendReceiveEndpointEmitsEvents(SendReceiveEndpoint source, Event target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SendReceiveEndpointEmitsEvents.SendReceiveEndpointDomainRoleId, source), new DslModeling::RoleAssignment(SendReceiveEndpointEmitsEvents.EventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SendReceiveEndpointEmitsEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SendReceiveEndpointEmitsEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SendReceiveEndpointEmitsEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SendReceiveEndpointEmitsEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SendReceiveEndpoint domain role code
		
		/// <summary>
		/// SendReceiveEndpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SendReceiveEndpointDomainRoleId = new global::System.Guid(0xb190155d, 0xd4c5, 0x4d75, 0x86, 0xf5, 0xa6, 0xc8, 0xf7, 0x62, 0xf8, 0x86);
		
		/// <summary>
		/// DomainRole SendReceiveEndpoint
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents.SendReceiveEndpoint
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents/SendReceiveEndpoint.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents/SendReceiveEndpoint.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EmittedEvents", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents/SendReceiveEndpoint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b190155d-d4c5-4d75-86f5-a6c8f762f886")]
		public virtual SendReceiveEndpoint SendReceiveEndpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SendReceiveEndpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SendReceiveEndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SendReceiveEndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmitterEndpoint of a Event
		/// <summary>
		/// Gets a list of EmitterEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SendReceiveEndpoint> GetEmitterEndpoint(Event element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SendReceiveEndpoint>, SendReceiveEndpoint>(element, EventDomainRoleId);
		}
		#endregion
		#region Event domain role code
		
		/// <summary>
		/// Event domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventDomainRoleId = new global::System.Guid(0xf096d249, 0xd78f, 0x4ca4, 0xbd, 0x22, 0xbc, 0x67, 0xc9, 0x82, 0x69, 0xaf);
		
		/// <summary>
		/// DomainRole Event
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents.Event
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents/Event.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents/Event.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EmitterEndpoint", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents/Event.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f096d249-d78f-4ca4-bd22-bc67c98269af")]
		public virtual Event Event
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Event)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmittedEvents of a SendReceiveEndpoint
		/// <summary>
		/// Gets a list of EmittedEvents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Event> GetEmittedEvents(SendReceiveEndpoint element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Event>, Event>(element, SendReceiveEndpointDomainRoleId);
		}
		#endregion
		#region SendReceiveEndpoint link accessor
		/// <summary>
		/// Get the list of SendReceiveEndpointEmitsEvents links to a SendReceiveEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents> GetLinksToEmittedEvents ( global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpoint sendReceiveEndpointInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents>(sendReceiveEndpointInstance, global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents.SendReceiveEndpointDomainRoleId);
		}
		#endregion
		#region Event link accessor
		/// <summary>
		/// Get the list of SendReceiveEndpointEmitsEvents links to a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents> GetLinksToEmitterEndpoint ( global::NServiceBus.Modeling.EndpointDesign.Event eventInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents>(eventInstance, global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents.EventDomainRoleId);
		}
		#endregion
		#region SendReceiveEndpointEmitsEvents instance accessors
		
		/// <summary>
		/// Get any SendReceiveEndpointEmitsEvents links between a given SendReceiveEndpoint and a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents> GetLinks( global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpoint source, global::NServiceBus.Modeling.EndpointDesign.Event target )
		{
			global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents> outLinks = new global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents>();
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents>(source, global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents.SendReceiveEndpointDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitsEvents link in links )
			{
				if ( target.Equals(link.Event) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace NServiceBus.Modeling.EndpointDesign
{
	/// <summary>
	/// DomainRelationship SendReceiveEndpointEmitCommands
	/// Description for
	/// NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands
	/// </summary>
	[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("db478779-0e3f-4614-b8fd-388328833a83")]
	public partial class SendReceiveEndpointEmitCommands : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SendReceiveEndpointEmitCommands domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdb478779, 0x0e3f, 0x4614, 0xb8, 0xfd, 0x38, 0x83, 0x28, 0x83, 0x3a, 0x83);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SendReceiveEndpointEmitCommands link in the same Partition as the given SendReceiveEndpoint
		/// </summary>
		/// <param name="source">SendReceiveEndpoint to use as the source of the relationship.</param>
		/// <param name="target">Command to use as the target of the relationship.</param>
		public SendReceiveEndpointEmitCommands(SendReceiveEndpoint source, Command target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SendReceiveEndpointEmitCommands.SendReceiveEndpointDomainRoleId, source), new DslModeling::RoleAssignment(SendReceiveEndpointEmitCommands.CommandDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SendReceiveEndpointEmitCommands(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SendReceiveEndpointEmitCommands(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SendReceiveEndpointEmitCommands(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SendReceiveEndpointEmitCommands(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SendReceiveEndpoint domain role code
		
		/// <summary>
		/// SendReceiveEndpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SendReceiveEndpointDomainRoleId = new global::System.Guid(0x96cfb879, 0xd433, 0x459e, 0xa6, 0xfa, 0x3d, 0x99, 0x68, 0x1f, 0x3e, 0xde);
		
		/// <summary>
		/// DomainRole SendReceiveEndpoint
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands.SendReceiveEndpoint
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands/SendReceiveEndpoint.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands/SendReceiveEndpoint.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EmittedCommands", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands/SendReceiveEndpoint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("96cfb879-d433-459e-a6fa-3d99681f3ede")]
		public virtual SendReceiveEndpoint SendReceiveEndpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SendReceiveEndpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SendReceiveEndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SendReceiveEndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SendReceiveEndpoints of a Command
		/// <summary>
		/// Gets a list of SendReceiveEndpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SendReceiveEndpoint> GetSendReceiveEndpoints(Command element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SendReceiveEndpoint>, SendReceiveEndpoint>(element, CommandDomainRoleId);
		}
		#endregion
		#region Command domain role code
		
		/// <summary>
		/// Command domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandDomainRoleId = new global::System.Guid(0xedad5a5f, 0xab04, 0x496e, 0xa0, 0xc0, 0x55, 0x42, 0x37, 0x64, 0xff, 0x63);
		
		/// <summary>
		/// DomainRole Command
		/// Description for
		/// NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands.Command
		/// </summary>
		[DslDesign::DisplayNameResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands/Command.DisplayName", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands/Command.Description", typeof(global::NServiceBus.Modeling.EndpointDesign.EndpointDesignDomainModel), "NServiceBus.Modeling.EndpointDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SendReceiveEndpoints", PropertyDisplayNameKey="NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands/Command.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("edad5a5f-ab04-496e-a0c0-55423764ff63")]
		public virtual Command Command
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Command)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmittedCommands of a SendReceiveEndpoint
		/// <summary>
		/// Gets a list of EmittedCommands.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Command> GetEmittedCommands(SendReceiveEndpoint element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Command>, Command>(element, SendReceiveEndpointDomainRoleId);
		}
		#endregion
		#region SendReceiveEndpoint link accessor
		/// <summary>
		/// Get the list of SendReceiveEndpointEmitCommands links to a SendReceiveEndpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands> GetLinksToEmittedCommands ( global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpoint sendReceiveEndpointInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands>(sendReceiveEndpointInstance, global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands.SendReceiveEndpointDomainRoleId);
		}
		#endregion
		#region Command link accessor
		/// <summary>
		/// Get the list of SendReceiveEndpointEmitCommands links to a Command.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands> GetLinksToSendReceiveEndpoints ( global::NServiceBus.Modeling.EndpointDesign.Command commandInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands>(commandInstance, global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands.CommandDomainRoleId);
		}
		#endregion
		#region SendReceiveEndpointEmitCommands instance accessors
		
		/// <summary>
		/// Get any SendReceiveEndpointEmitCommands links between a given SendReceiveEndpoint and a Command.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands> GetLinks( global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpoint source, global::NServiceBus.Modeling.EndpointDesign.Command target )
		{
			global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands> outLinks = new global::System.Collections.Generic.List<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands>();
			global::System.Collections.Generic.IList<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands>(source, global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands.SendReceiveEndpointDomainRoleId);
			foreach ( global::NServiceBus.Modeling.EndpointDesign.SendReceiveEndpointEmitCommands link in links )
			{
				if ( target.Equals(link.Command) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
