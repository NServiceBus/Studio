<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#+
private string StripGenericSpecification(string typeName)
{
	int firstGeneric = typeName.IndexOf("<", 0, StringComparison.Ordinal);
	if (firstGeneric != -1)
	{
		return typeName.Substring(0, firstGeneric);
	}

	return typeName;
}

private bool IsRoot(DomainClass target)
{
	return target.Notes == "IsRoot";
}

private bool HasSkipAnnotation(string plainAnnotations)
{
	return HasAnnotationFlag(plainAnnotations, "Skip");
}

private bool HasAnnotationFlag(string plainAnnotations, string annotationKey)
{
	var annotations = GetAnnotations(plainAnnotations);
	return annotations.ContainsKey(annotationKey) && annotations[annotationKey] == "true";
}

private IDictionary<string, string> GetAnnotations(string plainAnnotations)
{
	return plainAnnotations
		.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
		.Select(s => s.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))
		.Where(s => s.Length == 2)
		.ToDictionary(s => s[0], s => s[1]);
}
#>